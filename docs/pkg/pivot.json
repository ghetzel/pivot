{
    "Name": "pivot",
    "CanonicalImportPath": "github.com/ghetzel/pivot",
    "ImportPath": "pivot",
    "ParentPackage": "",
    "URL": "https://github.com/ghetzel/pivot",
    "Synopsis": "",
    "MainFunction": false,
    "CommentWordCount": 189,
    "LineCount": 20994,
    "SourceLineCount": 20357,
    "FunctionCount": 20,
    "TypeCount": 10,
    "ConstantCount": 6,
    "VariableCount": 7,
    "Statistics": {
        "Mean": 0.3333,
        "StdDev": 0.4531,
        "GeometricMean": 0,
        "HarmonicMean": 0,
        "Median": 0,
        "Minimum": 0,
        "Maximum": 1
    },
    "Files": [
        {
            "Name": "config.go",
            "Imports": [
                {
                    "PackageName": "io/ioutil",
                    "Alias": "ioutil"
                },
                {
                    "PackageName": "github.com/fatih/structs",
                    "Alias": "structs"
                },
                {
                    "PackageName": "github.com/ghodss/yaml",
                    "Alias": "yaml"
                }
            ],
            "Size": 1347,
            "LineCount": 58,
            "SourceLineCount": 46,
            "FunctionCount": 2,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "database.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/backends",
                    "Alias": "backends"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/dal",
                    "Alias": "dal"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/mapper",
                    "Alias": "mapper"
                }
            ],
            "Size": 2176,
            "LineCount": 110,
            "SourceLineCount": 88,
            "FunctionCount": 0,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "db_test.go",
            "Imports": [
                {
                    "PackageName": "encoding/json",
                    "Alias": "json"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "io/ioutil",
                    "Alias": "ioutil"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "sync",
                    "Alias": "sync"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/log",
                    "Alias": "log"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/backends",
                    "Alias": "backends"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/dal",
                    "Alias": "dal"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/filter",
                    "Alias": "filter"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/mapper",
                    "Alias": "mapper"
                },
                {
                    "PackageName": "github.com/ory/dockertest",
                    "Alias": "dockertest"
                },
                {
                    "PackageName": "github.com/stretchr/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 41836,
            "LineCount": 1519,
            "SourceLineCount": 1221,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 3,
            "VariableCount": 1
        },
        {
            "Name": "pivot.go",
            "Imports": [
                {
                    "PackageName": "encoding/json",
                    "Alias": "json"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "io/ioutil",
                    "Alias": "ioutil"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "path",
                    "Alias": "path"
                },
                {
                    "PackageName": "path/filepath",
                    "Alias": "filepath"
                },
                {
                    "PackageName": "sort",
                    "Alias": "sort"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                    "Alias": "fileutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/log",
                    "Alias": "log"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/backends",
                    "Alias": "backends"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/dal",
                    "Alias": "dal"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/filter",
                    "Alias": "filter"
                },
                {
                    "PackageName": "github.com/ghodss/yaml",
                    "Alias": "yaml"
                }
            ],
            "Size": 9000,
            "LineCount": 329,
            "SourceLineCount": 261,
            "FunctionCount": 8,
            "TypeCount": 7,
            "ConstantCount": 0,
            "VariableCount": 2
        },
        {
            "Name": "server.go",
            "Imports": [
                {
                    "PackageName": "encoding/json",
                    "Alias": "json"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "io/ioutil",
                    "Alias": "ioutil"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "path",
                    "Alias": "path"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/diecast",
                    "Alias": "diecast"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                    "Alias": "fileutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/httputil",
                    "Alias": "httputil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/log",
                    "Alias": "log"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                    "Alias": "maputil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/pathutil",
                    "Alias": "pathutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/backends",
                    "Alias": "backends"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/dal",
                    "Alias": "dal"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/filter",
                    "Alias": "filter"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/util",
                    "Alias": "util"
                },
                {
                    "PackageName": "github.com/husobee/vestigo",
                    "Alias": "vestigo"
                },
                {
                    "PackageName": "github.com/urfave/negroni",
                    "Alias": "negroni"
                }
            ],
            "Size": 22946,
            "LineCount": 782,
            "SourceLineCount": 641,
            "FunctionCount": 4,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 4
        },
        {
            "Name": "static.go",
            "Imports": [
                {
                    "PackageName": "bytes",
                    "Alias": "bytes"
                },
                {
                    "PackageName": "compress/gzip",
                    "Alias": "gzip"
                },
                {
                    "PackageName": "encoding/base64",
                    "Alias": "base64"
                },
                {
                    "PackageName": "io/ioutil",
                    "Alias": "ioutil"
                },
                {
                    "PackageName": "net/http",
                    "Alias": "http"
                },
                {
                    "PackageName": "os",
                    "Alias": "os"
                },
                {
                    "PackageName": "path",
                    "Alias": "path"
                },
                {
                    "PackageName": "sync",
                    "Alias": "sync"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                }
            ],
            "Size": 1436353,
            "LineCount": 18188,
            "SourceLineCount": 18095,
            "FunctionCount": 6,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "version.go",
            "Imports": [
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/util",
                    "Alias": "util"
                }
            ],
            "Size": 202,
            "LineCount": 8,
            "SourceLineCount": 5,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 3,
            "VariableCount": 0
        }
    ],
    "Constants": [
        {
            "Name": "ApplicationName",
            "Immutable": true,
            "Expression": "`pivot`",
            "Value": "pivot"
        },
        {
            "Name": "ApplicationSummary",
            "Immutable": true,
            "Expression": "`an extensible database abstraction service`",
            "Value": "an extensible database abstraction service"
        },
        {
            "Name": "ApplicationVersion",
            "Immutable": true,
            "Expression": "util.Version"
        },
        {
            "Name": "TestFirst",
            "Type": "testTypeWithStringer",
            "Immutable": true,
            "Expression": "iota"
        },
        {
            "Name": "TestSecond",
            "Immutable": true
        },
        {
            "Name": "TestThird",
            "Immutable": true
        }
    ],
    "Variables": [
        {
            "Name": "DefaultAddress",
            "Expression": "`127.0.0.1`",
            "Value": "127.0.0.1"
        },
        {
            "Name": "DefaultPort",
            "Expression": "29029"
        },
        {
            "Name": "DefaultResultLimit",
            "Expression": "25"
        },
        {
            "Name": "DefaultUiDirectory",
            "Expression": "`embedded`",
            "Value": "embedded"
        },
        {
            "Name": "MonitorCheckInterval",
            "Expression": "time.Duration(10) * time.Second"
        },
        {
            "Name": "NetrcFile",
            "Expression": "``"
        },
        {
            "Name": "TestData",
            "Expression": "[]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07}"
        }
    ],
    "Functions": [
        {
            "Name": "ApplySchemata",
            "Comment": "Creates all non-existent schemata in the given directory.",
            "Arguments": [
                {
                    "Name": "fileOrDirPath",
                    "Type": "string"
                },
                {
                    "Name": "db",
                    "Type": "Backend"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "ApplySchemata(fileOrDirPath string, db Backend) error",
            "Source": "ewoJaWYgY29sbGVjdGlvbnMsIGVyciA6PSBMb2FkU2NoZW1hdGEoZmlsZU9yRGlyUGF0aCk7IGVyciA9PSBuaWwgewoJCWZvciBfLCBzY2hlbWEgOj0gcmFuZ2UgY29sbGVjdGlvbnMgewoJCQlkYi5SZWdpc3RlckNvbGxlY3Rpb24oc2NoZW1hKQoJCQlpZiBfLCBlcnIgOj0gZGIuR2V0Q29sbGVjdGlvbihzY2hlbWEuTmFtZSk7IGVyciA9PSBuaWwgewoJCQkJY29udGludWUKCQkJfSBlbHNlIGlmIGRhbC5Jc0NvbGxlY3Rpb25Ob3RGb3VuZEVycihlcnIpIHsKCQkJCWlmIGVyciA6PSBkYi5DcmVhdGVDb2xsZWN0aW9uKHNjaGVtYSk7IGVyciA9PSBuaWwgewoJCQkJCWxvZy5Ob3RpY2VmKCJbJXZdIENyZWF0ZWQgY29sbGVjdGlvbiAlcSIsIGRiLCBzY2hlbWEuTmFtZSkKCQkJCX0gZWxzZSB7CgkJCQkJbG9nLkVycm9yZigiQ2Fubm90IGNyZWF0ZSBjb2xsZWN0aW9uICVxOiAldiIsIHNjaGVtYS5OYW1lLCBlcnIpCgkJCQl9CgkJCX0gZWxzZSB7CgkJCQlyZXR1cm4gZm10LkVycm9yZigiQ2Fubm90IHZlcmlmeSBjb2xsZWN0aW9uICVxOiAldiIsIHNjaGVtYS5OYW1lLCBlcnIpCgkJCX0KCQl9CgkJcmV0dXJuIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gZXJyCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "Dir",
            "Comment": "Dir returns a http.Filesystem for the embedded assets on a given prefix dir.\nIf useLocal is true, the filesystem's contents are instead used.",
            "Arguments": [
                {
                    "Name": "useLocal",
                    "Type": "bool"
                },
                {
                    "Name": "name",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "http.FileSystem"
                }
            ],
            "Signature": "Dir(useLocal bool, name string) http.FileSystem",
            "Source": "ewoJaWYgdXNlTG9jYWwgewoJCXJldHVybiBfZXNjRGlyZWN0b3J5e2ZzOiBfZXNjTG9jYWwsIG5hbWU6IG5hbWV9Cgl9CglyZXR1cm4gX2VzY0RpcmVjdG9yeXtmczogX2VzY1N0YXRpYywgbmFtZTogbmFtZX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "FS",
            "Comment": "FS returns a http.Filesystem for the embedded assets. If useLocal is true,\nthe filesystem's contents are instead used.",
            "Arguments": [
                {
                    "Name": "useLocal",
                    "Type": "bool"
                }
            ],
            "Returns": [
                {
                    "Type": "http.FileSystem"
                }
            ],
            "Signature": "FS(useLocal bool) http.FileSystem",
            "Source": "ewoJaWYgdXNlTG9jYWwgewoJCXJldHVybiBfZXNjTG9jYWwKCX0KCXJldHVybiBfZXNjU3RhdGljCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "FSByte",
            "Comment": "FSByte returns the named file from the embedded assets. If useLocal is\ntrue, the filesystem's contents are instead used.",
            "Arguments": [
                {
                    "Name": "useLocal",
                    "Type": "bool"
                },
                {
                    "Name": "name",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "[]byte"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "FSByte(useLocal bool, name string) ([]byte, error)",
            "Source": "ewoJaWYgdXNlTG9jYWwgewoJCWYsIGVyciA6PSBfZXNjTG9jYWwuT3BlbihuYW1lKQoJCWlmIGVyciAhPSBuaWwgewoJCQlyZXR1cm4gbmlsLCBlcnIKCQl9CgkJYiwgZXJyIDo9IGlvdXRpbC5SZWFkQWxsKGYpCgkJXyA9IGYuQ2xvc2UoKQoJCXJldHVybiBiLCBlcnIKCX0KCWYsIGVyciA6PSBfZXNjU3RhdGljLnByZXBhcmUobmFtZSkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoJcmV0dXJuIGYuZGF0YSwgbmlsCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "FSMustByte",
            "Comment": "FSMustByte is the same as FSByte, but panics if name is not present.",
            "Arguments": [
                {
                    "Name": "useLocal",
                    "Type": "bool"
                },
                {
                    "Name": "name",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "[]byte"
                }
            ],
            "Signature": "FSMustByte(useLocal bool, name string) []byte",
            "Source": "ewoJYiwgZXJyIDo9IEZTQnl0ZSh1c2VMb2NhbCwgbmFtZSkKCWlmIGVyciAhPSBuaWwgewoJCXBhbmljKGVycikKCX0KCXJldHVybiBiCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "FSMustString",
            "Comment": "FSMustString is the string version of FSMustByte.",
            "Arguments": [
                {
                    "Name": "useLocal",
                    "Type": "bool"
                },
                {
                    "Name": "name",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                }
            ],
            "Signature": "FSMustString(useLocal bool, name string) string",
            "Source": "ewoJcmV0dXJuIHN0cmluZyhGU011c3RCeXRlKHVzZUxvY2FsLCBuYW1lKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "FSString",
            "Comment": "FSString is the string version of FSByte.",
            "Arguments": [
                {
                    "Name": "useLocal",
                    "Type": "bool"
                },
                {
                    "Name": "name",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "string"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "FSString(useLocal bool, name string) (string, error)",
            "Source": "ewoJYiwgZXJyIDo9IEZTQnl0ZSh1c2VMb2NhbCwgbmFtZSkKCXJldHVybiBzdHJpbmcoYiksIGVycgp9",
            "IsPackageLevel": true
        },
        {
            "Name": "LoadFixtures",
            "Comment": "Calls LoadFixturesFromFile from all *.json files in the given directory.",
            "Arguments": [
                {
                    "Name": "fileOrDirPath",
                    "Type": "string"
                },
                {
                    "Name": "db",
                    "Type": "Backend"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "LoadFixtures(fileOrDirPath string, db Backend) error",
            "Source": "ewoJaWYgZmlsZXV0aWwuRGlyRXhpc3RzKGZpbGVPckRpclBhdGgpIHx8IHN0cmluZ3MuQ29udGFpbnMoZmlsZU9yRGlyUGF0aCwgYCpgKSB7CgkJdmFyIGdsb2Igc3RyaW5nCgkJaWYgc3RyaW5ncy5Db250YWlucyhmaWxlT3JEaXJQYXRoLCBgKmApIHsKCQkJZ2xvYiA9IGZpbGVPckRpclBhdGgKCQl9IGVsc2UgewoJCQlnbG9iID0gZmlsZXBhdGguSm9pbihmaWxlT3JEaXJQYXRoLCBgKi5qc29uYCkKCQl9CgkJaWYgZmlsZW5hbWVzLCBlcnIgOj0gZmlsZXBhdGguR2xvYihnbG9iKTsgZXJyID09IG5pbCB7CgkJCXNvcnQuU3RyaW5ncyhmaWxlbmFtZXMpCgkJCWZvciBfLCBmaWxlbmFtZSA6PSByYW5nZSBmaWxlbmFtZXMgewoJCQkJaWYgZXJyIDo9IExvYWRGaXh0dXJlc0Zyb21GaWxlKGZpbGVuYW1lLCBkYik7IGVyciAhPSBuaWwgewoJCQkJCXJldHVybiBlcnIKCQkJCX0KCQkJfQoJCX0gZWxzZSB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJDYW5ub3QgbGlzdCBkaXJlY3RvcnkgJXE6ICV2IiwgZmlsZU9yRGlyUGF0aCwgZXJyKQoJCX0KCX0gZWxzZSBpZiBmaWxldXRpbC5Jc05vbmVtcHR5RmlsZShmaWxlT3JEaXJQYXRoKSB7CgkJcmV0dXJuIExvYWRGaXh0dXJlc0Zyb21GaWxlKGZpbGVPckRpclBhdGgsIGRiKQoJfSBlbHNlIHsKCQlyZXR1cm4gZm10LkVycm9yZigiQ2Fubm90IGxvYWQgZml4dHVyZXMgZnJvbSAlcSIsIGZpbGVPckRpclBhdGgpCgl9CglyZXR1cm4gbmlsCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "LoadFixturesFromFile",
            "Comment": "Loads a JSON-encoded array of dal.Record objects from a file into the given DB backend instance.",
            "Arguments": [
                {
                    "Name": "filename",
                    "Type": "string"
                },
                {
                    "Name": "db",
                    "Type": "Backend"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "LoadFixturesFromFile(filename string, db Backend) error",
            "Source": "ewoJZmlsZW5hbWUgPSBmaWxldXRpbC5NdXN0RXhwYW5kVXNlcihmaWxlbmFtZSkKCWlmIGZpbGUsIGVyciA6PSBvcy5PcGVuKGZpbGVuYW1lKTsgZXJyID09IG5pbCB7CgkJdmFyIGNvbW1lbnRSZW1vdmVyID0gZmlsZXV0aWwuTmV3UmVhZE1hbmlwdWxhdG9yKGZpbGUsIGZpbGV1dGlsLlJlbW92ZUxpbmVzV2l0aFByZWZpeChgLy9gLCB0cnVlKSkKCQlkZWZlciBjb21tZW50UmVtb3Zlci5DbG9zZSgpCgkJdmFyIHJlY29yZHMgW10qZGFsLlJlY29yZAoJCXZhciBhbGxPcHRpb25hbCBib29sID0gdHJ1ZQoJCWlmIGVyciA6PSBqc29uLk5ld0RlY29kZXIoY29tbWVudFJlbW92ZXIpLkRlY29kZSgmcmVjb3Jkcyk7IGVyciA9PSBuaWwgewoJCQl2YXIgY29sbGVjdGlvbnMgW11zdHJpbmcKCQkJZm9yIF8sIHJlY29yZCA6PSByYW5nZSByZWNvcmRzIHsKCQkJCWlmIHJlY29yZC5Db2xsZWN0aW9uTmFtZSA9PSBgYCB7CgkJCQkJcmVjb3JkLkNvbGxlY3Rpb25OYW1lID0gc3RyaW5ncy5UcmltU3VmZml4KGZpbGVwYXRoLkJhc2UoZmlsZW5hbWUpLCBmaWxlcGF0aC5FeHQoZmlsZW5hbWUpKQoJCQkJfQoJCQkJaWYgIXJlY29yZC5PcHRpb25hbCB7CgkJCQkJYWxsT3B0aW9uYWwgPSBmYWxzZQoJCQkJfQoJCQkJY29sbGVjdGlvbnMgPSBhcHBlbmQoY29sbGVjdGlvbnMsIHJlY29yZC5Db2xsZWN0aW9uTmFtZSkKCQkJfQoJCQljb2xsZWN0aW9ucyA9IHNsaWNldXRpbC5VbmlxdWVTdHJpbmdzKGNvbGxlY3Rpb25zKQoJCQlmb3IgXywgbmFtZSA6PSByYW5nZSBjb2xsZWN0aW9ucyB7CgkJCQlpZiBjb2xsZWN0aW9uLCBlcnIgOj0gZGIuR2V0Q29sbGVjdGlvbihuYW1lKTsgZXJyID09IG5pbCB7CgkJCQkJdmFyIGkgaW50CgkJCQkJZm9yIF8sIHJlY29yZCA6PSByYW5nZSByZWNvcmRzIHsKCQkJCQkJdmFyIGVyciBlcnJvcgoJCQkJCQl2YXIgb3AgaW50CgkJCQkJCWlmIHJlY29yZC5Db2xsZWN0aW9uTmFtZSAhPSBuYW1lIHsKCQkJCQkJCWNvbnRpbnVlCgkJCQkJCX0KCQkJCQkJaWYgdHlwZXV0aWwuSXNBcnJheShyZWNvcmQuSUQpIHsKCQkJCQkJCWlmIGVyciA6PSByZWNvcmQuU2V0S2V5cyhjb2xsZWN0aW9uLCBkYWwuUGVyc2lzdE9wZXJhdGlvbiwgc2xpY2V1dGlsLlNsaWNlaWZ5KHJlY29yZC5JRCkuLi4pOyBlcnIgIT0gbmlsIHsKCQkJCQkJCQlyZXR1cm4gZm10LkVycm9yZigiJXMgaWQgJXY6ICV2IiwgbmFtZSwgcmVjb3JkLklELCBlcnIpCgkJCQkJCQl9CgkJCQkJCX0KCQkJCQkJc3dpdGNoIHN0cmluZ3MuVG9Mb3dlcihyZWNvcmQuT3BlcmF0aW9uKSB7CgkJCQkJCWNhc2UgYGA6CgkJCQkJCQlpZiBkYi5FeGlzdHMoY29sbGVjdGlvbi5OYW1lLCByZWNvcmQpIHsKCQkJCQkJCQlvcCA9IDEKCQkJCQkJCX0gZWxzZSB7CgkJCQkJCQkJb3AgPSAwCgkJCQkJCQl9CgkJCQkJCWNhc2UgYGNyZWF0ZWA6CgkJCQkJCQlvcCA9IDAKCQkJCQkJY2FzZSBgdXBkYXRlYDoKCQkJCQkJCW9wID0gMQoJCQkJCQljYXNlIGBkZWxldGVgOgoJCQkJCQkJb3AgPSAyCgkJCQkJCWRlZmF1bHQ6CgkJCQkJCQlyZXR1cm4gZm10LkVycm9yZigiaW52YWxpZCBvcGVyYXRpb24gJXE7IGxlYXZlIGJsYW5rLCBvciBzcGVjaWZ5ICVxLCAlcSwgb3IgJXEiLCByZWNvcmQuT3BlcmF0aW9uLCBgY3JlYXRlYCwgYHVwZGF0ZWAsIGBkZWxldGVgKQoJCQkJCQl9CgkJCQkJCXN3aXRjaCBvcCB7CgkJCQkJCWNhc2UgMDoKCQkJCQkJCWVyciA9IGRiLkluc2VydChjb2xsZWN0aW9uLk5hbWUsIGRhbC5OZXdSZWNvcmRTZXQocmVjb3JkKSkKCQkJCQkJY2FzZSAxOgoJCQkJCQkJZXJyID0gZGIuVXBkYXRlKGNvbGxlY3Rpb24uTmFtZSwgZGFsLk5ld1JlY29yZFNldChyZWNvcmQpKQoJCQkJCQljYXNlIDI6CgkJCQkJCQllcnIgPSBkYi5EZWxldGUoY29sbGVjdGlvbi5OYW1lLCByZWNvcmQuS2V5cyhjb2xsZWN0aW9uKSkKCQkJCQkJfQoJCQkJCQlpZiBlcnIgIT0gbmlsIHsKCQkJCQkJCWlmIHJlY29yZC5PcHRpb25hbCB7CgkJCQkJCQkJY29udGludWUKCQkJCQkJCX0gZWxzZSB7CgkJCQkJCQkJcmV0dXJuIGZtdC5FcnJvcmYoIkNhbm5vdCBsb2FkIGNvbGxlY3Rpb24gJXEsIHJlY29yZCAldjogJXYiLCBuYW1lLCByZWNvcmQuSUQsIGVycikKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCQlpICs9IDEKCQkJCQl9CgkJCQkJbG9nLkluZm9mKCJDb2xsZWN0aW9uICVxOiBsb2FkZWQgJWQgcmVjb3JkcyIsIG5hbWUsIGkpCgkJCQl9IGVsc2UgaWYgYWxsT3B0aW9uYWwgewoJCQkJCWNvbnRpbnVlCgkJCQl9IGVsc2UgewoJCQkJCXJldHVybiBmbXQuRXJyb3JmKCJDYW5ub3QgbG9hZCBjb2xsZWN0aW9uICVxOiAldiIsIG5hbWUsIGVycikKCQkJCX0KCQkJfQoJCQlyZXR1cm4gbmlsCgkJfSBlbHNlIHsKCQkJcmV0dXJuIGZtdC5FcnJvcmYoIkNhbm5vdCBkZWNvZGUgZml4dHVyZSBmaWxlICVxOiAldiIsIGZpbGVuYW1lLCBlcnIpCgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gZm10LkVycm9yZigiQ2Fubm90IGxvYWQgZml4dHVyZSBmaWxlICVxOiAldiIsIGZpbGVuYW1lLCBlcnIpCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "LoadSchemata",
            "Comment": "Calls LoadSchemataFromFile from all *.json files in the given directory.",
            "Arguments": [
                {
                    "Name": "fileOrDirPaths",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "[]*dal.Collection"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "LoadSchemata(fileOrDirPaths ...string) ([]*dal.Collection, error)",
            "Source": "ewoJdmFyIGxvYWRlZCBbXSpkYWwuQ29sbGVjdGlvbgoJdmFyIGZpbGVuYW1lcyBbXXN0cmluZwoJZm9yIF8sIGZpbGVPckRpclBhdGggOj0gcmFuZ2UgZmlsZU9yRGlyUGF0aHMgewoJCWlmIGZpbGV1dGlsLkRpckV4aXN0cyhmaWxlT3JEaXJQYXRoKSB7CgkJCWlmIGZucywgZXJyIDo9IGZpbGVwYXRoLkdsb2IoZmlsZXBhdGguSm9pbihmaWxlT3JEaXJQYXRoLCBgKi5qc29uYCkpOyBlcnIgPT0gbmlsIHsKCQkJCWZpbGVuYW1lcyA9IGFwcGVuZChmaWxlbmFtZXMsIGZucy4uLikKCQkJfSBlbHNlIHsKCQkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkNhbm5vdCBsaXN0IGRpcmVjdG9yeSAlcTogJXYiLCBmaWxlT3JEaXJQYXRoLCBlcnIpCgkJCX0KCQl9IGVsc2UgaWYgZmlsZXV0aWwuSXNOb25lbXB0eUZpbGUoZmlsZU9yRGlyUGF0aCkgewoJCQlmaWxlbmFtZXMgPSBhcHBlbmQoZmlsZW5hbWVzLCBmaWxlT3JEaXJQYXRoKQoJCX0gZWxzZSBpZiBmbnMsIGVyciA6PSBmaWxlcGF0aC5HbG9iKGZpbGVPckRpclBhdGgpOyBlcnIgPT0gbmlsIHsKCQkJZmlsZW5hbWVzID0gYXBwZW5kKGZpbGVuYW1lcywgZm5zLi4uKQoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkNhbm5vdCBsb2FkIHNjaGVtYXRhIGZyb20gJXEiLCBmaWxlT3JEaXJQYXRoKQoJCX0KCX0KCXNvcnQuU3RyaW5ncyhmaWxlbmFtZXMpCglmb3IgXywgZmlsZW5hbWUgOj0gcmFuZ2UgZmlsZW5hbWVzIHsKCQlpZiBjb2xsZWN0aW9ucywgZXJyIDo9IExvYWRTY2hlbWF0YUZyb21GaWxlKGZpbGVuYW1lKTsgZXJyID09IG5pbCB7CgkJCWlmIGxlbihjb2xsZWN0aW9ucykgPT0gMCB7CgkJCQljb250aW51ZQoJCQl9CgkJCWxvZy5JbmZvZigiTG9hZGVkICVkIGRlZmluaXRpb25zIGZyb20gJXYiLCBsZW4oY29sbGVjdGlvbnMpLCBmaWxlbmFtZSkKCQkJbG9hZGVkID0gYXBwZW5kKGxvYWRlZCwgY29sbGVjdGlvbnMuLi4pCgkJfSBlbHNlIHsKCQkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiQ2Fubm90IGxvYWQgc2NoZW1hIGZpbGUgJXE6ICV2IiwgZmlsZW5hbWUsIGVycikKCQl9Cgl9CglyZXR1cm4gbG9hZGVkLCBuaWwKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "LoadSchemataFromFile",
            "Comment": "Loads and registers a JSON-encoded array of dal.Collection objects into the given DB backend instance.",
            "Arguments": [
                {
                    "Name": "filename",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "[]*dal.Collection"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "LoadSchemataFromFile(filename string) ([]*dal.Collection, error)",
            "Source": "ewoJaWYgZmlsZSwgZXJyIDo9IG9zLk9wZW4oZmlsZW5hbWUpOyBlcnIgPT0gbmlsIHsKCQl2YXIgY29sbGVjdGlvbnMgW10qZGFsLkNvbGxlY3Rpb24KCQl2YXIgbWVyciBlcnJvcgoJCXN3aXRjaCBleHQgOj0gcGF0aC5FeHQoZmlsZW5hbWUpOyBleHQgewoJCWNhc2UgYC5qc29uYDoKCQkJaWYgZXJyIDo9IGpzb24uTmV3RGVjb2RlcihmaWxlKS5EZWNvZGUoJmNvbGxlY3Rpb25zKTsgZXJyICE9IG5pbCB7CgkJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJkZWNvZGUgZXJyb3I6ICV2IiwgZXJyKQoJCQl9CgkJY2FzZSBgLnltbGAsIGAueWFtbGA6CgkJCWlmIGRhdGEsIGVyciA6PSBpb3V0aWwuUmVhZEFsbChmaWxlKTsgZXJyID09IG5pbCB7CgkJCQlpZiBlcnIgOj0geWFtbC5Vbm1hcnNoYWwoZGF0YSwgJmNvbGxlY3Rpb25zKTsgZXJyICE9IG5pbCB7CgkJCQkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiZGVjb2RlIGVycm9yOiAldiIsIGVycikKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCXJldHVybiBuaWwsIGVycgoJCQl9CgkJZGVmYXVsdDoKCQkJcmV0dXJuIG5pbCwgbmlsCgkJfQoJCWZvciBfLCBjb2xsZWN0aW9uIDo9IHJhbmdlIGNvbGxlY3Rpb25zIHsKCQkJbWVyciA9IGxvZy5BcHBlbmRFcnJvcihtZXJyLCBjb2xsZWN0aW9uLkNoZWNrKCkpCgkJfQoJCXJldHVybiBjb2xsZWN0aW9ucywgbWVycgoJfSBlbHNlIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "MustGetCollection",
            "Comment": "A panicky version of backends.Backend.GetCollection",
            "Arguments": [
                {
                    "Name": "db",
                    "Type": "Backend"
                },
                {
                    "Name": "name",
                    "Type": "string"
                }
            ],
            "Returns": [
                {
                    "Type": "*dal.Collection"
                }
            ],
            "Signature": "MustGetCollection(db Backend, name string) *dal.Collection",
            "Source": "ewoJaWYgY29sbGVjdGlvbiwgZXJyIDo9IGRiLkdldENvbGxlY3Rpb24obmFtZSk7IGVyciA9PSBuaWwgewoJCXJldHVybiBjb2xsZWN0aW9uCgl9IGVsc2UgewoJCXBhbmljKGZtdC5TcHJpbnRmKCJDYW5ub3QgZ2V0IGNvbGxlY3Rpb24gJXE6ICV2IiwgbmFtZSwgZXJyKSkKCX0KfQ==",
            "IsPackageLevel": true
        }
    ],
    "Tests": [
        {
            "Name": "TestAll",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestAll(t *testing.T)",
            "Source": "ewoJbG9nLlNldExldmVsKGxvZy5XQVJOSU5HKQoJcnVuIDo9IGZ1bmMoYiBiYWNrZW5kcy5CYWNrZW5kKSB7CgkJdC5Mb2dmKCJbJXZdIFRlc3RpbmcgQ29sbGVjdGlvbk1hbmFnZW1lbnQiLCBiKQoJCXRlc3RDb2xsZWN0aW9uTWFuYWdlbWVudCh0LCBiKQoJCXQuTG9nZigiWyV2XSBUZXN0aW5nIEJhc2ljQ1JVRCIsIGIpCgkJdGVzdEJhc2ljQ1JVRCh0LCBiKQoJCXQuTG9nZigiWyV2XSBUZXN0aW5nIExvYWQgU2NoZW1hdGEgZnJvbSBGaWxlKHMpIiwgYikKCQl0ZXN0TG9hZFNjaGVtYSh0LCBiKQoJCXQuTG9nZigiWyV2XSBUZXN0aW5nIExvYWQgRml4dHVyZXMgZnJvbSBGaWxlKHMpIiwgYikKCQl0ZXN0TG9hZEZpeHR1cmVzKHQsIGIpCgkJdC5Mb2dmKCJbJXZdIFRlc3RpbmcgSWRGb3JtYXR0ZXJzUmFuZG9tSWQiLCBiKQoJCXRlc3RJZEZvcm1hdHRlcnNSYW5kb21JZCh0LCBiKQoJCXQuTG9nZigiWyV2XSBUZXN0aW5nIElkRm9ybWF0dGVyc0lkRnJvbUZpZWxkVmFsdWVzIiwgYikKCQl0ZXN0SWRGb3JtYXR0ZXJzSWRGcm9tRmllbGRWYWx1ZXModCwgYikKCQlpZiBiLlN1cHBvcnRzKGJhY2tlbmRzLkNvbXBvc2l0ZUtleXMpIHsKCQkJdC5Mb2dmKCJbJXZdIFRlc3RpbmcgQ29tcG9zaXRlS2V5UXVlcmllcyIsIGIpCgkJCXRlc3RDb21wb3NpdGVLZXlRdWVyaWVzKHQsIGIpCgkJfQoJCXQuTG9nZigiWyV2XSBUZXN0aW5nIFNlYXJjaFF1ZXJ5IiwgYikKCQl0ZXN0U2VhcmNoUXVlcnkodCwgYikKCQl0LkxvZ2YoIlsldl0gVGVzdGluZyBTZWFyY2hRdWVyeVBhZ2luYXRlZCIsIGIpCgkJdGVzdFNlYXJjaFF1ZXJ5UGFnaW5hdGVkKHQsIGIpCgkJdC5Mb2dmKCJbJXZdIFRlc3RpbmcgU2VhcmNoUXVlcnlMaW1pdCIsIGIpCgkJdGVzdFNlYXJjaFF1ZXJ5TGltaXQodCwgYikKCQl0LkxvZ2YoIlsldl0gVGVzdGluZyBTZWFyY2hRdWVyeU9mZnNldCIsIGIpCgkJdGVzdFNlYXJjaFF1ZXJ5T2Zmc2V0KHQsIGIpCgkJdC5Mb2dmKCJbJXZdIFRlc3RpbmcgU2VhcmNoUXVlcnlPZmZzZXRMaW1pdCIsIGIpCgkJdGVzdFNlYXJjaFF1ZXJ5T2Zmc2V0TGltaXQodCwgYikKCQl0LkxvZ2YoIlsldl0gVGVzdGluZyBMaXN0VmFsdWVzIiwgYikKCQl0ZXN0TGlzdFZhbHVlcyh0LCBiKQoJCXQuTG9nZigiWyV2XSBUZXN0aW5nIFNlYXJjaEFuYWx5c2lzIiwgYikKCQl0ZXN0U2VhcmNoQW5hbHlzaXModCwgYikKCQl0LkxvZ2YoIlsldl0gVGVzdGluZyBPYmplY3RUeXBlIiwgYikKCQl0ZXN0T2JqZWN0VHlwZSh0LCBiKQoJCXQuTG9nZigiWyV2XSBUZXN0aW5nIEFnZ3JlZ2F0b3JzIiwgYikKCQl0ZXN0QWdncmVnYXRvcnModCwgYikKCQl0LkxvZ2YoIlsldl0gVGVzdGluZyBNb2RlbCBDUlVEIiwgYikKCQl0ZXN0TW9kZWxDUlVEKHQsIGIpCgkJdC5Mb2dmKCJbJXZdIFRlc3RpbmcgTW9kZWwgRmluZCIsIGIpCgkJdGVzdE1vZGVsRmluZCh0LCBiKQoJCXQuTG9nZigiWyV2XSBUZXN0aW5nIE1vZGVsIExpc3QiLCBiKQoJCXRlc3RNb2RlbExpc3QodCwgYikKCX0KCWlmIHR5cGV1dGlsLlYob3MuR2V0ZW52KGBDSWApKS5Cb29sKCkgewoJCXJ1bm5hYmxlcyA6PSBzbGljZXV0aWwuQ29tcGFjdFN0cmluZyhzdHJpbmdzLlNwbGl0KG9zLkdldGVudihgUElWT1RfVEVTVF9CQUNLRU5EU2ApLCBgLGApKQoJCXNob3VsZFJ1biA6PSBmdW5jKHdnICpzeW5jLldhaXRHcm91cCwgbmFtZSBzdHJpbmcsIGRvIGZ1bmMoKSkgewoJCQl3Zy5BZGQoMSkKCQkJZGVmZXIgd2cuRG9uZSgpCgkJCWlmIGxlbihydW5uYWJsZXMpID09IDAgfHwgc2xpY2V1dGlsLkNvbnRhaW5zU3RyaW5nKHJ1bm5hYmxlcywgbmFtZSkgewoJCQkJZG8oKQoJCQl9IGVsc2UgewoJCQkJZm10LlByaW50ZigiU2tpcHBpbmcgZGF0YWJhc2Ugc3VpdGUgJXFcbiIsIG5hbWUpCgkJCX0KCQl9CgkJdmFyIHdhaXRlciBzeW5jLldhaXRHcm91cAoJCWdvIHNob3VsZFJ1bigmd2FpdGVyLCBgcmVkaXNgLCBmdW5jKCkgewoJCQlzZXR1cFRlc3RSZWRpcyhgNC4wLjE0YCwgcnVuKQoJCX0pCgkJZ28gc2hvdWxkUnVuKCZ3YWl0ZXIsIGByZWRpc2AsIGZ1bmMoKSB7CgkJCXNldHVwVGVzdFJlZGlzKGA1LjBgLCBydW4pCgkJfSkKCQlnbyBzaG91bGRSdW4oJndhaXRlciwgYG1vbmdvYCwgZnVuYygpIHsKCQkJc2V0dXBUZXN0TW9uZ28oYDMuMmAsIHJ1bikKCQl9KQoJCWdvIHNob3VsZFJ1bigmd2FpdGVyLCBgbW9uZ29gLCBmdW5jKCkgewoJCQlzZXR1cFRlc3RNb25nbyhgMy40YCwgcnVuKQoJCX0pCgkJZ28gc2hvdWxkUnVuKCZ3YWl0ZXIsIGBtb25nb2AsIGZ1bmMoKSB7CgkJCXNldHVwVGVzdE1vbmdvKGAzLjZgLCBydW4pCgkJfSkKCQlnbyBzaG91bGRSdW4oJndhaXRlciwgYG1vbmdvYCwgZnVuYygpIHsKCQkJc2V0dXBUZXN0TW9uZ28oYDQuMGAsIHJ1bikKCQl9KQoJCWdvIHNob3VsZFJ1bigmd2FpdGVyLCBgcHNxbGAsIGZ1bmMoKSB7CgkJCXNldHVwVGVzdFBvc3RncmVzKGA5YCwgcnVuKQoJCX0pCgkJZ28gc2hvdWxkUnVuKCZ3YWl0ZXIsIGBwc3FsYCwgZnVuYygpIHsKCQkJc2V0dXBUZXN0UG9zdGdyZXMoYDEwYCwgcnVuKQoJCX0pCgkJZ28gc2hvdWxkUnVuKCZ3YWl0ZXIsIGBwc3FsYCwgZnVuYygpIHsKCQkJc2V0dXBUZXN0UG9zdGdyZXMoYDExYCwgcnVuKQoJCX0pCgkJZ28gc2hvdWxkUnVuKCZ3YWl0ZXIsIGBzcWxpdGVgLCBmdW5jKCkgewoJCQlzZXR1cFRlc3RTcWxpdGUocnVuKQoJCX0pCgkJZ28gc2hvdWxkUnVuKCZ3YWl0ZXIsIGBzcWxpdGVgLCBmdW5jKCkgewoJCQlzZXR1cFRlc3RTcWxpdGVXaXRoQWRkaXRpb25hbEJsZXZlSW5kZXhlcihydW4pCgkJfSkKCQlnbyBzaG91bGRSdW4oJndhaXRlciwgYHNxbGl0ZWAsIGZ1bmMoKSB7CgkJCXNldHVwVGVzdFNxbGl0ZVdpdGhCbGV2ZUluZGV4ZXIocnVuKQoJCX0pCgkJZ28gc2hvdWxkUnVuKCZ3YWl0ZXIsIGBlbGFzdGljc2VhcmNoYCwgZnVuYygpIHsKCQkJc2V0dXBUZXN0RWxhc3RpY3NlYXJjaChgNi44LjBgLCBydW4pCgkJfSkKCQlnbyBzaG91bGRSdW4oJndhaXRlciwgYGZzYCwgZnVuYygpIHsKCQkJc2V0dXBUZXN0RmlsZXN5c3RlbUpzb24ocnVuKQoJCX0pCgkJZ28gc2hvdWxkUnVuKCZ3YWl0ZXIsIGBmc2AsIGZ1bmMoKSB7CgkJCXNldHVwVGVzdEZpbGVzeXN0ZW1ZYW1sKHJ1bikKCQl9KQoJCWdvIHNob3VsZFJ1bigmd2FpdGVyLCBgZnNgLCBmdW5jKCkgewoJCQlzZXR1cFRlc3RGaWxlc3lzdGVtRGVmYXVsdChydW4pCgkJfSkKCQl0aW1lLlNsZWVwKHRpbWUuU2Vjb25kKQoJCXdhaXRlci5XYWl0KCkKCX0gZWxzZSB7CgkJdC5Mb2dmKCJDSSB0ZXN0cyBub3QgcnVubmluZyIpCgl9Cn0=",
            "IsPackageLevel": true
        }
    ],
    "Types": {
        "Backend": {
            "Name": "Backend",
            "Source": "dHlwZSBCYWNrZW5kID0gYmFja2VuZHMuQmFja2VuZCAvLyBjcmVhdGUgaGFuZHkgdHlwZSBhbGlhc2VzIHRvIGF2b2lkIGltcG9ydGluZyBmcm9tIGFsbCBvdmVyIHRoZSBwbGFjZQo="
        },
        "Collection": {
            "Name": "Collection",
            "Source": "dHlwZSBDb2xsZWN0aW9uID0gZGFsLkNvbGxlY3Rpb24="
        },
        "Configuration": {
            "Name": "Configuration",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "ForEnv",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "env",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "Configuration"
                        }
                    ],
                    "Signature": "ForEnv(env string) Configuration",
                    "IsPackageLevel": false
                },
                {
                    "Name": "LoadConfigFile",
                    "Arguments": [
                        {
                            "Name": "path",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "Configuration"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "LoadConfigFile(path string) (Configuration, error)",
                    "Source": "ewoJY29uZmlnIDo9IENvbmZpZ3VyYXRpb257fQoJaWYgZGF0YSwgZXJyIDo9IGlvdXRpbC5SZWFkRmlsZShwYXRoKTsgZXJyID09IG5pbCB7CgkJaWYgZXJyIDo9IHlhbWwuVW5tYXJzaGFsKGRhdGEsICZjb25maWcpOyBlcnIgIT0gbmlsIHsKCQkJcmV0dXJuIGNvbmZpZywgZXJyCgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gY29uZmlnLCBlcnIKCX0KCXJldHVybiBjb25maWcsIG5pbAp9",
                    "IsPackageLevel": true
                }
            ],
            "Fields": [
                {
                    "Name": "Backend",
                    "Type": "string"
                },
                {
                    "Name": "Indexer",
                    "Type": "string"
                },
                {
                    "Name": "Autoexpand",
                    "Type": "bool"
                },
                {
                    "Name": "AutocreateCollections",
                    "Type": "bool"
                },
                {
                    "Name": "Environments",
                    "Type": "map[string]Configuration"
                }
            ],
            "Source": "dHlwZSBDb25maWd1cmF0aW9uIHN0cnVjdCB7CglCYWNrZW5kICAgICAgICAgICAgICAgc3RyaW5nICAgICAgICAgICAgICAgICAgIGBqc29uOiJiYWNrZW5kImAKCUluZGV4ZXIgICAgICAgICAgICAgICBzdHJpbmcgICAgICAgICAgICAgICAgICAgYGpzb246ImluZGV4ZXIiYAoJQXV0b2V4cGFuZCAgICAgICAgICAgIGJvb2wgICAgICAgICAgICAgICAgICAgICBganNvbjoiYXV0b2V4cGFuZCJgCglBdXRvY3JlYXRlQ29sbGVjdGlvbnMgYm9vbCAgICAgICAgICAgICAgICAgICAgIGBqc29uOiJhdXRvY3JlYXRlImAKCUVudmlyb25tZW50cyAgICAgICAgICBtYXBbc3RyaW5nXUNvbmZpZ3VyYXRpb24gYGpzb246ImVudmlyb25tZW50cyJgCn0="
        },
        "ConnectOptions": {
            "Name": "ConnectOptions",
            "Source": "dHlwZSBDb25uZWN0T3B0aW9ucyA9IGJhY2tlbmRzLkNvbm5lY3RPcHRpb25z"
        },
        "DB": {
            "Name": "DB",
            "Methods": [
                {
                    "Name": "NewDatabaseWithOptions",
                    "Comment": "Create a new database connection with the given options.",
                    "Arguments": [
                        {
                            "Name": "connection",
                            "Type": "string"
                        },
                        {
                            "Name": "options",
                            "Type": "ConnectOptions"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "DB"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "NewDatabaseWithOptions(connection string, options ConnectOptions) (DB, error)",
                    "Source": "ewoJaWYgY3MsIGVyciA6PSBkYWwuUGFyc2VDb25uZWN0aW9uU3RyaW5nKGNvbm5lY3Rpb24pOyBlcnIgPT0gbmlsIHsKCQlpZiBOZXRyY0ZpbGUgIT0gYGAgewoJCQlpZiBlcnIgOj0gY3MuTG9hZENyZWRlbnRpYWxzRnJvbU5ldHJjKE5ldHJjRmlsZSk7IGVyciAhPSBuaWwgewoJCQkJcmV0dXJuIG5pbCwgZXJyCgkJCX0KCQl9CgkJaWYgYmFja2VuZCwgZXJyIDo9IGJhY2tlbmRzLk1ha2VCYWNrZW5kKGNzKTsgZXJyID09IG5pbCB7CgkJCWlmIG9wdGlvbnMuSW5kZXhlciAhPSBgYCB7CgkJCQlpZiBpY3MsIGVyciA6PSBkYWwuUGFyc2VDb25uZWN0aW9uU3RyaW5nKG9wdGlvbnMuSW5kZXhlcik7IGVyciA9PSBuaWwgewoJCQkJCWlmIE5ldHJjRmlsZSAhPSBgYCB7CgkJCQkJCWlmIGVyciA6PSBpY3MuTG9hZENyZWRlbnRpYWxzRnJvbU5ldHJjKE5ldHJjRmlsZSk7IGVyciAhPSBuaWwgewoJCQkJCQkJcmV0dXJuIG5pbCwgZXJyCgkJCQkJCX0KCQkJCQl9CgkJCQkJaWYgZXJyIDo9IGJhY2tlbmQuU2V0SW5kZXhlcihpY3MpOyBlcnIgIT0gbmlsIHsKCQkJCQkJcmV0dXJuIG5pbCwgZXJyCgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQlyZXR1cm4gbmlsLCBlcnIKCQkJCX0KCQkJfQoJCQlpZiAhb3B0aW9ucy5Ta2lwSW5pdGlhbGl6ZSB7CgkJCQlpZiBlcnIgOj0gYmFja2VuZC5Jbml0aWFsaXplKCk7IGVyciAhPSBuaWwgewoJCQkJCXJldHVybiBuaWwsIGVycgoJCQkJfQoJCQl9CgkJCXJldHVybiBuZXdkYihiYWNrZW5kKSwgbmlsCgkJfSBlbHNlIHsKCQkJcmV0dXJuIG5pbCwgZXJyCgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "NewDatabase",
                    "Comment": "Create a new database connection with the default options.",
                    "Arguments": [
                        {
                            "Name": "connection",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "DB"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "NewDatabase(connection string) (DB, error)",
                    "Source": "ewoJcmV0dXJuIE5ld0RhdGFiYXNlV2l0aE9wdGlvbnMoY29ubmVjdGlvbiwgQ29ubmVjdE9wdGlvbnN7fSkKfQ==",
                    "IsPackageLevel": true
                }
            ],
            "Source": "dHlwZSBEQiBpbnRlcmZhY2UgewoJYmFja2VuZHMuQmFja2VuZAoJQXR0YWNoQ29sbGVjdGlvbigqQ29sbGVjdGlvbikgTW9kZWwKCUMoc3RyaW5nKSAqQ29sbGVjdGlvbgoJTWlncmF0ZSgpIGVycm9yCglNb2RlbHMoKSBbXU1vZGVsCglBcHBseVNjaGVtYXRhKGZpbGVPckRpclBhdGggc3RyaW5nKSBlcnJvcgoJTG9hZEZpeHR1cmVzKGZpbGVPckRpclBhdGggc3RyaW5nKSBlcnJvcgoJR2V0QmFja2VuZCgpIEJhY2tlbmQKCVNldEJhY2tlbmQoQmFja2VuZCkKfQ=="
        },
        "Filter": {
            "Name": "Filter",
            "Source": "dHlwZSBGaWx0ZXIgPSBmaWx0ZXIuRmlsdGVy"
        },
        "Model": {
            "Name": "Model",
            "Source": "dHlwZSBNb2RlbCA9IGJhY2tlbmRzLk1hcHBlcg=="
        },
        "Record": {
            "Name": "Record",
            "Source": "dHlwZSBSZWNvcmQgPSBkYWwuUmVjb3Jk"
        },
        "RecordSet": {
            "Name": "RecordSet",
            "Source": "dHlwZSBSZWNvcmRTZXQgPSBkYWwuUmVjb3JkU2V0"
        },
        "Server": {
            "Name": "Server",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "AddFixturePath",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fileOrDirPath",
                            "Type": "string"
                        }
                    ],
                    "Signature": "AddFixturePath(fileOrDirPath string)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "AddSchemaDefinition",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fileOrDirPath",
                            "Type": "string"
                        }
                    ],
                    "Signature": "AddSchemaDefinition(fileOrDirPath string)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "ListenAndServe",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "ListenAndServe() error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "NewServer",
                    "Arguments": [
                        {
                            "Name": "connectionString",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Server"
                        }
                    ],
                    "Signature": "NewServer(connectionString ...string) *Server",
                    "Source": "ewoJcmV0dXJuICZTZXJ2ZXJ7QWRkcmVzczogZm10LlNwcmludGYoIiVzOiVkIiwgRGVmYXVsdEFkZHJlc3MsIERlZmF1bHRQb3J0KSwgQ29ubmVjdGlvblN0cmluZzogY29ubmVjdGlvblN0cmluZ1swXSwgVWlEaXJlY3Rvcnk6IERlZmF1bHRVaURpcmVjdG9yeSwgZW5kcG9pbnRzOiBtYWtlKFtddXRpbC5FbmRwb2ludCwgMCksIHJvdXRlTWFwOiBtYWtlKG1hcFtzdHJpbmdddXRpbC5FbmRwb2ludFJlc3BvbnNlRnVuYyl9Cn0=",
                    "IsPackageLevel": true
                }
            ],
            "Fields": [
                {
                    "Name": "Address",
                    "Type": "string"
                },
                {
                    "Name": "ConnectionString",
                    "Type": "string"
                },
                {
                    "Name": "ConnectOptions",
                    "Type": "backends.ConnectOptions"
                },
                {
                    "Name": "UiDirectory",
                    "Type": "string"
                },
                {
                    "Name": "Autoexpand",
                    "Type": "bool"
                }
            ],
            "Source": "dHlwZSBTZXJ2ZXIgc3RydWN0IHsKCUFkZHJlc3MgICAgICAgICAgc3RyaW5nCglDb25uZWN0aW9uU3RyaW5nIHN0cmluZwoJQ29ubmVjdE9wdGlvbnMgICBiYWNrZW5kcy5Db25uZWN0T3B0aW9ucwoJVWlEaXJlY3RvcnkgICAgICBzdHJpbmcKCUF1dG9leHBhbmQgICAgICAgYm9vbAoKfQo=",
            "HasUnexportedFields": true
        }
    },
    "Packages": [
        {
            "Name": "backends",
            "CanonicalImportPath": "github.com/ghetzel/pivot/backends",
            "ImportPath": "backends",
            "ParentPackage": "pivot",
            "URL": "https://github.com/ghetzel/pivot",
            "Synopsis": "",
            "MainFunction": false,
            "CommentWordCount": 250,
            "LineCount": 9974,
            "SourceLineCount": 7795,
            "FunctionCount": 360,
            "TypeCount": 32,
            "ConstantCount": 17,
            "VariableCount": 43,
            "Statistics": {
                "Mean": 0.0172,
                "StdDev": 0.1277,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 1
            },
            "Files": [
                {
                    "Name": "aggregator.go",
                    "Imports": [
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 776,
                    "LineCount": 18,
                    "SourceLineCount": 15,
                    "FunctionCount": 0,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "backends.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/alexcesaro/statsd",
                            "Alias": "statsd"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/util",
                            "Alias": "util"
                        }
                    ],
                    "Size": 3288,
                    "LineCount": 115,
                    "SourceLineCount": 91,
                    "FunctionCount": 2,
                    "TypeCount": 3,
                    "ConstantCount": 4,
                    "VariableCount": 3
                },
                {
                    "Name": "bleve-indexer.go",
                    "Imports": [
                        {
                            "PackageName": "encoding/json",
                            "Alias": "json"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "math",
                            "Alias": "math"
                        },
                        {
                            "PackageName": "path",
                            "Alias": "path"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/blevesearch/bleve",
                            "Alias": "bleve"
                        },
                        {
                            "PackageName": "github.com/blevesearch/bleve/analysis/analyzer/custom",
                            "Alias": "custom"
                        },
                        {
                            "PackageName": "github.com/blevesearch/bleve/analysis/char/regexp",
                            "Alias": "regexp"
                        },
                        {
                            "PackageName": "github.com/blevesearch/bleve/analysis/token/lowercase",
                            "Alias": "lowercase"
                        },
                        {
                            "PackageName": "github.com/blevesearch/bleve/analysis/tokenizer/single",
                            "Alias": "single"
                        },
                        {
                            "PackageName": "github.com/blevesearch/bleve/mapping",
                            "Alias": "mapping"
                        },
                        {
                            "PackageName": "github.com/blevesearch/bleve/search/query",
                            "Alias": "query"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "github.com/orcaman/concurrent-map",
                            "Alias": "concurrent-map"
                        }
                    ],
                    "Size": 15771,
                    "LineCount": 616,
                    "SourceLineCount": 471,
                    "FunctionCount": 13,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 3
                },
                {
                    "Name": "caching-backend.go",
                    "Imports": [
                        {
                            "PackageName": "sync",
                            "Alias": "sync"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 3278,
                    "LineCount": 121,
                    "SourceLineCount": 91,
                    "FunctionCount": 21,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "dynamo-indexer.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "math",
                            "Alias": "math"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "github.com/aws/aws-sdk-go/aws",
                            "Alias": "aws"
                        },
                        {
                            "PackageName": "github.com/aws/aws-sdk-go/service/dynamodb",
                            "Alias": "dynamodb"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 7185,
                    "LineCount": 275,
                    "SourceLineCount": 219,
                    "FunctionCount": 12,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "dynamo.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "os",
                            "Alias": "os"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "sync",
                            "Alias": "sync"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/aws/aws-sdk-go/aws",
                            "Alias": "aws"
                        },
                        {
                            "PackageName": "github.com/aws/aws-sdk-go/aws/awserr",
                            "Alias": "awserr"
                        },
                        {
                            "PackageName": "github.com/aws/aws-sdk-go/aws/credentials",
                            "Alias": "credentials"
                        },
                        {
                            "PackageName": "github.com/aws/aws-sdk-go/aws/session",
                            "Alias": "session"
                        },
                        {
                            "PackageName": "github.com/aws/aws-sdk-go/service/dynamodb",
                            "Alias": "dynamodb"
                        },
                        {
                            "PackageName": "github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute",
                            "Alias": "dynamodbattribute"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                            "Alias": "fileutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                            "Alias": "maputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 16457,
                    "LineCount": 619,
                    "SourceLineCount": 510,
                    "FunctionCount": 20,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 4
                },
                {
                    "Name": "dynamo_test.go",
                    "Imports": [
                        {
                            "PackageName": "testing",
                            "Alias": "testing"
                        },
                        {
                            "PackageName": "github.com/aws/aws-sdk-go/aws",
                            "Alias": "aws"
                        },
                        {
                            "PackageName": "github.com/aws/aws-sdk-go/service/dynamodb",
                            "Alias": "dynamodb"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/stretchr/testify/require",
                            "Alias": "require"
                        }
                    ],
                    "Size": 1326,
                    "LineCount": 72,
                    "SourceLineCount": 64,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "elasticsearch-aggregator.go",
                    "Imports": [
                        {
                            "PackageName": "encoding/json",
                            "Alias": "json"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/httputil",
                            "Alias": "httputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                            "Alias": "maputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter/generators",
                            "Alias": "generators"
                        }
                    ],
                    "Size": 5180,
                    "LineCount": 192,
                    "SourceLineCount": 158,
                    "FunctionCount": 8,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "elasticsearch-indexer.go",
                    "Imports": [
                        {
                            "PackageName": "encoding/json",
                            "Alias": "json"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "math",
                            "Alias": "math"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "sync",
                            "Alias": "sync"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/httputil",
                            "Alias": "httputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                            "Alias": "maputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter/generators",
                            "Alias": "generators"
                        }
                    ],
                    "Size": 18254,
                    "LineCount": 691,
                    "SourceLineCount": 555,
                    "FunctionCount": 13,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 9
                },
                {
                    "Name": "elasticsearch.go",
                    "Imports": [
                        {
                            "PackageName": "encoding/json",
                            "Alias": "json"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "io",
                            "Alias": "io"
                        },
                        {
                            "PackageName": "io/ioutil",
                            "Alias": "ioutil"
                        },
                        {
                            "PackageName": "net/http",
                            "Alias": "http"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "sync",
                            "Alias": "sync"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "unicode",
                            "Alias": "unicode"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/httputil",
                            "Alias": "httputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                            "Alias": "maputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 13359,
                    "LineCount": 554,
                    "SourceLineCount": 467,
                    "FunctionCount": 20,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 9
                },
                {
                    "Name": "embedded-record-backend.go",
                    "Imports": [
                        {
                            "PackageName": "sync",
                            "Alias": "sync"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 6589,
                    "LineCount": 218,
                    "SourceLineCount": 170,
                    "FunctionCount": 34,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "embedded_records_test.go",
                    "Imports": [
                        {
                            "PackageName": "testing",
                            "Alias": "testing"
                        }
                    ],
                    "Size": 92,
                    "LineCount": 10,
                    "SourceLineCount": 6,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "file_backend.go",
                    "Imports": [
                        {
                            "PackageName": "encoding/csv",
                            "Alias": "csv"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "os",
                            "Alias": "os"
                        },
                        {
                            "PackageName": "path/filepath",
                            "Alias": "filepath"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "sync",
                            "Alias": "sync"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "unicode",
                            "Alias": "unicode"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                            "Alias": "fileutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/utils",
                            "Alias": "utilutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 10040,
                    "LineCount": 418,
                    "SourceLineCount": 341,
                    "FunctionCount": 20,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "fs-indexer.go",
                    "Imports": [
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 5066,
                    "LineCount": 193,
                    "SourceLineCount": 158,
                    "FunctionCount": 12,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "fs.go",
                    "Imports": [
                        {
                            "PackageName": "encoding/json",
                            "Alias": "json"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "io/ioutil",
                            "Alias": "ioutil"
                        },
                        {
                            "PackageName": "os",
                            "Alias": "os"
                        },
                        {
                            "PackageName": "path/filepath",
                            "Alias": "filepath"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/pathutil",
                            "Alias": "pathutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "github.com/ghodss/yaml",
                            "Alias": "yaml"
                        },
                        {
                            "PackageName": "github.com/hashicorp/golang-lru",
                            "Alias": "lru"
                        }
                    ],
                    "Size": 15728,
                    "LineCount": 622,
                    "SourceLineCount": 503,
                    "FunctionCount": 20,
                    "TypeCount": 2,
                    "ConstantCount": 4,
                    "VariableCount": 4
                },
                {
                    "Name": "indexer-multi.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "math/rand",
                            "Alias": "rand"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 10252,
                    "LineCount": 438,
                    "SourceLineCount": 353,
                    "FunctionCount": 18,
                    "TypeCount": 5,
                    "ConstantCount": 9,
                    "VariableCount": 1
                },
                {
                    "Name": "indexer-null.go",
                    "Imports": [
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 1559,
                    "LineCount": 58,
                    "SourceLineCount": 43,
                    "FunctionCount": 12,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "indexers.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "math",
                            "Alias": "math"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 5617,
                    "LineCount": 185,
                    "SourceLineCount": 147,
                    "FunctionCount": 3,
                    "TypeCount": 3,
                    "ConstantCount": 0,
                    "VariableCount": 3
                },
                {
                    "Name": "mapper.go",
                    "Imports": [
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 1265,
                    "LineCount": 35,
                    "SourceLineCount": 31,
                    "FunctionCount": 0,
                    "TypeCount": 2,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "metaindex.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "sync",
                            "Alias": "sync"
                        },
                        {
                            "PackageName": "github.com/deckarep/golang-set",
                            "Alias": "golang-set"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 5766,
                    "LineCount": 200,
                    "SourceLineCount": 153,
                    "FunctionCount": 13,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "mongo-aggregator.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "gopkg.in/mgo.v2/bson",
                            "Alias": "bson"
                        }
                    ],
                    "Size": 4386,
                    "LineCount": 168,
                    "SourceLineCount": 136,
                    "FunctionCount": 8,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "mongo-indexer.go",
                    "Imports": [
                        {
                            "PackageName": "encoding/json",
                            "Alias": "json"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                            "Alias": "maputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter/generators",
                            "Alias": "generators"
                        },
                        {
                            "PackageName": "gopkg.in/mgo.v2/bson",
                            "Alias": "bson"
                        }
                    ],
                    "Size": 4838,
                    "LineCount": 191,
                    "SourceLineCount": 147,
                    "FunctionCount": 12,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "mongo.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "sync",
                            "Alias": "sync"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                            "Alias": "maputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "gopkg.in/mgo.v2",
                            "Alias": "mgo.v2"
                        },
                        {
                            "PackageName": "gopkg.in/mgo.v2/bson",
                            "Alias": "bson"
                        }
                    ],
                    "Size": 9728,
                    "LineCount": 398,
                    "SourceLineCount": 324,
                    "FunctionCount": 20,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 2
                },
                {
                    "Name": "options.go",
                    "Size": 280,
                    "LineCount": 9,
                    "SourceLineCount": 7,
                    "FunctionCount": 0,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "redis-indexer.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "math",
                            "Alias": "math"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "github.com/gomodule/redigo/redis",
                            "Alias": "redis"
                        }
                    ],
                    "Size": 4690,
                    "LineCount": 179,
                    "SourceLineCount": 117,
                    "FunctionCount": 12,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "redis.go",
                    "Imports": [
                        {
                            "PackageName": "encoding/json",
                            "Alias": "json"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "sync",
                            "Alias": "sync"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                            "Alias": "maputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/utils",
                            "Alias": "utils"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "github.com/gomodule/redigo/redis",
                            "Alias": "redis"
                        }
                    ],
                    "Size": 13499,
                    "LineCount": 524,
                    "SourceLineCount": 428,
                    "FunctionCount": 20,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 2
                },
                {
                    "Name": "redis_test.go",
                    "Imports": [
                        {
                            "PackageName": "testing",
                            "Alias": "testing"
                        },
                        {
                            "PackageName": "github.com/stretchr/testify/require",
                            "Alias": "require"
                        }
                    ],
                    "Size": 794,
                    "LineCount": 32,
                    "SourceLineCount": 23,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "relationships.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                            "Alias": "maputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 10775,
                    "LineCount": 376,
                    "SourceLineCount": 280,
                    "FunctionCount": 4,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "sql-aggregator.go",
                    "Imports": [
                        {
                            "PackageName": "database/sql",
                            "Alias": "sql"
                        },
                        {
                            "PackageName": "reflect",
                            "Alias": "reflect"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter/generators",
                            "Alias": "generators"
                        }
                    ],
                    "Size": 4171,
                    "LineCount": 141,
                    "SourceLineCount": 112,
                    "FunctionCount": 8,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "sql-backend-mysql.go",
                    "Imports": [
                        {
                            "PackageName": "database/sql",
                            "Alias": "sql"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter/generators",
                            "Alias": "generators"
                        },
                        {
                            "PackageName": "github.com/go-sql-driver/mysql",
                            "Alias": "_"
                        }
                    ],
                    "Size": 5073,
                    "LineCount": 173,
                    "SourceLineCount": 129,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "sql-backend-postgres.go",
                    "Imports": [
                        {
                            "PackageName": "database/sql",
                            "Alias": "sql"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter/generators",
                            "Alias": "generators"
                        },
                        {
                            "PackageName": "github.com/lib/pq",
                            "Alias": "_"
                        }
                    ],
                    "Size": 7873,
                    "LineCount": 253,
                    "SourceLineCount": 188,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "sql-backend-sqlite.go",
                    "Imports": [
                        {
                            "PackageName": "database/sql",
                            "Alias": "sql"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "io/ioutil",
                            "Alias": "ioutil"
                        },
                        {
                            "PackageName": "path",
                            "Alias": "path"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                            "Alias": "maputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter/generators",
                            "Alias": "generators"
                        },
                        {
                            "PackageName": "github.com/mattn/go-sqlite3",
                            "Alias": "_"
                        }
                    ],
                    "Size": 5970,
                    "LineCount": 232,
                    "SourceLineCount": 180,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "sql-indexer.go",
                    "Imports": [
                        {
                            "PackageName": "math",
                            "Alias": "math"
                        },
                        {
                            "PackageName": "reflect",
                            "Alias": "reflect"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter/generators",
                            "Alias": "generators"
                        }
                    ],
                    "Size": 6949,
                    "LineCount": 272,
                    "SourceLineCount": 198,
                    "FunctionCount": 12,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "sql.go",
                    "Imports": [
                        {
                            "PackageName": "context",
                            "Alias": "context"
                        },
                        {
                            "PackageName": "database/sql",
                            "Alias": "sql"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "reflect",
                            "Alias": "reflect"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "sync",
                            "Alias": "sync"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "unicode",
                            "Alias": "unicode"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                            "Alias": "maputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter/generators",
                            "Alias": "generators"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/util",
                            "Alias": "util"
                        }
                    ],
                    "Size": 35200,
                    "LineCount": 1312,
                    "SourceLineCount": 979,
                    "FunctionCount": 23,
                    "TypeCount": 3,
                    "ConstantCount": 0,
                    "VariableCount": 3
                },
                {
                    "Name": "sql_test.go",
                    "Size": 1685,
                    "LineCount": 64,
                    "SourceLineCount": 1,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                }
            ],
            "Constants": [
                {
                    "Name": "All",
                    "Immutable": true
                },
                {
                    "Name": "AllExceptFirst",
                    "Immutable": true
                },
                {
                    "Name": "ClientUserAgent",
                    "Immutable": true,
                    "Expression": "`pivot/` + util.Version"
                },
                {
                    "Name": "CompositeKeys",
                    "Immutable": true
                },
                {
                    "Name": "Constraints",
                    "Immutable": true
                },
                {
                    "Name": "DefaultFilesystemRecordSubdirectory",
                    "Immutable": true,
                    "Expression": "`data`",
                    "Value": "data"
                },
                {
                    "Name": "DeleteOperation",
                    "Immutable": true
                },
                {
                    "Name": "First",
                    "Immutable": true
                },
                {
                    "Name": "FormatCSV",
                    "Immutable": true,
                    "Expression": "`csv`",
                    "Value": "csv"
                },
                {
                    "Name": "FormatJSON",
                    "Immutable": true,
                    "Expression": "`json`",
                    "Value": "json"
                },
                {
                    "Name": "FormatYAML",
                    "Type": "SerializationFormat",
                    "Immutable": true,
                    "Expression": "`yaml`",
                    "Value": "yaml"
                },
                {
                    "Name": "InspectionOperation",
                    "Immutable": true
                },
                {
                    "Name": "PartialSearch",
                    "Type": "BackendFeature",
                    "Immutable": true,
                    "Expression": "iota"
                },
                {
                    "Name": "PersistOperation",
                    "Immutable": true
                },
                {
                    "Name": "Random",
                    "Immutable": true
                },
                {
                    "Name": "RetrieveOperation",
                    "Type": "IndexOperation",
                    "Immutable": true,
                    "Expression": "iota"
                },
                {
                    "Name": "Sequential",
                    "Type": "IndexSelectionStrategy",
                    "Immutable": true,
                    "Expression": "iota"
                }
            ],
            "Variables": [
                {
                    "Name": "AutopingTimeout",
                    "Expression": "5 * time.Second"
                },
                {
                    "Name": "BleveBatchFlushCount",
                    "Expression": "1"
                },
                {
                    "Name": "BleveBatchFlushInterval",
                    "Expression": "10 * time.Second"
                },
                {
                    "Name": "BleveIdentityField",
                    "Expression": "`_id`",
                    "Value": "_id"
                },
                {
                    "Name": "DefaultAmazonRegion",
                    "Expression": "`us-east-1`",
                    "Value": "us-east-1"
                },
                {
                    "Name": "DefaultAutoregister",
                    "Expression": "false"
                },
                {
                    "Name": "DefaultCompoundJoiner",
                    "Expression": "`:`",
                    "Value": ":"
                },
                {
                    "Name": "DefaultConnectTimeout",
                    "Expression": "10 * time.Second"
                },
                {
                    "Name": "DefaultSharedCredentialsFile",
                    "Expression": "`~/.aws/credentials`",
                    "Value": "~/.aws/credentials"
                },
                {
                    "Name": "DefaultSharedCredentialsProfile",
                    "Expression": "`default`",
                    "Value": "default"
                },
                {
                    "Name": "DyanmoListFieldsLimit",
                    "Expression": "8192"
                },
                {
                    "Name": "ElasticsearchAnalyzers"
                },
                {
                    "Name": "ElasticsearchBatchFlushCount",
                    "Expression": "1"
                },
                {
                    "Name": "ElasticsearchBatchFlushInterval",
                    "Expression": "10 * time.Second"
                },
                {
                    "Name": "ElasticsearchConnectTimeout",
                    "Expression": "3 * time.Second"
                },
                {
                    "Name": "ElasticsearchDefaultCompositeJoiner",
                    "Expression": "`--`",
                    "Value": "--"
                },
                {
                    "Name": "ElasticsearchDefaultHost",
                    "Expression": "`localhost:9200`",
                    "Value": "localhost:9200"
                },
                {
                    "Name": "ElasticsearchDefaultRefresh",
                    "Expression": "`false`",
                    "Value": "false"
                },
                {
                    "Name": "ElasticsearchDefaultReplicas",
                    "Expression": "2"
                },
                {
                    "Name": "ElasticsearchDefaultScheme",
                    "Expression": "`http`",
                    "Value": "http"
                },
                {
                    "Name": "ElasticsearchDefaultShards",
                    "Expression": "3"
                },
                {
                    "Name": "ElasticsearchDefaultType",
                    "Expression": "`_doc`",
                    "Value": "_doc"
                },
                {
                    "Name": "ElasticsearchDocumentType",
                    "Expression": "`_doc`",
                    "Value": "_doc"
                },
                {
                    "Name": "ElasticsearchIdentityField",
                    "Expression": "`_id`",
                    "Value": "_id"
                },
                {
                    "Name": "ElasticsearchNormalizers"
                },
                {
                    "Name": "ElasticsearchRequestTimeout",
                    "Expression": "30 * time.Second"
                },
                {
                    "Name": "ElasticsearchResponseHeaderTimeout",
                    "Expression": "10 * time.Second"
                },
                {
                    "Name": "ElasticsearchScrollLifetime",
                    "Expression": "`1m`",
                    "Value": "1m"
                },
                {
                    "Name": "ElasticsearchTLSTimeout",
                    "Expression": "10 * time.Second"
                },
                {
                    "Name": "FilesystemKeyJoiner",
                    "Expression": "`--`",
                    "Value": "--"
                },
                {
                    "Name": "FilesystemRecordCacheSize",
                    "Expression": "1024"
                },
                {
                    "Name": "IndexerPageSize",
                    "Type": "int",
                    "Expression": "100"
                },
                {
                    "Name": "IndexerResultsStop",
                    "Expression": "fmt.Errorf(`stop indexer results`)"
                },
                {
                    "Name": "InitialPingTimeout",
                    "Expression": "time.Duration(10) * time.Second"
                },
                {
                    "Name": "MaxFacetCardinality",
                    "Type": "int",
                    "Expression": "10000"
                },
                {
                    "Name": "MongoIdentityField",
                    "Expression": "`_id`",
                    "Value": "_id"
                },
                {
                    "Name": "NotImplementedError",
                    "Expression": "fmt.Errorf(\"Not Implemented\")"
                },
                {
                    "Name": "RecordCacheEnabled",
                    "Expression": "false"
                },
                {
                    "Name": "RedisDefaultAddress",
                    "Expression": "`localhost:6379`",
                    "Value": "localhost:6379"
                },
                {
                    "Name": "RedisDefaultProtocol",
                    "Expression": "`tcp`",
                    "Value": "tcp"
                },
                {
                    "Name": "SqlArrayFieldHintLength",
                    "Expression": "131069"
                },
                {
                    "Name": "SqlObjectFieldHintLength",
                    "Expression": "131071"
                },
                {
                    "Name": "WriteLockFormat",
                    "Expression": "`%s.lock`",
                    "Value": "%s.lock"
                }
            ],
            "Functions": [
                {
                    "Name": "DefaultQueryImplementation",
                    "Arguments": [
                        {
                            "Name": "indexer",
                            "Type": "Indexer"
                        },
                        {
                            "Name": "collection",
                            "Type": "*dal.Collection"
                        },
                        {
                            "Name": "f",
                            "Type": "*filter.Filter"
                        },
                        {
                            "Name": "resultFns",
                            "Type": "...IndexResultFunc"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*dal.RecordSet"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "DefaultQueryImplementation(indexer Indexer, collection *dal.Collection, f *filter.Filter, resultFns ...IndexResultFunc) (*dal.RecordSet, error)",
                    "Source": "ewoJdmFyIHJlY29yZHNldCA9IGRhbC5OZXdSZWNvcmRTZXQoKQoJaWYgZXJyIDo9IGluZGV4ZXIuUXVlcnlGdW5jKGNvbGxlY3Rpb24sIGYsIGZ1bmMoaW5kZXhSZWNvcmQgKmRhbC5SZWNvcmQsIGVyciBlcnJvciwgcGFnZSBJbmRleFBhZ2UpIGVycm9yIHsKCQlkZWZlciBQb3B1bGF0ZVJlY29yZFNldFBhZ2VEZXRhaWxzKHJlY29yZHNldCwgZiwgcGFnZSkKCQl2YXIgcGFyZW50ID0gaW5kZXhlci5HZXRCYWNrZW5kKCkKCQl2YXIgZm9yY2VJbmRleFJlY29yZCBib29sCgkJaWYgZiAhPSBuaWwgewoJCQlpZiB2LCBvayA6PSBmLk9wdGlvbnNbYEZvcmNlSW5kZXhSZWNvcmRgXS4oYm9vbCk7IG9rIHsKCQkJCWZvcmNlSW5kZXhSZWNvcmQgPSB2CgkJCX0KCQl9CgkJaWYgcGFyZW50ICE9IG5pbCB7CgkJCWlmIGxlbihjb2xsZWN0aW9uLkluZGV4Q29tcG91bmRGaWVsZHMpID4gMSB7CgkJCQl2YXIgam9pbmVyID0gY29sbGVjdGlvbi5JbmRleENvbXBvdW5kRmllbGRKb2luZXIKCQkJCWlmIGpvaW5lciA9PSBgYCB7CgkJCQkJam9pbmVyID0gRGVmYXVsdENvbXBvdW5kSm9pbmVyCgkJCQl9CgkJCQl2YXIgdmFsdWVzID0gc2xpY2V1dGlsLlNsaWNlaWZ5KHN0cmluZ3MuU3BsaXQoZm10LlNwcmludGYoIiV2IiwgaW5kZXhSZWNvcmQuSUQpLCBqb2luZXIpKQoJCQkJaWYgbGVuKHZhbHVlcykgIT0gbGVuKGNvbGxlY3Rpb24uSW5kZXhDb21wb3VuZEZpZWxkcykgewoJCQkJCWlmIGRpZmYgOj0gbGVuKGNvbGxlY3Rpb24uSW5kZXhDb21wb3VuZEZpZWxkcykgLSBsZW4odmFsdWVzKTsgZGlmZiA+PSAxIHsKCQkJCQkJZm9yIF8sIGNmIDo9IHJhbmdlIGNvbGxlY3Rpb24uSW5kZXhDb21wb3VuZEZpZWxkc1tkaWZmOl0gewoJCQkJCQkJaWYgdiA6PSBpbmRleFJlY29yZC5HZXQoY2YpOyB2ICE9IG5pbCB7CgkJCQkJCQkJdmFsdWVzID0gYXBwZW5kKHZhbHVlcywgdikKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0KCQkJCQlpZiBsZW4odmFsdWVzKSAhPSBsZW4oY29sbGVjdGlvbi5JbmRleENvbXBvdW5kRmllbGRzKSB7CgkJCQkJCXJldHVybiBmbXQuRXJyb3JmKCJJbmRleCBpdGVtICV2OiBleHBlY3RlZCAlZCBjb21wb3VuZCBmaWVsZCBjb21wb25lbnRzLCBnb3QgJWQiLCBpbmRleFJlY29yZC5JRCwgbGVuKGNvbGxlY3Rpb24uSW5kZXhDb21wb3VuZEZpZWxkcyksIGxlbih2YWx1ZXMpKQoJCQkJCX0KCQkJCX0KCQkJCWZvciBpLCBmaWVsZCA6PSByYW5nZSBjb2xsZWN0aW9uLkluZGV4Q29tcG91bmRGaWVsZHMgewoJCQkJCWlmIGkgPT0gMCB7CgkJCQkJCWluZGV4UmVjb3JkLklEID0gdmFsdWVzCgkJCQkJfSBlbHNlIHsKCQkJCQkJaW5kZXhSZWNvcmQuU2V0KGZpZWxkLCB2YWx1ZXNbaV0pCgkJCQkJfQoJCQkJfQoJCQl9CgkJfQoJCXZhciBlbXB0eVJlY29yZCA9IGRhbC5OZXdSZWNvcmQoaW5kZXhSZWNvcmQuSUQpCgkJZW1wdHlSZWNvcmQuRXJyb3IgPSBlcnIKCQlpZiBsZW4ocmVzdWx0Rm5zKSA+IDAgewoJCQl2YXIgcmVzdWx0Rm4gPSByZXN1bHRGbnNbMF0KCQkJaWYgZi5JZE9ubHkoKSB7CgkJCQlyZXR1cm4gcmVzdWx0Rm4oZW1wdHlSZWNvcmQsIGVyciwgcGFnZSkKCQkJfSBlbHNlIGlmIHBhcmVudCAhPSBuaWwgJiYgIWZvcmNlSW5kZXhSZWNvcmQgewoJCQkJaWYgcmVjb3JkLCBlcnIgOj0gcGFyZW50LlJldHJpZXZlKGNvbGxlY3Rpb24uTmFtZSwgaW5kZXhSZWNvcmQuSUQsIGYuRmllbGRzLi4uKTsgZXJyID09IG5pbCB7CgkJCQkJcmV0dXJuIHJlc3VsdEZuKHJlY29yZCwgZXJyLCBwYWdlKQoJCQkJfSBlbHNlIHsKCQkJCQlyZXR1cm4gcmVzdWx0Rm4oZW1wdHlSZWNvcmQsIGVyciwgcGFnZSkKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCXJldHVybiByZXN1bHRGbihpbmRleFJlY29yZCwgZXJyLCBwYWdlKQoJCQl9CgkJfSBlbHNlIHsKCQkJaWYgZi5JZE9ubHkoKSB7CgkJCQlyZWNvcmRzZXQuUmVjb3JkcyA9IGFwcGVuZChyZWNvcmRzZXQuUmVjb3JkcywgZGFsLk5ld1JlY29yZChpbmRleFJlY29yZC5JRCkpCgkJCX0gZWxzZSBpZiBwYXJlbnQgIT0gbmlsICYmICFmb3JjZUluZGV4UmVjb3JkIHsKCQkJCWlmIHJlY29yZCwgZXJyIDo9IHBhcmVudC5SZXRyaWV2ZShjb2xsZWN0aW9uLk5hbWUsIGluZGV4UmVjb3JkLklELCBmLkZpZWxkcy4uLik7IGVyciA9PSBuaWwgewoJCQkJCXJlY29yZHNldC5SZWNvcmRzID0gYXBwZW5kKHJlY29yZHNldC5SZWNvcmRzLCByZWNvcmQpCgkJCQl9IGVsc2UgewoJCQkJCXJlY29yZHNldC5SZWNvcmRzID0gYXBwZW5kKHJlY29yZHNldC5SZWNvcmRzLCBkYWwuTmV3UmVjb3JkRXJyKGluZGV4UmVjb3JkLklELCBlcnIpKQoJCQkJfQoJCQl9IGVsc2UgewoJCQkJcmVjb3Jkc2V0LlJlY29yZHMgPSBhcHBlbmQocmVjb3Jkc2V0LlJlY29yZHMsIGluZGV4UmVjb3JkKQoJCQl9CgkJCXJldHVybiBuaWwKCQl9Cgl9KTsgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9CglyZXR1cm4gcmVjb3Jkc2V0LCBuaWwKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "NewDynamoBackend",
                    "Arguments": [
                        {
                            "Name": "connection",
                            "Type": "dal.ConnectionString"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "Backend"
                        }
                    ],
                    "Signature": "NewDynamoBackend(connection dal.ConnectionString) Backend",
                    "Source": "ewoJcmV0dXJuICZEeW5hbW9CYWNrZW5ke2NzOiBjb25uZWN0aW9uLCByZWdpb246IHNsaWNldXRpbC5PclN0cmluZyhjb25uZWN0aW9uLkhvc3QoKSwgRGVmYXVsdEFtYXpvblJlZ2lvbil9Cn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "PopulateRecordSetPageDetails",
                    "Arguments": [
                        {
                            "Name": "recordset",
                            "Type": "*dal.RecordSet"
                        },
                        {
                            "Name": "f",
                            "Type": "*filter.Filter"
                        },
                        {
                            "Name": "page",
                            "Type": "IndexPage"
                        }
                    ],
                    "Signature": "PopulateRecordSetPageDetails(recordset *dal.RecordSet, f *filter.Filter, page IndexPage)",
                    "Source": "ewoJaWYgcGFnZS5Ub3RhbFJlc3VsdHMgPj0gMCB7CgkJcmVjb3Jkc2V0Lktub3duU2l6ZSA9IHRydWUKCQlyZWNvcmRzZXQuUmVzdWx0Q291bnQgPSBwYWdlLlRvdGFsUmVzdWx0cwoJfSBlbHNlIHsKCQlyZWNvcmRzZXQuUmVzdWx0Q291bnQgPSBpbnQ2NChsZW4ocmVjb3Jkc2V0LlJlY29yZHMpKQoJfQoJaWYgcGFnZS5Ub3RhbFBhZ2VzID4gMCB7CgkJcmVjb3Jkc2V0LlRvdGFsUGFnZXMgPSBwYWdlLlRvdGFsUGFnZXMKCX0gZWxzZSBpZiByZWNvcmRzZXQuUmVzdWx0Q291bnQgPj0gMCAmJiBmLkxpbWl0ID4gMCB7CgkJcmVjb3Jkc2V0LlRvdGFsUGFnZXMgPSBpbnQobWF0aC5DZWlsKGZsb2F0NjQocmVjb3Jkc2V0LlJlc3VsdENvdW50KSAvIGZsb2F0NjQoZi5MaW1pdCkpKQoJfSBlbHNlIHsKCQlyZWNvcmRzZXQuVG90YWxQYWdlcyA9IDEKCX0KCWlmIHJlY29yZHNldC5SZWNvcmRzUGVyUGFnZSA9PSAwIHsKCQlyZWNvcmRzZXQuUmVjb3Jkc1BlclBhZ2UgPSBwYWdlLkxpbWl0Cgl9CglpZiBwYWdlLkxpbWl0ID4gMCB7CgkJcmVjb3Jkc2V0LlBhZ2UgPSBpbnQobWF0aC5DZWlsKGZsb2F0NjQoZi5PZmZzZXQrMSkgLyBmbG9hdDY0KHBhZ2UuTGltaXQpKSkKCX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "PopulateRelationships",
                    "Arguments": [
                        {
                            "Name": "backend",
                            "Type": "Backend"
                        },
                        {
                            "Name": "parent",
                            "Type": "*dal.Collection"
                        },
                        {
                            "Name": "record",
                            "Type": "*dal.Record"
                        },
                        {
                            "Name": "prepId",
                            "Type": ""
                        },
                        {
                            "Name": "requestedFields",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "PopulateRelationships(backend Backend, parent *dal.Collection, record *dal.Record, prepId , requestedFields ...string) error",
                    "Source": "ewoJc2tpcEtleXMgOj0gbWFrZShbXXN0cmluZywgMCkKCWlmIGVtYmVkLCBvayA6PSBiYWNrZW5kLigqRW1iZWRkZWRSZWNvcmRCYWNrZW5kKTsgb2sgewoJCXNraXBLZXlzID0gZW1iZWQuU2tpcEtleXMKCX0KCWVtYmVkcyA6PSBwYXJlbnQuRW1iZWRkZWRDb2xsZWN0aW9ucwpDb25zdHJhaW50c0xvb3A6Cglmb3IgXywgY29uc3RyYWludCA6PSByYW5nZSBwYXJlbnQuR2V0QWxsQ29uc3RyYWludHMoKSB7CgkJaWYgY29uc3RyYWludC5Ob0VtYmVkIHsKCQkJY29udGludWUKCQl9CgkJaWYgZXJyIDo9IGNvbnN0cmFpbnQuVmFsaWRhdGUoKTsgZXJyID09IG5pbCB7CgkJCWZvciBfLCBlbWJlZCA6PSByYW5nZSBlbWJlZHMgewoJCQkJaWYgZW1iZWQuUmVsYXRlZENvbGxlY3Rpb25OYW1lKCkgPT0gY29uc3RyYWludC5Db2xsZWN0aW9uIHsKCQkJCQljb250aW51ZSBDb25zdHJhaW50c0xvb3AKCQkJCX0KCQkJfQoJCQllbWJlZHMgPSBhcHBlbmQoZW1iZWRzLCBkYWwuUmVsYXRpb25zaGlwe0tleXM6IGNvbnN0cmFpbnQuT24sIENvbGxlY3Rpb25OYW1lOiBjb25zdHJhaW50LkNvbGxlY3Rpb259KQoJCX0gZWxzZSB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJDYW5ub3QgZW1iZWQgY29sbGVjdGlvbjogJXYiLCBlcnIpCgkJfQoJfQoJZm9yIF8sIHJlbGF0aW9uc2hpcCA6PSByYW5nZSBlbWJlZHMgewoJCWtleXMgOj0gc2xpY2V1dGlsLkNvbXBhY3RTdHJpbmcoc2xpY2V1dGlsLlN0cmluZ2lmeShzbGljZXV0aWwuU2xpY2VpZnkocmVsYXRpb25zaGlwLktleXMpKSkKCQlpZiBsZW4oc2tpcEtleXMpID4gMCAmJiBzbGljZXV0aWwuQ29udGFpbnNBbnlTdHJpbmcoc2tpcEtleXMsIGtleXMuLi4pIHsKCQkJbG9nLkRlYnVnZigiZXhwbGljaXRseSBza2lwcGluZyAlK3YiLCBrZXlzKQoJCQljb250aW51ZQoJCX0KCQl2YXIgcmVsYXRlZCAqZGFsLkNvbGxlY3Rpb24KCQlpZiByZWxhdGlvbnNoaXAuQ29sbGVjdGlvbiAhPSBuaWwgewoJCQlyZWxhdGVkID0gcmVsYXRpb25zaGlwLkNvbGxlY3Rpb24KCQl9IGVsc2UgaWYgYywgZXJyIDo9IGJhY2tlbmQuR2V0Q29sbGVjdGlvbihyZWxhdGlvbnNoaXAuQ29sbGVjdGlvbk5hbWUpOyBjICE9IG5pbCB7CgkJCXJlbGF0ZWQgPSBjCgkJfSBlbHNlIHsKCQkJcmV0dXJuIGZtdC5FcnJvcmYoImVycm9yIGluIHJlbGF0aW9uc2hpcCAldjogJXYiLCBrZXlzLCBlcnIpCgkJfQoJCWlmIHJlbGF0ZWQuTmFtZSA9PSBwYXJlbnQuTmFtZSAmJiAhcmVsYXRpb25zaGlwLkZvcmNlIHsKCQkJbG9nLldhcm5pbmdmKCJub3QgZW1iZWRkaW5nIHJlY29yZHMgZnJvbSAlcSB0byBhdm9pZCBsb29wIiwgcmVsYXRlZC5OYW1lKQoJCQljb250aW51ZQoJCX0KCQl2YXIgbmVzdGVkRmllbGRzIFtdc3RyaW5nCgkJcmVsZmllbGRzIDo9IHJlbGF0aW9uc2hpcC5GaWVsZHMKCQlleHBvcnRlZCA6PSByZWxhdGVkLkV4cG9ydGVkRmllbGRzCgkJcmVxZmllbGRzIDo9IG1ha2UoW11zdHJpbmcsIGxlbihyZXF1ZXN0ZWRGaWVsZHMpKQoJCWNvcHkocmVxZmllbGRzLCByZXF1ZXN0ZWRGaWVsZHMpCgkJaWYgbGVuKGV4cG9ydGVkKSA9PSAwIHsKCQkJbmVzdGVkRmllbGRzID0gcmVsZmllbGRzCgkJfSBlbHNlIGlmIGxlbihyZWxmaWVsZHMpID09IDAgewoJCQluZXN0ZWRGaWVsZHMgPSBleHBvcnRlZAoJCX0gZWxzZSB7CgkJCW5lc3RlZEZpZWxkcyA9IHNsaWNldXRpbC5JbnRlcnNlY3RTdHJpbmdzKHJlbGZpZWxkcywgZXhwb3J0ZWQpCgkJfQoJCWZvciBpLCByZWwgOj0gcmFuZ2UgcmVxZmllbGRzIHsKCQkJaWYgZmlyc3QsIGxhc3QgOj0gc3RyaW5ndXRpbC5TcGxpdFBhaXIocmVsLCBgOmApOyBzbGljZXV0aWwuQ29udGFpbnNTdHJpbmcoa2V5cywgZmlyc3QpIHsKCQkJCXJlcWZpZWxkc1tpXSA9IGxhc3QKCQkJfSBlbHNlIHsKCQkJCXJlcWZpZWxkc1tpXSA9IGBgCgkJCX0KCQl9CgkJcmVxZmllbGRzID0gc2xpY2V1dGlsLkNvbXBhY3RTdHJpbmcocmVxZmllbGRzKQoJCWlmIGxlbihuZXN0ZWRGaWVsZHMpID09IDAgewoJCQluZXN0ZWRGaWVsZHMgPSByZXFmaWVsZHMKCQl9IGVsc2UgaWYgbGVuKHJlcWZpZWxkcykgPiAwIHsKCQkJbmVzdGVkRmllbGRzID0gc2xpY2V1dGlsLkludGVyc2VjdFN0cmluZ3MobmVzdGVkRmllbGRzLCByZXFmaWVsZHMpCgkJfQoJCWZvciBfLCBrZXkgOj0gcmFuZ2Uga2V5cyB7CgkJCWtleUJlZm9yZSwgXyA6PSBzdHJpbmd1dGlsLlNwbGl0UGFpcihrZXksIGAuKmApCgkJCWlmIG5lc3RlZElkIDo9IHJlY29yZC5HZXQoa2V5KTsgbmVzdGVkSWQgIT0gbmlsIHsKCQkJCWlmIHR5cGV1dGlsLklzQXJyYXkobmVzdGVkSWQpIHsKCQkJCQlyZXN1bHRzIDo9IG1ha2UoW11pbnRlcmZhY2V7fSwgMCkKCQkJCQlmb3IgXywgaWQgOj0gcmFuZ2Ugc2xpY2V1dGlsLlNsaWNlaWZ5KG5lc3RlZElkKSB7CgkJCQkJCWlmIHByZXBJZCAhPSBuaWwgewoJCQkJCQkJaWQgPSBwcmVwSWQoaWQpCgkJCQkJCX0KCQkJCQkJaWYgaWQgIT0gbmlsIHsKCQkJCQkJCXJlc3VsdHMgPSBhcHBlbmQocmVzdWx0cywgJkRlZmVycmVkUmVjb3Jke09yaWdpbmFsOiBuZXN0ZWRJZCwgQmFja2VuZDogYmFja2VuZCwgSWRlbnRpdHlGaWVsZE5hbWU6IHJlbGF0ZWQuR2V0SWRlbnRpdHlGaWVsZE5hbWUoKSwgQ29sbGVjdGlvbk5hbWU6IHJlbGF0ZWQuTmFtZSwgSUQ6IGlkLCBLZXlzOiBuZXN0ZWRGaWVsZHN9KQoJCQkJCQl9IGVsc2UgaWYgcGFyZW50LkFsbG93TWlzc2luZ0VtYmVkZGVkUmVjb3JkcyB7CgkJCQkJCQlyZXN1bHRzID0gYXBwZW5kKHJlc3VsdHMsICZEZWZlcnJlZFJlY29yZHtPcmlnaW5hbDogbmVzdGVkSWQsIEJhY2tlbmQ6IGJhY2tlbmQsIElkZW50aXR5RmllbGROYW1lOiByZWxhdGVkLkdldElkZW50aXR5RmllbGROYW1lKCksIENvbGxlY3Rpb25OYW1lOiByZWxhdGVkLk5hbWUsIElEOiBpZCwgS2V5czogbmVzdGVkRmllbGRzfSkKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCXJldHVybiBmbXQuRXJyb3JmKCIldi4ldltdOiBSZWxhdGVkIHJlY29yZCAldi4ldiBpcyBtaXNzaW5nIiwgcGFyZW50Lk5hbWUsIGtleUJlZm9yZSwgcmVsYXRlZC5OYW1lLCBuZXN0ZWRJZCkKCQkJCQkJfQoJCQkJCX0KCQkJCQlmb3IgaSwgcmVzdWx0IDo9IHJhbmdlIHJlc3VsdHMgewoJCQkJCQluZXN0S2V5IDo9IHN0cmluZ3MuUmVwbGFjZShrZXksIGAqYCwgZm10LlNwcmludGYoIiVkIiwgaSksIDEpCgkJCQkJCXJlY29yZC5TZXROZXN0ZWQobmVzdEtleSwgcmVzdWx0KQoJCQkJCX0KCQkJCX0gZWxzZSB7CgkJCQkJb3JpZ2luYWwgOj0gbmVzdGVkSWQKCQkJCQlpZiBwcmVwSWQgIT0gbmlsIHsKCQkJCQkJbmVzdGVkSWQgPSBwcmVwSWQobmVzdGVkSWQpCgkJCQkJfQoJCQkJCWlmIG5lc3RlZElkID09IG5pbCAmJiAhcGFyZW50LkFsbG93TWlzc2luZ0VtYmVkZGVkUmVjb3JkcyB7CgkJCQkJCXJldHVybiBmbXQuRXJyb3JmKCIldi4ldjogUmVsYXRlZCByZWNvcmQgcmVmZXJyZWQgdG8gaW4gJXYuJXYgaXMgbWlzc2luZyIsIHBhcmVudC5OYW1lLCBrZXlCZWZvcmUsIHJlbGF0ZWQuTmFtZSwgb3JpZ2luYWwpCgkJCQkJfQoJCQkJCWRlZmVycmVkIDo9ICZEZWZlcnJlZFJlY29yZHtPcmlnaW5hbDogbmVzdGVkSWQsIEJhY2tlbmQ6IGJhY2tlbmQsIElkZW50aXR5RmllbGROYW1lOiByZWxhdGVkLkdldElkZW50aXR5RmllbGROYW1lKCksIENvbGxlY3Rpb25OYW1lOiByZWxhdGVkLk5hbWUsIElEOiBuZXN0ZWRJZCwgS2V5czogbmVzdGVkRmllbGRzfQoJCQkJCXJlY29yZC5TZXROZXN0ZWQoa2V5QmVmb3JlLCBkZWZlcnJlZCkKCQkJCX0KCQkJfQoJCX0KCX0KCXJldHVybiBuaWwKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "RegisterBackend",
                    "Comment": "Register a new or replacement backend for the given connection string scheme.\nFor example, registering backend \"foo\" will allow Pivot to handle \"foo://\"\nconnection strings.",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        },
                        {
                            "Name": "fn",
                            "Type": "BackendFunc"
                        }
                    ],
                    "Signature": "RegisterBackend(name string, fn BackendFunc)",
                    "Source": "ewoJYmFja2VuZE1hcFtuYW1lXSA9IGZuCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "RegisterSqlInitFunc",
                    "Arguments": [
                        {
                            "Name": "scheme",
                            "Type": "string"
                        },
                        {
                            "Name": "fn",
                            "Type": "SqlInitFunc"
                        }
                    ],
                    "Signature": "RegisterSqlInitFunc(scheme string, fn SqlInitFunc)",
                    "Source": "ewoJaWYgZm4gIT0gbmlsIHsKCQlzcWxJbml0RnVuY3Nbc2NoZW1lXSA9IGZuCgl9Cn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "RegisterSqlPreInitFunc",
                    "Arguments": [
                        {
                            "Name": "scheme",
                            "Type": "string"
                        },
                        {
                            "Name": "fn",
                            "Type": "SqlPreInitFunc"
                        }
                    ],
                    "Signature": "RegisterSqlPreInitFunc(scheme string, fn SqlPreInitFunc)",
                    "Source": "ewoJaWYgZm4gIT0gbmlsIHsKCQlzcWxQcmVJbml0RnVuY3Nbc2NoZW1lXSA9IGZuCgl9Cn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ResolveDeferredRecords",
                    "Arguments": [
                        {
                            "Name": "cache",
                            "Type": "map[string]interface{}"
                        },
                        {
                            "Name": "records",
                            "Type": "...*dal.Record"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "ResolveDeferredRecords(cache map[string]interface{}, records ...*dal.Record) error",
                    "Source": "ewoJZGVmZXJyZWRSZWNvcmRzIDo9IG1ha2UobWFwW3N0cmluZ10qRGVmZXJyZWRSZWNvcmQpCglyZXNvbHZlZFZhbHVlcyA6PSBtYWtlKFtdKnJlY29yZEZpZWxkVmFsdWUsIDApCglpZiBjYWNoZSA9PSBuaWwgewoJCWNhY2hlID0gbWFrZShtYXBbc3RyaW5nXWludGVyZmFjZXt9KQoJfQoJZm9yIF8sIHJlY29yZCA6PSByYW5nZSByZWNvcmRzIHsKCQlpZiBlcnIgOj0gbWFwdXRpbC5XYWxrU3RydWN0KHJlY29yZC5GaWVsZHMsIGZ1bmModmFsdWUgaW50ZXJmYWNle30sIGtleSBbXXN0cmluZywgaXNMZWFmIGJvb2wpIGVycm9yIHsKCQkJaWYgZGVmZXJyZWQsIG9rIDo9IHZhbHVlLihEZWZlcnJlZFJlY29yZCk7IG9rIHsKCQkJCWRwdHIgOj0gJmRlZmVycmVkCgkJCQlkZWZlcnJlZFJlY29yZHNbZGVmZXJyZWQuU3RyaW5nKCldID0gZHB0cgoJCQkJcmVzb2x2ZWRWYWx1ZXMgPSBhcHBlbmQocmVzb2x2ZWRWYWx1ZXMsICZyZWNvcmRGaWVsZFZhbHVle1JlY29yZDogcmVjb3JkLCBLZXk6IGtleSwgVmFsdWU6IGRlZmVycmVkLklELCBEZWZlcnJlZDogZHB0cn0pCgkJCQltYXB1dGlsLkRlZXBTZXQocmVjb3JkLkZpZWxkcywga2V5LCBuaWwpCgkJCQlyZXR1cm4gbWFwdXRpbC5Ta2lwRGVzY2VuZGFudHMKCQkJfQoJCQlyZXR1cm4gbmlsCgkJfSk7IGVyciAhPSBuaWwgewoJCQlyZXR1cm4gZXJyCgkJfQoJfQoJZm9yIHJlbGF0ZWRDb2xsZWN0aW9uTmFtZSwgY29sbGVjdGlvbkRlZmVycyA6PSByYW5nZSBkZWZlcnJlZEdyb3VwQnlDb2xsZWN0aW9uKGRlZmVycmVkUmVjb3JkcykgewoJCWlmIGxlbihjb2xsZWN0aW9uRGVmZXJzKSA+IDAgewoJCQl2YXIga2V5Rm4gPSBjb2xsZWN0aW9uRGVmZXJzWzBdLkdyb3VwS2V5CgkJCXZhciBiYWNrZW5kID0gY29sbGVjdGlvbkRlZmVyc1swXS5CYWNrZW5kCgkJCXZhciBmaWVsZHMgPSBjb2xsZWN0aW9uRGVmZXJzWzBdLktleXMKCQkJdmFyIGlkcyBbXWludGVyZmFjZXt9CgkJCWZvciBfLCBkZWZlcnJlZCA6PSByYW5nZSBjb2xsZWN0aW9uRGVmZXJzIHsKCQkJCWlkcyA9IGFwcGVuZChpZHMsIGRlZmVycmVkLklEKQoJCQl9CgkJCWZvdW5kSWRzIDo9IG1ha2UoW11pbnRlcmZhY2V7fSwgMCkKCQkJaWYgbGVuKGlkcykgPiAwIHsKCQkJCWlmIHJlbGF0ZWQsIGVyciA6PSBiYWNrZW5kLkdldENvbGxlY3Rpb24ocmVsYXRlZENvbGxlY3Rpb25OYW1lKTsgZXJyID09IG5pbCB7CgkJCQkJaW5kZXhlciA6PSBiYWNrZW5kLldpdGhTZWFyY2gocmVsYXRlZCkKCQkJCQlpZiBpbmRleGVyID09IG5pbCB7CgkJCQkJCWZvciBfLCBpZCA6PSByYW5nZSBpZHMgewoJCQkJCQkJa2V5IDo9IGtleUZuKGlkKQoJCQkJCQkJaWYgXywgb2sgOj0gY2FjaGVba2V5XTsgb2sgewoJCQkJCQkJCWNvbnRpbnVlCgkJCQkJCQl9IGVsc2UgaWYgcmVjb3JkLCBlcnIgOj0gYmFja2VuZC5SZXRyaWV2ZShyZWxhdGVkQ29sbGVjdGlvbk5hbWUsIGlkLCBmaWVsZHMuLi4pOyBlcnIgPT0gbmlsIHsKCQkJCQkJCQlyZWNvcmQuRmllbGRzW3JlbGF0ZWQuSWRlbnRpdHlGaWVsZF0gPSByZWNvcmQuSUQKCQkJCQkJCQljYWNoZVtrZXldID0gcmVjb3JkLkZpZWxkcwoJCQkJCQkJCWZvdW5kSWRzID0gYXBwZW5kKGZvdW5kSWRzLCByZWNvcmQuSUQpCgkJCQkJCQl9IGVsc2UgewoJCQkJCQkJCXJldHVybiBlcnIKCQkJCQkJCX0KCQkJCQkJfQoJCQkJCX0gZWxzZSB7CgkJCQkJCWJ1bGtRdWVyeSA6PSBmaWx0ZXIuTmV3KCkuQWRkQ3JpdGVyaWEoZmlsdGVyLkNyaXRlcmlvbntGaWVsZDogcmVsYXRlZC5HZXRJZGVudGl0eUZpZWxkTmFtZSgpLCBWYWx1ZXM6IGlkc30pCgkJCQkJCWJ1bGtRdWVyeS5GaWVsZHMgPSBmaWVsZHMKCQkJCQkJYnVsa1F1ZXJ5LkxpbWl0ID0gMTA0ODU3NgoJCQkJCQlpZiByZWNvcmRzZXQsIGVyciA6PSBpbmRleGVyLlF1ZXJ5KHJlbGF0ZWQsIGJ1bGtRdWVyeSk7IGVyciA9PSBuaWwgewoJCQkJCQkJZm9yIF8sIHJlY29yZCA6PSByYW5nZSByZWNvcmRzZXQuUmVjb3JkcyB7CgkJCQkJCQkJa2V5IDo9IGtleUZuKHJlY29yZC5JRCkKCQkJCQkJCQlpZiBfLCBvayA6PSBjYWNoZVtrZXldOyBvayB7CgkJCQkJCQkJCWNvbnRpbnVlCgkJCQkJCQkJfSBlbHNlIHsKCQkJCQkJCQkJcmVjb3JkLkZpZWxkc1tyZWxhdGVkLklkZW50aXR5RmllbGRdID0gcmVjb3JkLklECgkJCQkJCQkJCWNhY2hlW2tleV0gPSByZWNvcmQuRmllbGRzCgkJCQkJCQkJCWZvdW5kSWRzID0gYXBwZW5kKGZvdW5kSWRzLCByZWNvcmQuSUQpCgkJCQkJCQkJfQoJCQkJCQkJfQoJCQkJCQl9IGVsc2UgewoJCQkJCQkJcmV0dXJuIGVycgoJCQkJCQl9CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQlyZXR1cm4gZXJyCgkJCQl9CgkJCQlmb3IgXywgZGVmZXJyZWQgOj0gcmFuZ2UgY29sbGVjdGlvbkRlZmVycyB7CgkJCQkJaWYgc2xpY2V1dGlsLkNvbnRhaW5zKGZvdW5kSWRzLCBkZWZlcnJlZC5JRCkgewoJCQkJCQljb250aW51ZQoJCQkJCX0gZWxzZSB7CgkJCQkJCWtleSA6PSBrZXlGbihkZWZlcnJlZC5JRCkKCQkJCQkJaWYgXywgb2sgOj0gY2FjaGVba2V5XTsgb2sgewoJCQkJCQkJY29udGludWUKCQkJCQkJfSBlbHNlIHsKCQkJCQkJCWNhY2hlW2tleV0gPSBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2RlZmVycmVkLklkZW50aXR5RmllbGROYW1lOiBkZWZlcnJlZC5JRCwgYF9taXNzaW5nYDogdHJ1ZSwgYF9jb2xsZWN0aW9uYDogZGVmZXJyZWQuQ29sbGVjdGlvbk5hbWV9CgkJCQkJCX0KCQkJCQl9CgkJCQl9CgkJCQlmb3IgXywgZmllbGQgOj0gcmFuZ2UgcmVzb2x2ZWRWYWx1ZXMgewoJCQkJCWtleSA6PSBrZXlGbihmaWVsZC5WYWx1ZSkKCQkJCQlpZiBkYXRhLCBvayA6PSBjYWNoZVtrZXldLihtYXBbc3RyaW5nXWludGVyZmFjZXt9KTsgb2sgewoJCQkJCQltYXB1dGlsLkRlZXBTZXQoZmllbGQuUmVjb3JkLkZpZWxkcywgZmllbGQuS2V5LCBkYXRhKQoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCX0KCXJldHVybiBuaWwKfQ==",
                    "IsPackageLevel": true
                }
            ],
            "Tests": [
                {
                    "Name": "TestDynamoRecordFromItem",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestDynamoRecordFromItem(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglyZWNvcmQsIGVyciA6PSBkeW5hbW9SZWNvcmRGcm9tSXRlbShkeW5hbW9UZXN0Q29sbGVjdGlvbiwgMTIzLCBtYXBbc3RyaW5nXSpkeW5hbW9kYi5BdHRyaWJ1dGVWYWx1ZXtgaWRgOiB7TjogYXdzLlN0cmluZyhgMTIzYCl9LCBgbmFtZWA6IHtTOiBhd3MuU3RyaW5nKGB0ZXN0ZXJgKX0sIGBhZ2VgOiB7TjogYXdzLlN0cmluZyhgNDJgKX19KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEyMywgcmVjb3JkLklEKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKGB0ZXN0ZXJgLCByZWNvcmQuR2V0KGBuYW1lYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoNDIsIHJlY29yZC5HZXQoYGFnZWApKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestDynamoRecordToItem",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestDynamoRecordToItem(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhdHRyLCBlcnIgOj0gZHluYW1vUmVjb3JkVG9JdGVtKGR5bmFtb1Rlc3RDb2xsZWN0aW9uLCBkYWwuTmV3UmVjb3JkKDEyMykuU2V0KGBuYW1lYCwgYHRlc3RlcmApLlNldChgYWdlYCwgNDIpKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddKmR5bmFtb2RiLkF0dHJpYnV0ZVZhbHVle2BpZGA6IHtOOiBhd3MuU3RyaW5nKGAxMjNgKX0sIGBuYW1lYDoge1M6IGF3cy5TdHJpbmcoYHRlc3RlcmApfSwgYGFnZWA6IHtOOiBhd3MuU3RyaW5nKGA0MmApfX0sIGF0dHIpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestInflateEmbeddedRecords",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestInflateEmbeddedRecords(t *testing.T)",
                    "Source": "ewp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRedisSplitKey",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRedisSplitKey(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uLCBrZXlzIDo9IHJlZGlzU3BsaXRLZXkoYGApCglhc3NlcnQuWmVybyhjb2xsZWN0aW9uKQoJYXNzZXJ0LkVtcHR5KGtleXMpCgljb2xsZWN0aW9uLCBrZXlzID0gcmVkaXNTcGxpdEtleShgdGVzdGluZzoxMjNgKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0aW5nYCwgY29sbGVjdGlvbikKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgMTIzYH0sIGtleXMpCgljb2xsZWN0aW9uLCBrZXlzID0gcmVkaXNTcGxpdEtleShgcGl2b3QudGVzdGluZzoxMjNgKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0aW5nYCwgY29sbGVjdGlvbikKCWFzc2VydC5FcXVhbChbXXN0cmluZ3tgMTIzYH0sIGtleXMpCgljb2xsZWN0aW9uLCBrZXlzID0gcmVkaXNTcGxpdEtleShgcGl2b3QudGVzdGluZzoxMjM6NDU2YCkKCWFzc2VydC5FcXVhbChgdGVzdGluZ2AsIGNvbGxlY3Rpb24pCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YDEyM2AsIGA0NTZgfSwga2V5cykKCWNvbGxlY3Rpb24sIGtleXMgPSByZWRpc1NwbGl0S2V5KGBwaXZvdC5kZWVwbHkubmVzdGVkLndoYXRzYXdoYXQudGVzdGluZzoxMjM6NDU2YCkKCWFzc2VydC5FcXVhbChgdGVzdGluZ2AsIGNvbGxlY3Rpb24pCglhc3NlcnQuRXF1YWwoW11zdHJpbmd7YDEyM2AsIGA0NTZgfSwga2V5cykKfQ==",
                    "IsPackageLevel": true
                }
            ],
            "Types": {
                "Aggregator": {
                    "Name": "Aggregator",
                    "Source": "dHlwZSBBZ2dyZWdhdG9yIGludGVyZmFjZSB7CglBZ2dyZWdhdG9yQ29ubmVjdGlvblN0cmluZygpICpkYWwuQ29ubmVjdGlvblN0cmluZwoJQWdncmVnYXRvckluaXRpYWxpemUoQmFja2VuZCkgZXJyb3IKCVN1bShjb2xsZWN0aW9uICpkYWwuQ29sbGVjdGlvbiwgZmllbGQgc3RyaW5nLCBmIC4uLipmaWx0ZXIuRmlsdGVyKSAoZmxvYXQ2NCwgZXJyb3IpCglDb3VudChjb2xsZWN0aW9uICpkYWwuQ29sbGVjdGlvbiwgZiAuLi4qZmlsdGVyLkZpbHRlcikgKHVpbnQ2NCwgZXJyb3IpCglNaW5pbXVtKGNvbGxlY3Rpb24gKmRhbC5Db2xsZWN0aW9uLCBmaWVsZCBzdHJpbmcsIGYgLi4uKmZpbHRlci5GaWx0ZXIpIChmbG9hdDY0LCBlcnJvcikKCU1heGltdW0oY29sbGVjdGlvbiAqZGFsLkNvbGxlY3Rpb24sIGZpZWxkIHN0cmluZywgZiAuLi4qZmlsdGVyLkZpbHRlcikgKGZsb2F0NjQsIGVycm9yKQoJQXZlcmFnZShjb2xsZWN0aW9uICpkYWwuQ29sbGVjdGlvbiwgZmllbGQgc3RyaW5nLCBmIC4uLipmaWx0ZXIuRmlsdGVyKSAoZmxvYXQ2NCwgZXJyb3IpCglHcm91cEJ5KGNvbGxlY3Rpb24gKmRhbC5Db2xsZWN0aW9uLCBmaWVsZHMgW11zdHJpbmcsIGFnZ3JlZ2F0ZXMgW11maWx0ZXIuQWdncmVnYXRlLCBmIC4uLipmaWx0ZXIuRmlsdGVyKSAoKmRhbC5SZWNvcmRTZXQsIGVycm9yKQp9"
                },
                "Backend": {
                    "Name": "Backend",
                    "Methods": [
                        {
                            "Name": "MakeBackend",
                            "Comment": "Instantiate the appropriate Backend for the given connection string.",
                            "Arguments": [
                                {
                                    "Name": "connection",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Backend"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "MakeBackend(connection dal.ConnectionString) (Backend, error)",
                            "Source": "ewoJdmFyIGF1dG9waW5nSW50ZXJ2YWwgdGltZS5EdXJhdGlvbgoJYmFja2VuZE5hbWUgOj0gY29ubmVjdGlvbi5CYWNrZW5kKCkKCWxvZy5JbmZvZigiQ3JlYXRpbmcgYmFja2VuZDogJXYiLCBjb25uZWN0aW9uLlN0cmluZygpKQoJaWYgZm4sIG9rIDo9IGJhY2tlbmRNYXBbYmFja2VuZE5hbWVdOyBvayB7CgkJaWYgaSA6PSBjb25uZWN0aW9uLk9wdER1cmF0aW9uKGBwaW5nYCwgMCk7IGkgPiAwIHsKCQkJYXV0b3BpbmdJbnRlcnZhbCA9IGkKCQl9CgkJY29ubmVjdGlvbi5DbGVhck9wdChgcGluZ2ApCgkJaWYgYmFja2VuZCA6PSBmbihjb25uZWN0aW9uKTsgYmFja2VuZCAhPSBuaWwgewoJCQlpZiBhdXRvcGluZ0ludGVydmFsID4gMCB7CgkJCQlnbyBzdGFydFBlcmlvZGljUGluZ2VyKGF1dG9waW5nSW50ZXJ2YWwsIGJhY2tlbmQpCgkJCX0KCQkJcmV0dXJuIGJhY2tlbmQsIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkVycm9yIG9jY3VycmVkIGluc3RhbnRpYXRpbmcgYmFja2VuZCAlcSIsIGJhY2tlbmROYW1lKQoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiVW5rbm93biBiYWNrZW5kIHR5cGUgJXEiLCBiYWNrZW5kTmFtZSkKCX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "NewSqlBackend",
                            "Arguments": [
                                {
                                    "Name": "connection",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "NewSqlBackend(connection dal.ConnectionString) Backend",
                            "Source": "ewoJYmFja2VuZCA6PSAmU3FsQmFja2VuZHtjb25uOiAmY29ubmVjdGlvbiwgcXVlcnlHZW5UeXBlTWFwcGluZzogZ2VuZXJhdG9ycy5EZWZhdWx0U3FsVHlwZU1hcHBpbmcsIGRyb3BUYWJsZVF1ZXJ5OiBgRFJPUCBUQUJMRSAlc2AsIGFnZ3JlZ2F0b3I6IG1ha2UobWFwW3N0cmluZ11BZ2dyZWdhdG9yKSwga25vd25Db2xsZWN0aW9uczogbWFrZShtYXBbc3RyaW5nXWJvb2wpLCBkZXRlY3RlZENvbGxlY3Rpb25zOiBtYWtlKG1hcFtzdHJpbmddKmRhbC5Db2xsZWN0aW9uKX0KCWlmIGZuLCBvayA6PSBzcWxQcmVJbml0RnVuY3NbY29ubmVjdGlvbi5CYWNrZW5kKCldOyBvayAmJiBmbiAhPSBuaWwgewoJCWZuKGJhY2tlbmQpCgl9CgliYWNrZW5kLmluZGV4ZXIgPSBiYWNrZW5kCglyZXR1cm4gYmFja2VuZAp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "NewElasticsearchBackend",
                            "Arguments": [
                                {
                                    "Name": "connection",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "NewElasticsearchBackend(connection dal.ConnectionString) Backend",
                            "Source": "ewoJcmV0dXJuICZFbGFzdGljc2VhcmNoQmFja2VuZHtjczogY29ubmVjdGlvbiwgc2hhcmRzOiBFbGFzdGljc2VhcmNoRGVmYXVsdFNoYXJkcywgcmVwbGljYXM6IEVsYXN0aWNzZWFyY2hEZWZhdWx0UmVwbGljYXMsIHJlZnJlc2g6IEVsYXN0aWNzZWFyY2hEZWZhdWx0UmVmcmVzaH0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "NewFilesystemBackend",
                            "Arguments": [
                                {
                                    "Name": "connection",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "NewFilesystemBackend(connection dal.ConnectionString) Backend",
                            "Source": "ewoJcmV0dXJuICZGaWxlc3lzdGVtQmFja2VuZHtjb25uOiBjb25uZWN0aW9uLCBmb3JtYXQ6IEZvcm1hdFlBTUwsIGFnZ3JlZ2F0b3I6IG1ha2UobWFwW3N0cmluZ11BZ2dyZWdhdG9yKSwgcmVnaXN0ZXJlZENvbGxlY3Rpb25zOiBtYWtlKG1hcFtzdHJpbmddKmRhbC5Db2xsZWN0aW9uKSwgcmVjb3JkU3ViZGlyOiBEZWZhdWx0RmlsZXN5c3RlbVJlY29yZFN1YmRpcmVjdG9yeX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "NewRedisBackend",
                            "Arguments": [
                                {
                                    "Name": "connection",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "NewRedisBackend(connection dal.ConnectionString) Backend",
                            "Source": "ewoJcmV0dXJuICZSZWRpc0JhY2tlbmR7Y3M6IGNvbm5lY3Rpb24sIGtleVByZWZpeDogcmVkaXNEZWZhdWx0S2V5UHJlZml4LCB0aW1lb3V0OiByZWRpc0RlZmF1bHRQaW5nVGltZW91dH0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "NewMongoBackend",
                            "Arguments": [
                                {
                                    "Name": "connection",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "NewMongoBackend(connection dal.ConnectionString) Backend",
                            "Source": "ewoJYmFja2VuZCA6PSAmTW9uZ29CYWNrZW5ke2Nvbm46ICZjb25uZWN0aW9ufQoJYmFja2VuZC5pbmRleGVyID0gYmFja2VuZAoJcmV0dXJuIGJhY2tlbmQKfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "NewFileBackend",
                            "Arguments": [
                                {
                                    "Name": "connection",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "NewFileBackend(connection dal.ConnectionString) Backend",
                            "Source": "ewoJcmV0dXJuICZGaWxlQmFja2VuZHtjb25uOiBjb25uZWN0aW9ufQp9",
                            "IsPackageLevel": true
                        }
                    ],
                    "Source": "dHlwZSBCYWNrZW5kIGludGVyZmFjZSB7CglJbml0aWFsaXplKCkgZXJyb3IKCVNldEluZGV4ZXIoZGFsLkNvbm5lY3Rpb25TdHJpbmcpIGVycm9yCglSZWdpc3RlckNvbGxlY3Rpb24oKmRhbC5Db2xsZWN0aW9uKQoJR2V0Q29ubmVjdGlvblN0cmluZygpICpkYWwuQ29ubmVjdGlvblN0cmluZwoJRXhpc3RzKGNvbGxlY3Rpb24gc3RyaW5nLCBpZCBpbnRlcmZhY2V7fSkgYm9vbAoJUmV0cmlldmUoY29sbGVjdGlvbiBzdHJpbmcsIGlkIGludGVyZmFjZXt9LCBmaWVsZHMgLi4uc3RyaW5nKSAoKmRhbC5SZWNvcmQsIGVycm9yKQoJSW5zZXJ0KGNvbGxlY3Rpb24gc3RyaW5nLCByZWNvcmRzICpkYWwuUmVjb3JkU2V0KSBlcnJvcgoJVXBkYXRlKGNvbGxlY3Rpb24gc3RyaW5nLCByZWNvcmRzICpkYWwuUmVjb3JkU2V0LCB0YXJnZXQgLi4uc3RyaW5nKSBlcnJvcgoJRGVsZXRlKGNvbGxlY3Rpb24gc3RyaW5nLCBpZHMgLi4uaW50ZXJmYWNle30pIGVycm9yCglDcmVhdGVDb2xsZWN0aW9uKGRlZmluaXRpb24gKmRhbC5Db2xsZWN0aW9uKSBlcnJvcgoJRGVsZXRlQ29sbGVjdGlvbihjb2xsZWN0aW9uIHN0cmluZykgZXJyb3IKCUxpc3RDb2xsZWN0aW9ucygpIChbXXN0cmluZywgZXJyb3IpCglHZXRDb2xsZWN0aW9uKGNvbGxlY3Rpb24gc3RyaW5nKSAoKmRhbC5Db2xsZWN0aW9uLCBlcnJvcikKCVdpdGhTZWFyY2goY29sbGVjdGlvbiAqZGFsLkNvbGxlY3Rpb24sIGZpbHRlcnMgLi4uKmZpbHRlci5GaWx0ZXIpIEluZGV4ZXIKCVdpdGhBZ2dyZWdhdG9yKGNvbGxlY3Rpb24gKmRhbC5Db2xsZWN0aW9uKSBBZ2dyZWdhdG9yCglGbHVzaCgpIGVycm9yCglQaW5nKHRpbWUuRHVyYXRpb24pIGVycm9yCglTdHJpbmcoKSBzdHJpbmcKCVN1cHBvcnRzKGZlYXR1cmUgLi4uQmFja2VuZEZlYXR1cmUpIGJvb2wKfQ=="
                },
                "BackendFeature": {
                    "Name": "BackendFeature",
                    "MetaType": "int",
                    "Source": "dHlwZSBCYWNrZW5kRmVhdHVyZSBpbnQ="
                },
                "BackendFunc": {
                    "Name": "BackendFunc",
                    "Source": "dHlwZSBCYWNrZW5kRnVuYyBmdW5jKGRhbC5Db25uZWN0aW9uU3RyaW5nKSBCYWNrZW5k"
                },
                "BleveIndexer": {
                    "Name": "BleveIndexer",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "DeleteQuery",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteQuery(collection *dal.Collection, f *filter.Filter) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FlushIndex",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FlushIndex() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetBackend",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "GetBackend() Backend",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Index",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Index(collection *dal.Collection, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "IndexConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexExists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IndexExists(collection *dal.Collection, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "parent",
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexInitialize(parent Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRemove",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRemove(collection *dal.Collection, ids []interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRetrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRetrieve(collection *dal.Collection, id interface{}) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListValues",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string][]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListValues(collection *dal.Collection, fields []string, f *filter.Filter) (map[string][]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "NewBleveIndexer",
                            "Arguments": [
                                {
                                    "Name": "connection",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*BleveIndexer"
                                }
                            ],
                            "Signature": "NewBleveIndexer(connection dal.ConnectionString) *BleveIndexer",
                            "Source": "ewoJcmV0dXJuICZCbGV2ZUluZGV4ZXJ7Y29ubjogJmNvbm5lY3Rpb24sIGluZGV4Q2FjaGU6IG1ha2UobWFwW3N0cmluZ11ibGV2ZS5JbmRleCksIGluZGV4RGVmZXJyZWRCYXRjaDogY21hcC5OZXcoKX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "Query",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFns",
                                    "Type": "...IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Query(collection *dal.Collection, f *filter.Filter, resultFns ...IndexResultFunc) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "QueryFunc",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "QueryFunc(collection *dal.Collection, f *filter.Filter, resultFn IndexResultFunc) error",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBCbGV2ZUluZGV4ZXIgc3RydWN0IHsKCUluZGV4ZXIKCn0K",
                    "HasUnexportedFields": true
                },
                "CachingBackend": {
                    "Name": "CachingBackend",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "CreateCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "definition",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "CreateCollection(definition *dal.Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Delete",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Delete(collection string, ids ...interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteCollection(collection string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Exists",
                            "Comment": "passthrough the remaining functions to fulfill the Backend interface\n-------------------------------------------------------------------------------------------------",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Exists(collection string, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Flush",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Flush() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GetCollection(collection string) (*dal.Collection, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "GetConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Initialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Initialize() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Insert",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Insert(collection string, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListCollections",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]string"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListCollections() ([]string, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "NewCachingBackend",
                            "Arguments": [
                                {
                                    "Name": "parent",
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*CachingBackend"
                                }
                            ],
                            "Signature": "NewCachingBackend(parent Backend) *CachingBackend",
                            "Source": "ewoJcmV0dXJuICZDYWNoaW5nQmFja2VuZHtiYWNrZW5kOiBwYXJlbnR9Cn0=",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "Ping",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "d",
                                    "Type": "time.Duration"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Ping(d time.Duration) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "RegisterCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "c",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Signature": "RegisterCollection(c *dal.Collection)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ResetCache",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Signature": "ResetCache()",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Retrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Retrieve(collection string, id interface{}, fields ...string) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetIndexer",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "cs",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "SetIndexer(cs dal.ConnectionString) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Supports",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "feature",
                                    "Type": "...BackendFeature"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Supports(feature ...BackendFeature) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Update",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Name": "target",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Update(collection string, records *dal.RecordSet, target ...string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithAggregator",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Aggregator"
                                }
                            ],
                            "Signature": "WithAggregator(collection *dal.Collection) Aggregator",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithSearch",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filters",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Indexer"
                                }
                            ],
                            "Signature": "WithSearch(collection *dal.Collection, filters ...*filter.Filter) Indexer",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBDYWNoaW5nQmFja2VuZCBzdHJ1Y3QgewoKfQo=",
                    "HasUnexportedFields": true
                },
                "ConnectOptions": {
                    "Name": "ConnectOptions",
                    "MetaType": "struct",
                    "Fields": [
                        {
                            "Name": "Indexer",
                            "Type": "string"
                        },
                        {
                            "Name": "AdditionalIndexers",
                            "Type": "[]string"
                        },
                        {
                            "Name": "SkipInitialize",
                            "Type": "bool"
                        },
                        {
                            "Name": "AutocreateCollections",
                            "Type": "bool"
                        }
                    ],
                    "Source": "dHlwZSBDb25uZWN0T3B0aW9ucyBzdHJ1Y3QgewoJSW5kZXhlciAgICAgICAgICAgICAgIHN0cmluZyAgIGBqc29uOiJpbmRleGVyImAKCUFkZGl0aW9uYWxJbmRleGVycyAgICBbXXN0cmluZyBganNvbjoiYWRkaXRpb25hbF9pbmRleGVycyJgCglTa2lwSW5pdGlhbGl6ZSAgICAgICAgYm9vbCAgICAgYGpzb246InNraXBfaW5pdGlhbGl6ZSJgCglBdXRvY3JlYXRlQ29sbGVjdGlvbnMgYm9vbCAgICAgYGpzb246ImF1dG9jcmVhdGVfY29sbGVjdGlvbnMiYAp9"
                },
                "DeferredRecord": {
                    "Name": "DeferredRecord",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "GroupKey",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "id",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "GroupKey(id ...interface{}) string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        }
                    ],
                    "Fields": [
                        {
                            "Name": "Original",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "Backend",
                            "Type": "Backend"
                        },
                        {
                            "Name": "IdentityFieldName",
                            "Type": "string"
                        },
                        {
                            "Name": "CollectionName",
                            "Type": "string"
                        },
                        {
                            "Name": "ID",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "Keys",
                            "Type": "[]string"
                        }
                    ],
                    "Source": "dHlwZSBEZWZlcnJlZFJlY29yZCBzdHJ1Y3QgewoJT3JpZ2luYWwgICAgICAgICAgaW50ZXJmYWNle30KCUJhY2tlbmQgICAgICAgICAgIEJhY2tlbmQKCUlkZW50aXR5RmllbGROYW1lIHN0cmluZwoJQ29sbGVjdGlvbk5hbWUgICAgc3RyaW5nCglJRCAgICAgICAgICAgICAgICBpbnRlcmZhY2V7fQoJS2V5cyAgICAgICAgICAgICAgW11zdHJpbmcKfQ=="
                },
                "DynamoBackend": {
                    "Name": "DynamoBackend",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "CreateCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "definition",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "CreateCollection(definition *dal.Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Delete",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Delete(name string, ids ...interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteCollection(name string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteQuery",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteQuery(collection *dal.Collection, flt *filter.Filter) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Exists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Exists(name string, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Flush",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Flush() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FlushIndex",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FlushIndex() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetBackend",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "GetBackend() Backend",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GetCollection(name string) (*dal.Collection, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "GetConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Index",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Index(collection *dal.Collection, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "IndexConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexExists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IndexExists(collection *dal.Collection, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexInitialize( Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRemove",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRemove(collection *dal.Collection, ids []interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRetrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRetrieve(collection *dal.Collection, id interface{}) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Initialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Initialize() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Insert",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Insert(name string, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListCollections",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]string"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListCollections() ([]string, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListValues",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string][]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListValues(collection *dal.Collection, fields []string, flt *filter.Filter) (map[string][]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Ping",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "timeout",
                                    "Type": "time.Duration"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Ping(timeout time.Duration) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Query",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFns",
                                    "Type": "...IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Query(collection *dal.Collection, f *filter.Filter, resultFns ...IndexResultFunc) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "QueryFunc",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "QueryFunc(collection *dal.Collection, flt *filter.Filter, resultFn IndexResultFunc) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "RegisterCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "definition",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Signature": "RegisterCollection(definition *dal.Collection)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Retrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Retrieve(name string, id interface{}, fields ...string) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetIndexer",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "indexConnString",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "SetIndexer(indexConnString dal.ConnectionString) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Supports",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "features",
                                    "Type": "...BackendFeature"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Supports(features ...BackendFeature) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Update",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Name": "target",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Update(name string, records *dal.RecordSet, target ...string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithAggregator",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Aggregator"
                                }
                            ],
                            "Signature": "WithAggregator(collection *dal.Collection) Aggregator",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithSearch",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filters",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Indexer"
                                }
                            ],
                            "Signature": "WithSearch(collection *dal.Collection, filters ...*filter.Filter) Indexer",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBEeW5hbW9CYWNrZW5kIHN0cnVjdCB7CglCYWNrZW5kCglJbmRleGVyCgp9Cg==",
                    "HasUnexportedFields": true
                },
                "ElasticsearchBackend": {
                    "Name": "ElasticsearchBackend",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "CreateCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "definition",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "CreateCollection(definition *dal.Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Delete",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Delete(name string, ids ...interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteCollection(name string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Exists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Exists(name string, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Flush",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Flush() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GetCollection(name string) (*dal.Collection, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "GetConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Initialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Initialize() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Insert",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Insert(name string, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListCollections",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]string"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListCollections() ([]string, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Ping",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "timeout",
                                    "Type": "time.Duration"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Ping(timeout time.Duration) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "RegisterCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "definition",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Signature": "RegisterCollection(definition *dal.Collection)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Retrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Retrieve(name string, id interface{}, fields ...string) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetIndexer",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "indexConnString",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "SetIndexer(indexConnString dal.ConnectionString) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Supports",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "features",
                                    "Type": "...BackendFeature"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Supports(features ...BackendFeature) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Update",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Name": "target",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Update(name string, records *dal.RecordSet, target ...string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithAggregator",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Aggregator"
                                }
                            ],
                            "Signature": "WithAggregator(collection *dal.Collection) Aggregator",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithSearch",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filters",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Indexer"
                                }
                            ],
                            "Signature": "WithSearch(collection *dal.Collection, filters ...*filter.Filter) Indexer",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBFbGFzdGljc2VhcmNoQmFja2VuZCBzdHJ1Y3QgewoKfQo=",
                    "HasUnexportedFields": true
                },
                "ElasticsearchIndexer": {
                    "Name": "ElasticsearchIndexer",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "AggregatorConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "AggregatorConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "AggregatorInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "parent",
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "AggregatorInitialize(parent Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Average",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Average(collection *dal.Collection, field string, f ...*filter.Filter) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Count",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "uint64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Count(collection *dal.Collection, flt ...*filter.Filter) (uint64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteQuery",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteQuery(collection *dal.Collection, f *filter.Filter) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FlushIndex",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FlushIndex() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetBackend",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "GetBackend() Backend",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GroupBy",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "groupBy",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "aggregates",
                                    "Type": "[]filter.Aggregate"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GroupBy(collection *dal.Collection, groupBy []string, aggregates []filter.Aggregate, flt ...*filter.Filter) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Index",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Index(collection *dal.Collection, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "IndexConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexExists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IndexExists(collection *dal.Collection, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "parent",
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexInitialize(parent Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRemove",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRemove(collection *dal.Collection, ids []interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRetrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRetrieve(collection *dal.Collection, id interface{}) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListValues",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string][]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListValues(collection *dal.Collection, fields []string, f *filter.Filter) (map[string][]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Maximum",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Maximum(collection *dal.Collection, field string, f ...*filter.Filter) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Minimum",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Minimum(collection *dal.Collection, field string, f ...*filter.Filter) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "NewElasticsearchIndexer",
                            "Arguments": [
                                {
                                    "Name": "connection",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*ElasticsearchIndexer"
                                }
                            ],
                            "Signature": "NewElasticsearchIndexer(connection dal.ConnectionString) *ElasticsearchIndexer",
                            "Source": "ewoJcmV0dXJuICZFbGFzdGljc2VhcmNoSW5kZXhlcntjb25uOiAmY29ubmVjdGlvbiwgaW5kZXhDYWNoZTogbWFrZShtYXBbc3RyaW5nXSplbGFzdGljc2VhcmNoSW5kZXgpLCBpbmRleERlZmVycmVkQmF0Y2g6IG5ldyhlc0RlZmVycmVkQmF0Y2gpLCByZWZyZXNoOiBFbGFzdGljc2VhcmNoRGVmYXVsdFJlZnJlc2gsIHBrU2VwYXJhdG9yOiBFbGFzdGljc2VhcmNoRGVmYXVsdENvbXBvc2l0ZUpvaW5lcn0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "Query",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFns",
                                    "Type": "...IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Query(collection *dal.Collection, f *filter.Filter, resultFns ...IndexResultFunc) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "QueryFunc",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "QueryFunc(collection *dal.Collection, f *filter.Filter, resultFn IndexResultFunc) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Sum",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Sum(collection *dal.Collection, field string, f ...*filter.Filter) (float64, error)",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBFbGFzdGljc2VhcmNoSW5kZXhlciBzdHJ1Y3QgewoJSW5kZXhlcgoKfQo=",
                    "HasUnexportedFields": true
                },
                "EmbeddedRecordBackend": {
                    "Name": "EmbeddedRecordBackend",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "CreateCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "definition",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "CreateCollection(definition *dal.Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Delete",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Delete(collection string, ids ...interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteCollection(collection string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteQuery",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteQuery(collection *dal.Collection, f *filter.Filter) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "EmbedRelationships",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "record",
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "EmbedRelationships(collection *dal.Collection, record *dal.Record, fields ...string) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Exists",
                            "Comment": "passthrough the remaining functions to fulfill the Backend interface\n-------------------------------------------------------------------------------------------------",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Exists(collection string, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Flush",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Flush() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FlushIndex",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FlushIndex() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetBackend",
                            "Comment": "fulfill the Indexer interface\n-------------------------------------------------------------------------------------------------",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "GetBackend() Backend",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GetCollection(collection string) (*dal.Collection, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "GetConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Index",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Index(collection *dal.Collection, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "IndexConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexExists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IndexExists(collection *dal.Collection, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "b",
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexInitialize(b Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRemove",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRemove(collection *dal.Collection, ids []interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRetrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRetrieve(collection *dal.Collection, id interface{}) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Initialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Initialize() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Insert",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Insert(collection string, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListCollections",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]string"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListCollections() ([]string, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListValues",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "filter",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string][]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListValues(collection *dal.Collection, fields []string, filter *filter.Filter) (map[string][]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Migrate",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Migrate() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "NewEmbeddedRecordBackend",
                            "Arguments": [
                                {
                                    "Name": "parent",
                                    "Type": "Backend"
                                },
                                {
                                    "Name": "skipKeys",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*EmbeddedRecordBackend"
                                }
                            ],
                            "Signature": "NewEmbeddedRecordBackend(parent Backend, skipKeys ...string) *EmbeddedRecordBackend",
                            "Source": "ewoJYmFja2VuZCA6PSAmRW1iZWRkZWRSZWNvcmRCYWNrZW5ke1NraXBLZXlzOiBza2lwS2V5cywgYmFja2VuZDogcGFyZW50fQoJaWYgaW5kZXhlciA6PSBwYXJlbnQuV2l0aFNlYXJjaChuaWwpOyBpbmRleGVyICE9IG5pbCB7CgkJYmFja2VuZC5pbmRleGVyID0gaW5kZXhlcgoJfQoJcmV0dXJuIGJhY2tlbmQKfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "Ping",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "d",
                                    "Type": "time.Duration"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Ping(d time.Duration) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Query",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filter",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFns",
                                    "Type": "...IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Query(collection *dal.Collection, filter *filter.Filter, resultFns ...IndexResultFunc) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "QueryFunc",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filter",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "QueryFunc(collection *dal.Collection, filter *filter.Filter, resultFn IndexResultFunc) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "RegisterCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "c",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Signature": "RegisterCollection(c *dal.Collection)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Retrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Retrieve(name string, id interface{}, fields ...string) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetIndexer",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "cs",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "SetIndexer(cs dal.ConnectionString) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Supports",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "feature",
                                    "Type": "...BackendFeature"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Supports(feature ...BackendFeature) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Update",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Name": "target",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Update(collection string, records *dal.RecordSet, target ...string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithAggregator",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Aggregator"
                                }
                            ],
                            "Signature": "WithAggregator(collection *dal.Collection) Aggregator",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithSearch",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filters",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Indexer"
                                }
                            ],
                            "Signature": "WithSearch(collection *dal.Collection, filters ...*filter.Filter) Indexer",
                            "IsPackageLevel": false
                        }
                    ],
                    "Fields": [
                        {
                            "Name": "SkipKeys",
                            "Type": "[]string"
                        }
                    ],
                    "Source": "dHlwZSBFbWJlZGRlZFJlY29yZEJhY2tlbmQgc3RydWN0IHsKCVNraXBLZXlzIFtdc3RyaW5nCgp9Cg==",
                    "HasUnexportedFields": true
                },
                "FileBackend": {
                    "Name": "FileBackend",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "CreateCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "definition",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "CreateCollection(definition *dal.Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Delete",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Delete(collection string, ids ...interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteCollection(collection string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Exists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Exists(name string, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Flush",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Flush() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GetCollection(collection string) (*dal.Collection, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "GetConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Initialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Initialize() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Insert",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Insert(collection string, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListCollections",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]string"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListCollections() ([]string, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Ping",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "_",
                                    "Type": "time.Duration"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Ping(_ time.Duration) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "RegisterCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Signature": "RegisterCollection(collection *dal.Collection)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Retrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Retrieve(name string, id interface{}, fields ...string) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetIndexer",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "SetIndexer( dal.ConnectionString) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Supports",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "features",
                                    "Type": "...BackendFeature"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Supports(features ...BackendFeature) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Update",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Name": "target",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Update(collection string, records *dal.RecordSet, target ...string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithAggregator",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Aggregator"
                                }
                            ],
                            "Signature": "WithAggregator(collection *dal.Collection) Aggregator",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithSearch",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filters",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Indexer"
                                }
                            ],
                            "Signature": "WithSearch(collection *dal.Collection, filters ...*filter.Filter) Indexer",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBGaWxlQmFja2VuZCBzdHJ1Y3QgewoJQmFja2VuZAoJSW5kZXhlcgoKfQo=",
                    "HasUnexportedFields": true
                },
                "FilesystemBackend": {
                    "Name": "FilesystemBackend",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "CreateCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "definition",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "CreateCollection(definition *dal.Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Delete",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Delete(name string, ids ...interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteCollection(name string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteQuery",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteQuery(collection *dal.Collection, f *filter.Filter) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Exists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Exists(name string, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Flush",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Flush() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FlushIndex",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FlushIndex() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetBackend",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "GetBackend() Backend",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GetCollection(name string) (*dal.Collection, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "GetConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Index",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Index(collection *dal.Collection, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "IndexConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexExists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IndexExists(collection *dal.Collection, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "_",
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexInitialize(_ Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRemove",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRemove(collection *dal.Collection, ids []interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRetrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRetrieve(collection *dal.Collection, id interface{}) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Initialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Initialize() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Insert",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collectionName",
                                    "Type": "string"
                                },
                                {
                                    "Name": "recordset",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Insert(collectionName string, recordset *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListCollections",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]string"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListCollections() ([]string, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListValues",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string][]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListValues(collection *dal.Collection, fields []string, f *filter.Filter) (map[string][]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Ping",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "timeout",
                                    "Type": "time.Duration"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Ping(timeout time.Duration) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Query",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFns",
                                    "Type": "...IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Query(collection *dal.Collection, f *filter.Filter, resultFns ...IndexResultFunc) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "QueryFunc",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filter",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "QueryFunc(collection *dal.Collection, filter *filter.Filter, resultFn IndexResultFunc) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "RegisterCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Signature": "RegisterCollection(collection *dal.Collection)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Retrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Retrieve(name string, id interface{}, fields ...string) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetIndexer",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "indexConnString",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "SetIndexer(indexConnString dal.ConnectionString) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Supports",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "features",
                                    "Type": "...BackendFeature"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Supports(features ...BackendFeature) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Update",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "recordset",
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Name": "target",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Update(name string, recordset *dal.RecordSet, target ...string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithAggregator",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Aggregator"
                                }
                            ],
                            "Signature": "WithAggregator(collection *dal.Collection) Aggregator",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithSearch",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filters",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Indexer"
                                }
                            ],
                            "Signature": "WithSearch(collection *dal.Collection, filters ...*filter.Filter) Indexer",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBGaWxlc3lzdGVtQmFja2VuZCBzdHJ1Y3QgewoJQmFja2VuZAoJSW5kZXhlcgoKfQo=",
                    "HasUnexportedFields": true
                },
                "IndexOperation": {
                    "Name": "IndexOperation",
                    "MetaType": "int",
                    "Source": "dHlwZSBJbmRleE9wZXJhdGlvbiBpbnQ="
                },
                "IndexPage": {
                    "Name": "IndexPage",
                    "MetaType": "struct",
                    "Fields": [
                        {
                            "Name": "Page",
                            "Type": "int"
                        },
                        {
                            "Name": "TotalPages",
                            "Type": "int"
                        },
                        {
                            "Name": "Limit",
                            "Type": "int"
                        },
                        {
                            "Name": "Offset",
                            "Type": "int"
                        },
                        {
                            "Name": "TotalResults",
                            "Type": "int64"
                        }
                    ],
                    "Source": "dHlwZSBJbmRleFBhZ2Ugc3RydWN0IHsKCVBhZ2UgICAgICAgICBpbnQKCVRvdGFsUGFnZXMgICBpbnQKCUxpbWl0ICAgICAgICBpbnQKCU9mZnNldCAgICAgICBpbnQKCVRvdGFsUmVzdWx0cyBpbnQ2NAp9"
                },
                "IndexResultFunc": {
                    "Name": "IndexResultFunc",
                    "Source": "dHlwZSBJbmRleFJlc3VsdEZ1bmMgZnVuYyhyZWNvcmQgKmRhbC5SZWNvcmQsIGVyciBlcnJvciwgcGFnZSBJbmRleFBhZ2UpIGVycm9yIC8vIHt9Cg=="
                },
                "IndexSelectionStrategy": {
                    "Name": "IndexSelectionStrategy",
                    "MetaType": "int",
                    "Methods": [
                        {
                            "Name": "IsCompoundable",
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IsCompoundable() bool",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBJbmRleFNlbGVjdGlvblN0cmF0ZWd5IGludA=="
                },
                "Indexer": {
                    "Name": "Indexer",
                    "Methods": [
                        {
                            "Name": "MakeIndexer",
                            "Arguments": [
                                {
                                    "Name": "connection",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Indexer"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "MakeIndexer(connection dal.ConnectionString) (Indexer, error)",
                            "Source": "ewoJbG9nLkluZm9mKCJDcmVhdGluZyBpbmRleGVyOiAldiIsIGNvbm5lY3Rpb24uU3RyaW5nKCkpCglzd2l0Y2ggY29ubmVjdGlvbi5CYWNrZW5kKCkgewoJY2FzZSBgYmxldmVgOgoJCXJldHVybiBOZXdCbGV2ZUluZGV4ZXIoY29ubmVjdGlvbiksIG5pbAoJY2FzZSBgZWxhc3RpY3NlYXJjaGA6CgkJcmV0dXJuIE5ld0VsYXN0aWNzZWFyY2hJbmRleGVyKGNvbm5lY3Rpb24pLCBuaWwKCWRlZmF1bHQ6CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiVW5rbm93biBpbmRleGVyIHR5cGUgJXEiLCBjb25uZWN0aW9uLkJhY2tlbmQoKSkKCX0KfQ==",
                            "IsPackageLevel": true
                        }
                    ],
                    "Source": "dHlwZSBJbmRleGVyIGludGVyZmFjZSB7CglJbmRleENvbm5lY3Rpb25TdHJpbmcoKSAqZGFsLkNvbm5lY3Rpb25TdHJpbmcKCUluZGV4SW5pdGlhbGl6ZShCYWNrZW5kKSBlcnJvcgoJSW5kZXhFeGlzdHMoY29sbGVjdGlvbiAqZGFsLkNvbGxlY3Rpb24sIGlkIGludGVyZmFjZXt9KSBib29sCglJbmRleFJldHJpZXZlKGNvbGxlY3Rpb24gKmRhbC5Db2xsZWN0aW9uLCBpZCBpbnRlcmZhY2V7fSkgKCpkYWwuUmVjb3JkLCBlcnJvcikKCUluZGV4UmVtb3ZlKGNvbGxlY3Rpb24gKmRhbC5Db2xsZWN0aW9uLCBpZHMgW11pbnRlcmZhY2V7fSkgZXJyb3IKCUluZGV4KGNvbGxlY3Rpb24gKmRhbC5Db2xsZWN0aW9uLCByZWNvcmRzICpkYWwuUmVjb3JkU2V0KSBlcnJvcgoJUXVlcnlGdW5jKGNvbGxlY3Rpb24gKmRhbC5Db2xsZWN0aW9uLCBmaWx0ZXIgKmZpbHRlci5GaWx0ZXIsIHJlc3VsdEZuIEluZGV4UmVzdWx0RnVuYykgZXJyb3IKCVF1ZXJ5KGNvbGxlY3Rpb24gKmRhbC5Db2xsZWN0aW9uLCBmaWx0ZXIgKmZpbHRlci5GaWx0ZXIsIHJlc3VsdEZucyAuLi5JbmRleFJlc3VsdEZ1bmMpICgqZGFsLlJlY29yZFNldCwgZXJyb3IpCglMaXN0VmFsdWVzKGNvbGxlY3Rpb24gKmRhbC5Db2xsZWN0aW9uLCBmaWVsZHMgW11zdHJpbmcsIGZpbHRlciAqZmlsdGVyLkZpbHRlcikgKG1hcFtzdHJpbmddW11pbnRlcmZhY2V7fSwgZXJyb3IpCglEZWxldGVRdWVyeShjb2xsZWN0aW9uICpkYWwuQ29sbGVjdGlvbiwgZiAqZmlsdGVyLkZpbHRlcikgZXJyb3IKCUZsdXNoSW5kZXgoKSBlcnJvcgoJR2V0QmFja2VuZCgpIEJhY2tlbmQKfQ=="
                },
                "IndexerResult": {
                    "Name": "IndexerResult",
                    "MetaType": "struct",
                    "Fields": [
                        {
                            "Name": "Index",
                            "Type": "int"
                        },
                        {
                            "Name": "Indexer",
                            "Type": "Indexer"
                        }
                    ],
                    "Source": "dHlwZSBJbmRleGVyUmVzdWx0IHN0cnVjdCB7CglJbmRleCAgIGludAoJSW5kZXhlciBJbmRleGVyCn0="
                },
                "IndexerResultFunc": {
                    "Name": "IndexerResultFunc",
                    "Source": "dHlwZSBJbmRleGVyUmVzdWx0RnVuYyBmdW5jKGluZGV4ZXIgSW5kZXhlciwgY3VycmVudCBpbnQsIGxhc3QgaW50KSBlcnJvciAvLyB7fQo="
                },
                "Mapper": {
                    "Name": "Mapper",
                    "Source": "dHlwZSBNYXBwZXIgaW50ZXJmYWNlIHsKCUdldEJhY2tlbmQoKSBCYWNrZW5kCglHZXRDb2xsZWN0aW9uKCkgKmRhbC5Db2xsZWN0aW9uCglNaWdyYXRlKCkgZXJyb3IKCURyb3AoKSBlcnJvcgoJRXhpc3RzKGlkIGludGVyZmFjZXt9KSBib29sCglDcmVhdGUoZnJvbSBpbnRlcmZhY2V7fSkgZXJyb3IKCUdldChpZCBpbnRlcmZhY2V7fSwgaW50byBpbnRlcmZhY2V7fSkgZXJyb3IKCVVwZGF0ZShmcm9tIGludGVyZmFjZXt9KSBlcnJvcgoJQ3JlYXRlT3JVcGRhdGUoaWQgaW50ZXJmYWNle30sIGZyb20gaW50ZXJmYWNle30pIGVycm9yCglEZWxldGUoaWRzIC4uLmludGVyZmFjZXt9KSBlcnJvcgoJRGVsZXRlUXVlcnkoZmx0IGludGVyZmFjZXt9KSBlcnJvcgoJRmluZChmbHQgaW50ZXJmYWNle30sIGludG8gaW50ZXJmYWNle30pIGVycm9yCglGaW5kRnVuYyhmbHQgaW50ZXJmYWNle30sIGRlc3RaZXJvVmFsdWUgaW50ZXJmYWNle30sIHJlc3VsdEZuIFJlc3VsdEZ1bmMpIGVycm9yCglBbGwoaW50byBpbnRlcmZhY2V7fSkgZXJyb3IKCUVhY2goZGVzdFplcm9WYWx1ZSBpbnRlcmZhY2V7fSwgcmVzdWx0Rm4gUmVzdWx0RnVuYykgZXJyb3IKCUxpc3QoZmllbGRzIFtdc3RyaW5nKSAobWFwW3N0cmluZ11bXWludGVyZmFjZXt9LCBlcnJvcikKCUxpc3RXaXRoRmlsdGVyKGZpZWxkcyBbXXN0cmluZywgZmx0IGludGVyZmFjZXt9KSAobWFwW3N0cmluZ11bXWludGVyZmFjZXt9LCBlcnJvcikKCVN1bShmaWVsZCBzdHJpbmcsIGZsdCBpbnRlcmZhY2V7fSkgKGZsb2F0NjQsIGVycm9yKQoJQ291bnQoZmx0IGludGVyZmFjZXt9KSAodWludDY0LCBlcnJvcikKCU1pbmltdW0oZmllbGQgc3RyaW5nLCBmbHQgaW50ZXJmYWNle30pIChmbG9hdDY0LCBlcnJvcikKCU1heGltdW0oZmllbGQgc3RyaW5nLCBmbHQgaW50ZXJmYWNle30pIChmbG9hdDY0LCBlcnJvcikKCUF2ZXJhZ2UoZmllbGQgc3RyaW5nLCBmbHQgaW50ZXJmYWNle30pIChmbG9hdDY0LCBlcnJvcikKCUdyb3VwQnkoZmllbGRzIFtdc3RyaW5nLCBhZ2dyZWdhdGVzIFtdZmlsdGVyLkFnZ3JlZ2F0ZSwgZmx0IGludGVyZmFjZXt9KSAoKmRhbC5SZWNvcmRTZXQsIGVycm9yKQp9"
                },
                "MetaIndex": {
                    "Name": "MetaIndex",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "DeleteQuery",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteQuery(collection *dal.Collection, f *filter.Filter) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FlushIndex",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FlushIndex() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetBackend",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "GetBackend() Backend",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Index",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Index(collection *dal.Collection, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "IndexConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexExists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IndexExists(collection *dal.Collection, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "_",
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexInitialize(_ Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRemove",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRemove(collection *dal.Collection, ids []interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRetrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRetrieve(collection *dal.Collection, id interface{}) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListValues",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "filter",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string][]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListValues(collection *dal.Collection, fields []string, filter *filter.Filter) (map[string][]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "NewMetaIndex",
                            "Arguments": [
                                {
                                    "Name": "leftIndexer",
                                    "Type": "Indexer"
                                },
                                {
                                    "Name": "leftCollection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "leftField",
                                    "Type": "string"
                                },
                                {
                                    "Name": "rightIndexer",
                                    "Type": "Indexer"
                                },
                                {
                                    "Name": "rightCollection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "rightField",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*MetaIndex"
                                }
                            ],
                            "Signature": "NewMetaIndex(leftIndexer Indexer, leftCollection *dal.Collection, leftField string, rightIndexer Indexer, rightCollection *dal.Collection, rightField string) *MetaIndex",
                            "Source": "ewoJcmV0dXJuICZNZXRhSW5kZXh7bGVmdEluZGV4ZXI6IGxlZnRJbmRleGVyLCBsZWZ0Q29sbGVjdGlvbjogbGVmdENvbGxlY3Rpb24sIGxlZnRGaWVsZDogbGVmdEZpZWxkLCByaWdodEluZGV4ZXI6IHJpZ2h0SW5kZXhlciwgcmlnaHRDb2xsZWN0aW9uOiByaWdodENvbGxlY3Rpb24sIHJpZ2h0RmllbGQ6IHJpZ2h0RmllbGR9Cn0=",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "Query",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFns",
                                    "Type": "...IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Query(collection *dal.Collection, f *filter.Filter, resultFns ...IndexResultFunc) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "QueryFunc",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "QueryFunc(collection *dal.Collection, f *filter.Filter, resultFn IndexResultFunc) error",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBNZXRhSW5kZXggc3RydWN0IHsKCn0K",
                    "HasUnexportedFields": true
                },
                "MongoBackend": {
                    "Name": "MongoBackend",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "AggregatorConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "AggregatorConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "AggregatorInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "parent",
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "AggregatorInitialize(parent Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Average",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Average(collection *dal.Collection, field string, f ...*filter.Filter) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Count",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "uint64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Count(collection *dal.Collection, flt ...*filter.Filter) (uint64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "CreateCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "definition",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "CreateCollection(definition *dal.Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Delete",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Delete(name string, ids ...interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteCollection(name string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteQuery",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteQuery(collection *dal.Collection, flt *filter.Filter) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Exists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Exists(name string, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Flush",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Flush() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FlushIndex",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FlushIndex() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetBackend",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "GetBackend() Backend",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GetCollection(name string) (*dal.Collection, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "GetConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GroupBy",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "groupBy",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "aggregates",
                                    "Type": "[]filter.Aggregate"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GroupBy(collection *dal.Collection, groupBy []string, aggregates []filter.Aggregate, flt ...*filter.Filter) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Index",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Index(collection *dal.Collection, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "IndexConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexExists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IndexExists(collection *dal.Collection, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexInitialize( Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRemove",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRemove(collection *dal.Collection, ids []interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRetrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRetrieve(collection *dal.Collection, id interface{}) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Initialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Initialize() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Insert",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Insert(name string, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListCollections",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]string"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListCollections() ([]string, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListValues",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string][]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListValues(collection *dal.Collection, fields []string, flt *filter.Filter) (map[string][]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Maximum",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Maximum(collection *dal.Collection, field string, f ...*filter.Filter) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Minimum",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Minimum(collection *dal.Collection, field string, f ...*filter.Filter) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Ping",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "timeout",
                                    "Type": "time.Duration"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Ping(timeout time.Duration) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Query",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFns",
                                    "Type": "...IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Query(collection *dal.Collection, f *filter.Filter, resultFns ...IndexResultFunc) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "QueryFunc",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "QueryFunc(collection *dal.Collection, flt *filter.Filter, resultFn IndexResultFunc) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "RegisterCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Signature": "RegisterCollection(collection *dal.Collection)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Retrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Retrieve(name string, id interface{}, fields ...string) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetIndexer",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "indexConnString",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "SetIndexer(indexConnString dal.ConnectionString) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Sum",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Sum(collection *dal.Collection, field string, f ...*filter.Filter) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Supports",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "features",
                                    "Type": "...BackendFeature"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Supports(features ...BackendFeature) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Update",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Name": "target",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Update(name string, records *dal.RecordSet, target ...string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithAggregator",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Aggregator"
                                }
                            ],
                            "Signature": "WithAggregator(collection *dal.Collection) Aggregator",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithSearch",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filters",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Indexer"
                                }
                            ],
                            "Signature": "WithSearch(collection *dal.Collection, filters ...*filter.Filter) Indexer",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBNb25nb0JhY2tlbmQgc3RydWN0IHsKCUJhY2tlbmQKCUluZGV4ZXIKCn0K",
                    "HasUnexportedFields": true
                },
                "MultiIndex": {
                    "Name": "MultiIndex",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "AddIndexer",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "indexer",
                                    "Type": "Indexer"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "AddIndexer(indexer Indexer) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "AddIndexerByConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "cs",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "AddIndexerByConnectionString(cs string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteQuery",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteQuery(collection *dal.Collection, f *filter.Filter) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "EachSelectedIndex",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "operation",
                                    "Type": "IndexOperation"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "IndexerResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "EachSelectedIndex(collection *dal.Collection, operation IndexOperation, resultFn IndexerResultFunc) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FlushIndex",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FlushIndex() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetBackend",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "GetBackend() Backend",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Index",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Index(collection *dal.Collection, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "IndexConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexExists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IndexExists(collection *dal.Collection, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "backend",
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexInitialize(backend Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRemove",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRemove(collection *dal.Collection, ids []interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRetrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRetrieve(collection *dal.Collection, id interface{}) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListValues",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "filter",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string][]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListValues(collection *dal.Collection, fields []string, filter *filter.Filter) (map[string][]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "NewMultiIndex",
                            "Arguments": [
                                {
                                    "Name": "connectionStrings",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*MultiIndex"
                                }
                            ],
                            "Signature": "NewMultiIndex(connectionStrings ...string) *MultiIndex",
                            "Source": "ewoJcmV0dXJuICZNdWx0aUluZGV4e1JldHJpZXZhbFN0cmF0ZWd5OiBTZXF1ZW50aWFsLCBQZXJzaXN0U3RyYXRlZ3k6IEFsbCwgRGVsZXRlU3RyYXRlZ3k6IEFsbCwgSW5zcGVjdGlvblN0cmF0ZWd5OiBBbGwsIGNvbm5lY3Rpb25TdHJpbmdzOiBjb25uZWN0aW9uU3RyaW5ncywgaW5kZXhlcnM6IG1ha2UoW11JbmRleGVyLCAwKX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "Query",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filter",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFns",
                                    "Type": "...IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Query(collection *dal.Collection, filter *filter.Filter, resultFns ...IndexResultFunc) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "QueryFunc",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filter",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "QueryFunc(collection *dal.Collection, filter *filter.Filter, resultFn IndexResultFunc) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SelectIndex",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "operation",
                                    "Type": "IndexOperation"
                                },
                                {
                                    "Name": "lastIndexer",
                                    "Type": "int"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "[]IndexerResult"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "SelectIndex(collection *dal.Collection, operation IndexOperation, lastIndexer int) ([]IndexerResult, error)",
                            "IsPackageLevel": false
                        }
                    ],
                    "Fields": [
                        {
                            "Name": "RetrievalStrategy",
                            "Type": "IndexSelectionStrategy"
                        },
                        {
                            "Name": "PersistStrategy",
                            "Type": "IndexSelectionStrategy"
                        },
                        {
                            "Name": "DeleteStrategy",
                            "Type": "IndexSelectionStrategy"
                        },
                        {
                            "Name": "InspectionStrategy",
                            "Type": "IndexSelectionStrategy"
                        }
                    ],
                    "Source": "dHlwZSBNdWx0aUluZGV4IHN0cnVjdCB7CglSZXRyaWV2YWxTdHJhdGVneSAgSW5kZXhTZWxlY3Rpb25TdHJhdGVneQoJUGVyc2lzdFN0cmF0ZWd5ICAgIEluZGV4U2VsZWN0aW9uU3RyYXRlZ3kKCURlbGV0ZVN0cmF0ZWd5ICAgICBJbmRleFNlbGVjdGlvblN0cmF0ZWd5CglJbnNwZWN0aW9uU3RyYXRlZ3kgSW5kZXhTZWxlY3Rpb25TdHJhdGVneQoKfQo=",
                    "HasUnexportedFields": true
                },
                "NullIndexer": {
                    "Name": "NullIndexer",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "DeleteQuery",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteQuery(collection *dal.Collection, f filter.Filter) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FlushIndex",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FlushIndex() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetBackend",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "GetBackend() Backend",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Index",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Index(collection *dal.Collection, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "IndexConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexExists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IndexExists(collection *dal.Collection, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexInitialize( Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRemove",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRemove(collection *dal.Collection, ids []interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRetrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRetrieve(collection *dal.Collection, id interface{}) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListValues",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "filter",
                                    "Type": "filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string][]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListValues(collection *dal.Collection, fields []string, filter filter.Filter) (map[string][]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Query",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filter",
                                    "Type": "filter.Filter"
                                },
                                {
                                    "Name": "resultFns",
                                    "Type": "...IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Query(collection *dal.Collection, filter filter.Filter, resultFns ...IndexResultFunc) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "QueryFunc",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filter",
                                    "Type": "filter.Filter"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "QueryFunc(collection *dal.Collection, filter filter.Filter, resultFn IndexResultFunc) error",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBOdWxsSW5kZXhlciBzdHJ1Y3R7fQ=="
                },
                "RedisBackend": {
                    "Name": "RedisBackend",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "CreateCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "definition",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "CreateCollection(definition *dal.Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Delete",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Delete(name string, ids ...interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteCollection(name string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteQuery",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteQuery(collection *dal.Collection, flt *filter.Filter) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Exists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Exists(name string, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Flush",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Flush() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FlushIndex",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FlushIndex() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetBackend",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "GetBackend() Backend",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GetCollection(name string) (*dal.Collection, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "GetConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Index",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Index(collection *dal.Collection, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "IndexConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexExists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IndexExists(collection *dal.Collection, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexInitialize( Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRemove",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRemove(collection *dal.Collection, ids []interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRetrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRetrieve(collection *dal.Collection, id interface{}) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Initialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Initialize() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Insert",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "recordset",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Insert(name string, recordset *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListCollections",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]string"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListCollections() ([]string, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListValues",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string][]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListValues(collection *dal.Collection, fields []string, flt *filter.Filter) (map[string][]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Ping",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "timeout",
                                    "Type": "time.Duration"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Ping(timeout time.Duration) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Query",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFns",
                                    "Type": "...IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Query(collection *dal.Collection, f *filter.Filter, resultFns ...IndexResultFunc) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "QueryFunc",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "QueryFunc(collection *dal.Collection, flt *filter.Filter, resultFn IndexResultFunc) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "RegisterCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Signature": "RegisterCollection(collection *dal.Collection)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Retrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Retrieve(name string, id interface{}, fields ...string) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetIndexer",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "indexConnString",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "SetIndexer(indexConnString dal.ConnectionString) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Supports",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "features",
                                    "Type": "...BackendFeature"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Supports(features ...BackendFeature) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Update",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "recordset",
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Name": "target",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Update(name string, recordset *dal.RecordSet, target ...string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithAggregator",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Aggregator"
                                }
                            ],
                            "Signature": "WithAggregator(collection *dal.Collection) Aggregator",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithSearch",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filters",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Indexer"
                                }
                            ],
                            "Signature": "WithSearch(collection *dal.Collection, filters ...*filter.Filter) Indexer",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBSZWRpc0JhY2tlbmQgc3RydWN0IHsKCUJhY2tlbmQKCn0K",
                    "HasUnexportedFields": true
                },
                "ResultFunc": {
                    "Name": "ResultFunc",
                    "Source": "dHlwZSBSZXN1bHRGdW5jIGZ1bmMocHRyVG9JbnN0YW5jZSBpbnRlcmZhY2V7fSwgZXJyIGVycm9yKSAvLyB7fQo="
                },
                "SerializationFormat": {
                    "Name": "SerializationFormat",
                    "MetaType": "string",
                    "Source": "dHlwZSBTZXJpYWxpemF0aW9uRm9ybWF0IHN0cmluZw=="
                },
                "SqlBackend": {
                    "Name": "SqlBackend",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "AggregatorConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "AggregatorConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "AggregatorInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "parent",
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "AggregatorInitialize(parent Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Average",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Average(collection *dal.Collection, field string, f ...*filter.Filter) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Count",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "uint64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Count(collection *dal.Collection, f ...*filter.Filter) (uint64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "CreateCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "definition",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "CreateCollection(definition *dal.Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Delete",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Delete(name string, ids ...interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collectionName",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteCollection(collectionName string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteQuery",
                            "Comment": "DeleteQuery removes records using a filter",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteQuery(collection *dal.Collection, f *filter.Filter) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Exists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Exists(name string, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Flush",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Flush() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FlushIndex",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FlushIndex() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetBackend",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "GetBackend() Backend",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GetCollection(name string) (*dal.Collection, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "GetConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GroupBy",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "groupBy",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "aggregates",
                                    "Type": "[]filter.Aggregate"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GroupBy(collection *dal.Collection, groupBy []string, aggregates []filter.Aggregate, f ...*filter.Filter) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Index",
                            "Comment": "Index is a no-op, this should be handled by SqlBackend's Insert() function",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "records",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Index(collection *dal.Collection, records *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexConnectionString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.ConnectionString"
                                }
                            ],
                            "Signature": "IndexConnectionString() *dal.ConnectionString",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexExists",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IndexExists(collection *dal.Collection, id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexInitialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "parent",
                                    "Type": "Backend"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexInitialize(parent Backend) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRemove",
                            "Comment": "IndexRemove is a no-op, this should be handled by SqlBackend's Delete() function",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRemove(collection *dal.Collection, ids []interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IndexRetrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "IndexRetrieve(collection *dal.Collection, id interface{}) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Initialize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Initialize() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Insert",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "recordset",
                                    "Type": "*dal.RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Insert(name string, recordset *dal.RecordSet) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListCollections",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]string"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListCollections() ([]string, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListValues",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string][]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListValues(collection *dal.Collection, fields []string, f *filter.Filter) (map[string][]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Maximum",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Maximum(collection *dal.Collection, field string, f ...*filter.Filter) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Migrate",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Migrate() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Minimum",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Minimum(collection *dal.Collection, field string, f ...*filter.Filter) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Ping",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "timeout",
                                    "Type": "time.Duration"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Ping(timeout time.Duration) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Query",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFns",
                                    "Type": "...IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Query(collection *dal.Collection, f *filter.Filter, resultFns ...IndexResultFunc) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "QueryFunc",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "f",
                                    "Type": "*filter.Filter"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "IndexResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "QueryFunc(collection *dal.Collection, f *filter.Filter, resultFn IndexResultFunc) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "RegisterCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Signature": "RegisterCollection(collection *dal.Collection)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Retrieve",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Retrieve(name string, id interface{}, fields ...string) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetIndexer",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "indexConnString",
                                    "Type": "dal.ConnectionString"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "SetIndexer(indexConnString dal.ConnectionString) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Sum",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "f",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Sum(collection *dal.Collection, field string, f ...*filter.Filter) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Supports",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "features",
                                    "Type": "...BackendFeature"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Supports(features ...BackendFeature) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Update",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "recordset",
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Name": "target",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Update(name string, recordset *dal.RecordSet, target ...string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithAggregator",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Aggregator"
                                }
                            ],
                            "Signature": "WithAggregator(collection *dal.Collection) Aggregator",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithSearch",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Name": "filters",
                                    "Type": "...*filter.Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Indexer"
                                }
                            ],
                            "Signature": "WithSearch(collection *dal.Collection, filters ...*filter.Filter) Indexer",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBTcWxCYWNrZW5kIHN0cnVjdCB7CglCYWNrZW5kCglJbmRleGVyCglBZ2dyZWdhdG9yCgp9Cg==",
                    "HasUnexportedFields": true
                },
                "SqlInitFunc": {
                    "Name": "SqlInitFunc",
                    "Source": "dHlwZSBTcWxJbml0RnVuYyBmdW5jKCpTcWxCYWNrZW5kKSAoc3RyaW5nLCBzdHJpbmcsIGVycm9yKQ=="
                },
                "SqlPreInitFunc": {
                    "Name": "SqlPreInitFunc",
                    "Source": "dHlwZSBTcWxQcmVJbml0RnVuYyBmdW5jKCpTcWxCYWNrZW5kKQ=="
                }
            }
        },
        {
            "Name": "client",
            "CanonicalImportPath": "github.com/ghetzel/pivot/client",
            "ImportPath": "client",
            "ParentPackage": "pivot",
            "URL": "https://github.com/ghetzel/pivot",
            "Synopsis": "",
            "MainFunction": false,
            "CommentWordCount": 0,
            "LineCount": 205,
            "SourceLineCount": 166,
            "FunctionCount": 12,
            "TypeCount": 3,
            "ConstantCount": 1,
            "VariableCount": 0,
            "Statistics": {
                "Mean": 0,
                "StdDev": 0,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 0
            },
            "Files": [
                {
                    "Name": "client.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "net/http",
                            "Alias": "http"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/httputil",
                            "Alias": "httputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/util",
                            "Alias": "util"
                        }
                    ],
                    "Size": 4939,
                    "LineCount": 205,
                    "SourceLineCount": 166,
                    "FunctionCount": 12,
                    "TypeCount": 3,
                    "ConstantCount": 1,
                    "VariableCount": 0
                }
            ],
            "Constants": [
                {
                    "Name": "DefaultPivotUrl",
                    "Immutable": true,
                    "Expression": "`http://localhost:29029`",
                    "Value": "http://localhost:29029"
                }
            ],
            "Types": {
                "Pivot": {
                    "Name": "Pivot",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "Aggregate",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "query",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Aggregate(collection string, query interface{}) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Collection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Collection"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Collection(name string) (*dal.Collection, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Collections",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]string"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Collections() ([]string, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "CreateCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "def",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "CreateCollection(def *dal.Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "CreateRecord",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "...*dal.Record"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "CreateRecord(collection string, records ...*dal.Record) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteCollection(name string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteRecords",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "ids",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteRecords(collection string, ids ...interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetRecord",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GetRecord(collection string, id interface{}) (*dal.Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "New",
                            "Arguments": [
                                {
                                    "Name": "url",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Pivot"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "New(url string) (*Pivot, error)",
                            "Source": "ewoJaWYgdXJsID09IGBgIHsKCQl1cmwgPSBEZWZhdWx0UGl2b3RVcmwKCX0KCWlmIGNsaWVudCwgZXJyIDo9IGh0dHB1dGlsLk5ld0NsaWVudCh1cmwpOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gJlBpdm90e0NsaWVudDogY2xpZW50fSwgbmlsCgl9IGVsc2UgewoJCXJldHVybiBuaWwsIGVycgoJfQp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "Query",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "query",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "options",
                                    "Type": "*QueryOptions"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Query(collection string, query interface{}, options *QueryOptions) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Status",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*Status"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Status() (*Status, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "UpdateRecord",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "string"
                                },
                                {
                                    "Name": "records",
                                    "Type": "...*dal.Record"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "UpdateRecord(collection string, records ...*dal.Record) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBQaXZvdCBzdHJ1Y3R7ICpodHRwdXRpbC5DbGllbnQgfQ=="
                },
                "QueryOptions": {
                    "Name": "QueryOptions",
                    "MetaType": "struct",
                    "Fields": [
                        {
                            "Name": "Limit",
                            "Type": "int"
                        },
                        {
                            "Name": "Offset",
                            "Type": "int"
                        },
                        {
                            "Name": "Sort",
                            "Type": "[]string"
                        },
                        {
                            "Name": "Fields",
                            "Type": "[]string"
                        },
                        {
                            "Name": "Conjunction",
                            "Type": "string"
                        }
                    ],
                    "Source": "dHlwZSBRdWVyeU9wdGlvbnMgc3RydWN0IHsKCUxpbWl0ICAgICAgIGludCAgICAgIGBqc29uOiJsaW1pdCJgCglPZmZzZXQgICAgICBpbnQgICAgICBganNvbjoib2Zmc2V0ImAKCVNvcnQgICAgICAgIFtdc3RyaW5nIGBqc29uOiJzb3J0LG9taXRlbXB0eSJgCglGaWVsZHMgICAgICBbXXN0cmluZyBganNvbjoiZmllbGRzLG9taXRlbXB0eSJgCglDb25qdW5jdGlvbiBzdHJpbmcgICBganNvbjoiY29uanVuY3Rpb24sb21pdGVtcHR5ImAKfQ=="
                },
                "Status": {
                    "Name": "Status",
                    "Source": "dHlwZSBTdGF0dXMgPSB1dGlsLlN0YXR1cw=="
                }
            }
        },
        {
            "Name": "dal",
            "CanonicalImportPath": "github.com/ghetzel/pivot/dal",
            "ImportPath": "dal",
            "ParentPackage": "pivot",
            "URL": "https://github.com/ghetzel/pivot",
            "Synopsis": "",
            "MainFunction": false,
            "CommentWordCount": 2188,
            "LineCount": 4663,
            "SourceLineCount": 3503,
            "FunctionCount": 126,
            "TypeCount": 24,
            "ConstantCount": 27,
            "VariableCount": 13,
            "Statistics": {
                "Mean": 0.4558,
                "StdDev": 0.4846,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 1
            },
            "Files": [
                {
                    "Name": "collection.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "reflect",
                            "Alias": "reflect"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/structutil",
                            "Alias": "structutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        }
                    ],
                    "Size": 25587,
                    "LineCount": 863,
                    "SourceLineCount": 590,
                    "FunctionCount": 33,
                    "TypeCount": 3,
                    "ConstantCount": 5,
                    "VariableCount": 2
                },
                {
                    "Name": "collection_test.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "testing",
                            "Alias": "testing"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/stretchr/testify/require",
                            "Alias": "require"
                        }
                    ],
                    "Size": 7006,
                    "LineCount": 302,
                    "SourceLineCount": 245,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "connection.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "net/url",
                            "Alias": "url"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                            "Alias": "fileutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/jdxcode/netrc",
                            "Alias": "netrc"
                        }
                    ],
                    "Size": 6844,
                    "LineCount": 299,
                    "SourceLineCount": 239,
                    "FunctionCount": 22,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "constraint.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "reflect",
                            "Alias": "reflect"
                        }
                    ],
                    "Size": 1346,
                    "LineCount": 55,
                    "SourceLineCount": 35,
                    "FunctionCount": 2,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "errors.go",
                    "Imports": [
                        {
                            "PackageName": "errors",
                            "Alias": "errors"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        }
                    ],
                    "Size": 587,
                    "LineCount": 34,
                    "SourceLineCount": 25,
                    "FunctionCount": 4,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 2
                },
                {
                    "Name": "field.go",
                    "Imports": [
                        {
                            "PackageName": "encoding/json",
                            "Alias": "json"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "reflect",
                            "Alias": "reflect"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/fatih/structs",
                            "Alias": "structs"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        }
                    ],
                    "Size": 13668,
                    "LineCount": 491,
                    "SourceLineCount": 360,
                    "FunctionCount": 9,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 2
                },
                {
                    "Name": "field_test.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "testing",
                            "Alias": "testing"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/utils",
                            "Alias": "utils"
                        },
                        {
                            "PackageName": "github.com/stretchr/testify/require",
                            "Alias": "require"
                        }
                    ],
                    "Size": 12523,
                    "LineCount": 546,
                    "SourceLineCount": 406,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "formatters.go",
                    "Imports": [
                        {
                            "PackageName": "encoding/base32",
                            "Alias": "base32"
                        },
                        {
                            "PackageName": "encoding/base64",
                            "Alias": "base64"
                        },
                        {
                            "PackageName": "encoding/hex",
                            "Alias": "hex"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "regexp",
                            "Alias": "regexp"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/jbenet/go-base58",
                            "Alias": "go-base58"
                        }
                    ],
                    "Size": 7043,
                    "LineCount": 288,
                    "SourceLineCount": 225,
                    "FunctionCount": 13,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 4
                },
                {
                    "Name": "record.go",
                    "Imports": [
                        {
                            "PackageName": "encoding/json",
                            "Alias": "json"
                        },
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "reflect",
                            "Alias": "reflect"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                            "Alias": "maputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        }
                    ],
                    "Size": 12862,
                    "LineCount": 495,
                    "SourceLineCount": 379,
                    "FunctionCount": 18,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 1
                },
                {
                    "Name": "record_loader.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "reflect",
                            "Alias": "reflect"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/structutil",
                            "Alias": "structutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/util",
                            "Alias": "util"
                        }
                    ],
                    "Size": 5460,
                    "LineCount": 213,
                    "SourceLineCount": 166,
                    "FunctionCount": 0,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 2
                },
                {
                    "Name": "record_loader_test.go",
                    "Imports": [
                        {
                            "PackageName": "testing",
                            "Alias": "testing"
                        },
                        {
                            "PackageName": "github.com/stretchr/testify/require",
                            "Alias": "require"
                        }
                    ],
                    "Size": 1412,
                    "LineCount": 73,
                    "SourceLineCount": 57,
                    "FunctionCount": 0,
                    "TypeCount": 4,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "record_test.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "testing",
                            "Alias": "testing"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/stretchr/testify/require",
                            "Alias": "require"
                        }
                    ],
                    "Size": 10479,
                    "LineCount": 443,
                    "SourceLineCount": 344,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "recordset.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "reflect",
                            "Alias": "reflect"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        }
                    ],
                    "Size": 3615,
                    "LineCount": 142,
                    "SourceLineCount": 102,
                    "FunctionCount": 9,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "recordset_test.go",
                    "Imports": [
                        {
                            "PackageName": "testing",
                            "Alias": "testing"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/stretchr/testify/require",
                            "Alias": "require"
                        }
                    ],
                    "Size": 1820,
                    "LineCount": 81,
                    "SourceLineCount": 69,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "relationship.go",
                    "Size": 450,
                    "LineCount": 18,
                    "SourceLineCount": 15,
                    "FunctionCount": 1,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "types.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                            "Alias": "maputil"
                        }
                    ],
                    "Size": 2338,
                    "LineCount": 127,
                    "SourceLineCount": 102,
                    "FunctionCount": 4,
                    "TypeCount": 9,
                    "ConstantCount": 22,
                    "VariableCount": 0
                },
                {
                    "Name": "validators.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "net/url",
                            "Alias": "url"
                        },
                        {
                            "PackageName": "regexp",
                            "Alias": "regexp"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        }
                    ],
                    "Size": 4905,
                    "LineCount": 193,
                    "SourceLineCount": 144,
                    "FunctionCount": 11,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                }
            ],
            "Constants": [
                {
                    "Name": "ArrayType",
                    "Immutable": true,
                    "Expression": "`array`",
                    "Value": "array"
                },
                {
                    "Name": "AutoType",
                    "Immutable": true,
                    "Expression": "`auto`",
                    "Value": "auto"
                },
                {
                    "Name": "BooleanType",
                    "Immutable": true,
                    "Expression": "`bool`",
                    "Value": "bool"
                },
                {
                    "Name": "CollectionDelta",
                    "Type": "DeltaType",
                    "Immutable": true,
                    "Expression": "`collection`",
                    "Value": "collection"
                },
                {
                    "Name": "CollectionKeyNameIssue",
                    "Immutable": true
                },
                {
                    "Name": "CollectionKeyTypeIssue",
                    "Immutable": true
                },
                {
                    "Name": "CollectionNameIssue",
                    "Immutable": true
                },
                {
                    "Name": "FieldDelta",
                    "Immutable": true,
                    "Expression": "`field`",
                    "Value": "field"
                },
                {
                    "Name": "FieldLengthIssue",
                    "Immutable": true
                },
                {
                    "Name": "FieldMissingIssue",
                    "Immutable": true
                },
                {
                    "Name": "FieldNameIssue",
                    "Immutable": true
                },
                {
                    "Name": "FieldPropertyIssue",
                    "Immutable": true
                },
                {
                    "Name": "FieldTypeIssue",
                    "Immutable": true
                },
                {
                    "Name": "FloatType",
                    "Immutable": true,
                    "Expression": "`float`",
                    "Value": "float"
                },
                {
                    "Name": "IntType",
                    "Immutable": true,
                    "Expression": "`int`",
                    "Value": "int"
                },
                {
                    "Name": "ObjectType",
                    "Immutable": true,
                    "Expression": "`object`",
                    "Value": "object"
                },
                {
                    "Name": "PersistOperation",
                    "Type": "FieldOperation",
                    "Immutable": true,
                    "Expression": "iota"
                },
                {
                    "Name": "RawType",
                    "Immutable": true,
                    "Expression": "`raw`",
                    "Value": "raw"
                },
                {
                    "Name": "RetrieveOperation",
                    "Immutable": true
                },
                {
                    "Name": "SchemaCreate",
                    "Immutable": true
                },
                {
                    "Name": "SchemaEnforce",
                    "Immutable": true
                },
                {
                    "Name": "SchemaExpand",
                    "Immutable": true
                },
                {
                    "Name": "SchemaRemove",
                    "Immutable": true
                },
                {
                    "Name": "SchemaVerify",
                    "Type": "CollectionAction",
                    "Immutable": true,
                    "Expression": "iota"
                },
                {
                    "Name": "StringType",
                    "Type": "Type",
                    "Immutable": true,
                    "Expression": "`str`",
                    "Value": "str"
                },
                {
                    "Name": "TimeType",
                    "Immutable": true,
                    "Expression": "`time`",
                    "Value": "time"
                },
                {
                    "Name": "UnknownIssue",
                    "Type": "DeltaIssue",
                    "Immutable": true,
                    "Expression": "iota"
                }
            ],
            "Variables": [
                {
                    "Name": "Base32Encoder"
                },
                {
                    "Name": "Base58Encoder"
                },
                {
                    "Name": "Base64Encoder"
                },
                {
                    "Name": "CollectionNotFound",
                    "Expression": "errors.New(`Collection not found`)"
                },
                {
                    "Name": "DefaultFieldCodec",
                    "Expression": "`json`",
                    "Value": "json"
                },
                {
                    "Name": "DefaultIdentityField",
                    "Expression": "`id`",
                    "Value": "id"
                },
                {
                    "Name": "DefaultIdentityFieldType",
                    "Type": "Type",
                    "Expression": "IntType"
                },
                {
                    "Name": "DefaultStructIdentityFieldName",
                    "Expression": "`ID`",
                    "Value": "ID"
                },
                {
                    "Name": "FieldNestingSeparator",
                    "Type": "string",
                    "Expression": "`.`",
                    "Value": "."
                },
                {
                    "Name": "FieldNotFound",
                    "Expression": "errors.New(`Field not found`)"
                },
                {
                    "Name": "HexEncoder"
                },
                {
                    "Name": "IntIsProbablyUnixEpochSeconds",
                    "Type": "int64",
                    "Expression": "4294967296"
                },
                {
                    "Name": "RecordStructTag",
                    "Expression": "util.RecordStructTag"
                }
            ],
            "Functions": [
                {
                    "Name": "AddConnectionSchemeAlias",
                    "Arguments": [
                        {
                            "Name": "from",
                            "Type": "string"
                        },
                        {
                            "Name": "to",
                            "Type": "string"
                        }
                    ],
                    "Signature": "AddConnectionSchemeAlias(from string, to string)",
                    "Source": "ewoJc2NoZW1lQWxpYXNNYXBbZnJvbV0gPSB0bwp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "CurrentTime",
                    "Comment": "Returns the current time every time the field is persisted.",
                    "Arguments": [
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "op",
                            "Type": "FieldOperation"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "interface{}"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "CurrentTime(value interface{}, op FieldOperation) (interface{}, error)",
                    "Source": "ewoJaWYgb3AgPT0gUGVyc2lzdE9wZXJhdGlvbiB7CgkJcmV0dXJuIHRpbWUuTm93KCksIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gdmFsdWUsIG5pbAoJfQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "CurrentTimeIfUnset",
                    "Comment": "Returns the current time when the field is persisted if the current value is empty.",
                    "Arguments": [
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "op",
                            "Type": "FieldOperation"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "interface{}"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "CurrentTimeIfUnset(value interface{}, op FieldOperation) (interface{}, error)",
                    "Source": "ewoJcmV0dXJuIElmVW5zZXQoZnVuYyh2IGludGVyZmFjZXt9LCBvIEZpZWxkT3BlcmF0aW9uKSAoaW50ZXJmYWNle30sIGVycm9yKSB7CgkJaWYgbyA9PSBQZXJzaXN0T3BlcmF0aW9uIHsKCQkJcmV0dXJuIHRpbWUuTm93KCksIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiB2LCBuaWwKCQl9Cgl9KSh2YWx1ZSwgb3ApCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "GenerateUUID",
                    "Comment": "Generates a V4 UUID value if the existing value is empty.",
                    "Arguments": [
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "_",
                            "Type": "FieldOperation"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "interface{}"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "GenerateUUID(value interface{}, _ FieldOperation) (interface{}, error)",
                    "Source": "ewoJaWYgcmVjb3JkLCBvayA6PSB2YWx1ZS4oKlJlY29yZCk7IG9rIHsKCQl2YWx1ZSA9IHJlY29yZC5JRAoJfQoJaWYgdHlwZXV0aWwuSXNaZXJvKHZhbHVlKSB7CgkJdmFsdWUgPSBzdHJpbmd1dGlsLlVVSUQoKS5TdHJpbmcoKQoJfQoJcmV0dXJuIHZhbHVlLCBuaWwKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "GetValidator",
                    "Comment": "Retrieve a validator by name.  Used by the ValidatorConfig configuration on Field.",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        },
                        {
                            "Name": "args",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldValidatorFunc"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "GetValidator(name string, args interface{}) (FieldValidatorFunc, error)",
                    "Source": "ewoJc3dpdGNoIG5hbWUgewoJY2FzZSBgb25lLW9mYDoKCQlpZiB0eXBldXRpbC5Jc0FycmF5KGFyZ3MpIHsKCQkJcmV0dXJuIFZhbGlkYXRlSXNPbmVPZihzbGljZXV0aWwuU2xpY2VpZnkoYXJncykuLi4pLCBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJNdXN0IHNwZWNpZnkgYW4gYXJyYXkgb2YgdmFsdWVzIGZvciB2YWxpZGF0b3IgJ29uZS1vZiciKQoJCX0KCWNhc2UgYG5vdC16ZXJvYDoKCQlyZXR1cm4gVmFsaWRhdGVOb25aZXJvLCBuaWwKCWNhc2UgYG5vdC1lbXB0eWA6CgkJcmV0dXJuIFZhbGlkYXRlTm90RW1wdHksIG5pbAoJY2FzZSBgcG9zaXRpdmUtaW50ZWdlcmA6CgkJcmV0dXJuIFZhbGlkYXRlUG9zaXRpdmVJbnRlZ2VyLCBuaWwKCWNhc2UgYHBvc2l0aXZlLW9yLXplcm8taW50ZWdlcmA6CgkJcmV0dXJuIFZhbGlkYXRlUG9zaXRpdmVPclplcm9JbnRlZ2VyLCBuaWwKCWNhc2UgYHVybGA6CgkJcmV0dXJuIFZhbGlkYXRlSXNVUkwsIG5pbAoJY2FzZSBgbWF0Y2hgLCBgbWF0Y2gtYWxsYDoKCQlpZiB0eXBldXRpbC5Jc0FycmF5KGFyZ3MpIHsKCQkJcmV0dXJuIFZhbGlkYXRlTWF0Y2hBbGwoc2xpY2V1dGlsLlN0cmluZ2lmeShhcmdzKS4uLiksIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIk11c3Qgc3BlY2lmeSBhbiBhcnJheSBvZiB2YWx1ZXMgZm9yIHZhbGlkYXRvciAnbWF0Y2gnIikKCQl9CgljYXNlIGBtYXRjaC1hbnlgOgoJCWlmIHR5cGV1dGlsLklzQXJyYXkoYXJncykgewoJCQlyZXR1cm4gVmFsaWRhdGVNYXRjaEFueShzbGljZXV0aWwuU3RyaW5naWZ5KGFyZ3MpLi4uKSwgbmlsCgkJfSBlbHNlIHsKCQkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiTXVzdCBzcGVjaWZ5IGFuIGFycmF5IG9mIHZhbHVlcyBmb3IgdmFsaWRhdG9yICdtYXRjaC1hbnknIikKCQl9CglkZWZhdWx0OgoJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIlVua25vd24gdmFsaWRhdG9yICVxIiwgbmFtZSkKCX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "IsCollectionNotFoundErr",
                    "Arguments": [
                        {
                            "Name": "err",
                            "Type": "error"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "IsCollectionNotFoundErr(err error) bool",
                    "Source": "ewoJcmV0dXJuIChlcnIgPT0gQ29sbGVjdGlvbk5vdEZvdW5kKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "IsExistError",
                    "Arguments": [
                        {
                            "Name": "err",
                            "Type": "error"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "IsExistError(err error) bool",
                    "Source": "ewoJaWYgZXJyID09IG5pbCB7CgkJcmV0dXJuIGZhbHNlCgl9CglyZXR1cm4gc3RyaW5ncy5IYXNTdWZmaXgoZXJyLkVycm9yKCksIGAgYWxyZWFkeSBleGlzdHNgKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "IsFieldNotFoundErr",
                    "Arguments": [
                        {
                            "Name": "err",
                            "Type": "error"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "IsFieldNotFoundErr(err error) bool",
                    "Source": "ewoJcmV0dXJuIChlcnIgPT0gRmllbGROb3RGb3VuZCkKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "IsNotExistError",
                    "Arguments": [
                        {
                            "Name": "err",
                            "Type": "error"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "IsNotExistError(err error) bool",
                    "Source": "ewoJaWYgZXJyID09IG5pbCB7CgkJcmV0dXJuIGZhbHNlCgl9CglyZXR1cm4gc3RyaW5ncy5IYXNTdWZmaXgoZXJyLkVycm9yKCksIGAgZG9lcyBub3QgZXhpc3RgKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ShouldCreateCollection",
                    "Comment": "Takes a collection definition and any errors encountered while retrieving it, and determines\nwhether a CreateCollection() call should be made.",
                    "Arguments": [
                        {
                            "Name": "collection",
                            "Type": "*Collection"
                        },
                        {
                            "Name": "errs",
                            "Type": "...error"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "ShouldCreateCollection(collection *Collection, errs ...error) bool",
                    "Source": "ewoJaWYgY29sbGVjdGlvbiAhPSBuaWwgewoJCWlmIGNvbGxlY3Rpb24uQWx3YXlzQ3JlYXRlIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9Cglmb3IgXywgZXJyIDo9IHJhbmdlIGVycnMgewoJCWlmIElzQ29sbGVjdGlvbk5vdEZvdW5kRXJyKGVycikgewoJCQlyZXR1cm4gdHJ1ZQoJCX0KCX0KCXJldHVybiBmYWxzZQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TrimSpace",
                    "Arguments": [
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "_",
                            "Type": "FieldOperation"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "interface{}"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "TrimSpace(value interface{}, _ FieldOperation) (interface{}, error)",
                    "Source": "ewoJaWYgcmVjb3JkLCBvayA6PSB2YWx1ZS4oKlJlY29yZCk7IG9rIHsKCQl2YWx1ZSA9IHJlY29yZC5JRAoJfQoJaWYgdlN0ciwgZXJyIDo9IHN0cmluZ3V0aWwuVG9TdHJpbmcodmFsdWUpOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gc3RyaW5ncy5UcmltU3BhY2UodlN0ciksIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gdmFsdWUsIGVycgoJfQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ValidateAll",
                    "Comment": "Validate that all of the given validator functions pass.",
                    "Arguments": [
                        {
                            "Name": "validators",
                            "Type": "...FieldValidatorFunc"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldValidatorFunc"
                        }
                    ],
                    "Signature": "ValidateAll(validators ...FieldValidatorFunc) FieldValidatorFunc",
                    "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30pIGVycm9yIHsKCQlmb3IgXywgdmFsaWRhdG9yIDo9IHJhbmdlIHZhbGlkYXRvcnMgewoJCQlpZiBlcnIgOj0gdmFsaWRhdG9yKHZhbHVlKTsgZXJyICE9IG5pbCB7CgkJCQlyZXR1cm4gZXJyCgkJCX0KCQl9CgkJcmV0dXJuIG5pbAoJfQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ValidateIsOneOf",
                    "Comment": "Validate that the given value is among the given choices.",
                    "Arguments": [
                        {
                            "Name": "choices",
                            "Type": "...interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldValidatorFunc"
                        }
                    ],
                    "Signature": "ValidateIsOneOf(choices ...interface{}) FieldValidatorFunc",
                    "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30pIGVycm9yIHsKCQlmb3IgXywgY2hvaWNlIDo9IHJhbmdlIGNob2ljZXMgewoJCQlpZiBvaywgZXJyIDo9IHN0cmluZ3V0aWwuUmVsYXhlZEVxdWFsKGNob2ljZSwgdmFsdWUpOyBlcnIgPT0gbmlsICYmIG9rIHsKCQkJCXJldHVybiBuaWwKCQkJfQoJCX0KCQlyZXR1cm4gZm10LkVycm9yZigidmFsdWUgbXVzdCBiZSBvbmUgb2Y6ICUrdiIsIGNob2ljZXMpCgl9Cn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ValidateIsURL",
                    "Comment": "Validate that the value is a URL with a non-empty scheme and host component.",
                    "Arguments": [
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "ValidateIsURL(value interface{}) error",
                    "Source": "ewoJaWYgdSwgZXJyIDo9IHVybC5QYXJzZSh0eXBldXRpbC5TdHJpbmcodmFsdWUpKTsgZXJyID09IG5pbCB7CgkJaWYgdS5TY2hlbWUgPT0gYGAgfHwgdS5Ib3N0ID09IGBgIHx8IHUuUGF0aCA9PSBgYCB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJJbnZhbGlkIFVSTCIpCgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gZXJyCgl9CglyZXR1cm4gbmlsCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ValidateMatchAll",
                    "Comment": "Validate that the given value matches all of the given regular expressions.",
                    "Arguments": [
                        {
                            "Name": "patterns",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldValidatorFunc"
                        }
                    ],
                    "Signature": "ValidateMatchAll(patterns ...string) FieldValidatorFunc",
                    "Source": "ewoJcHJ4IDo9IG1ha2UoW10qcmVnZXhwLlJlZ2V4cCwgbGVuKHBhdHRlcm5zKSkKCWZvciBpLCByeHMgOj0gcmFuZ2UgcGF0dGVybnMgewoJCXByeFtpXSA9IHJlZ2V4cC5NdXN0Q29tcGlsZShyeHMpCgl9CglyZXR1cm4gZnVuYyh2YWx1ZSBpbnRlcmZhY2V7fSkgZXJyb3IgewoJCWZvciBfLCByeCA6PSByYW5nZSBwcnggewoJCQlpZiAhcnguTWF0Y2hTdHJpbmcodHlwZXV0aWwuU3RyaW5nKHZhbHVlKSkgewoJCQkJcmV0dXJuIGZtdC5FcnJvcmYoIlZhbHVlIGRvZXMgbm90IG1hdGNoIHBhdHRlcm4gJXEiLCByeC5TdHJpbmcoKSkKCQkJfQoJCX0KCQlyZXR1cm4gbmlsCgl9Cn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ValidateMatchAny",
                    "Comment": "Validate that the given value matches at least one of the given regular expressions.",
                    "Arguments": [
                        {
                            "Name": "patterns",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldValidatorFunc"
                        }
                    ],
                    "Signature": "ValidateMatchAny(patterns ...string) FieldValidatorFunc",
                    "Source": "ewoJcHJ4IDo9IG1ha2UoW10qcmVnZXhwLlJlZ2V4cCwgbGVuKHBhdHRlcm5zKSkKCWZvciBpLCByeHMgOj0gcmFuZ2UgcGF0dGVybnMgewoJCXByeFtpXSA9IHJlZ2V4cC5NdXN0Q29tcGlsZShyeHMpCgl9CglyZXR1cm4gZnVuYyh2YWx1ZSBpbnRlcmZhY2V7fSkgZXJyb3IgewoJCWZvciBfLCByeCA6PSByYW5nZSBwcnggewoJCQlpZiByeC5NYXRjaFN0cmluZyh0eXBldXRpbC5TdHJpbmcodmFsdWUpKSB7CgkJCQlyZXR1cm4gbmlsCgkJCX0KCQl9CgkJcmV0dXJuIGZtdC5FcnJvcmYoIlZhbHVlIGRvZXMgbm90IG1hdGNoIGFueSB2YWxpZCBwYXR0ZXJuIikKCX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ValidateNonZero",
                    "Comment": "Validate that the given value is not a zero value (false, 0, 0.0, \"\", null).",
                    "Arguments": [
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "ValidateNonZero(value interface{}) error",
                    "Source": "ewoJaWYgdHlwZXV0aWwuSXNaZXJvKHZhbHVlKSB7CgkJcmV0dXJuIGZtdC5FcnJvcmYoImV4cGVjdGVkIG5vbi16ZXJvIHZhbHVlLCBnb3Q6ICV2IiwgdmFsdWUpCgl9CglyZXR1cm4gbmlsCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ValidateNotEmpty",
                    "Comment": "Validate that the given value is not a zero value, and if it's a string, that the string\ndoes not contain only whitespace.",
                    "Arguments": [
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "ValidateNotEmpty(value interface{}) error",
                    "Source": "ewoJaWYgdHlwZXV0aWwuSXNFbXB0eSh2YWx1ZSkgewoJCXJldHVybiBmbXQuRXJyb3JmKCJleHBlY3RlZCBub24tZW1wdHkgdmFsdWUsIGdvdDogJXYiLCB2YWx1ZSkKCX0KCXJldHVybiBuaWwKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ValidatePositiveInteger",
                    "Comment": "Validate that the given value is an integer \u003e 0.",
                    "Arguments": [
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "ValidatePositiveInteger(value interface{}) error",
                    "Source": "ewoJaWYgdiwgZXJyIDo9IHN0cmluZ3V0aWwuQ29udmVydFRvSW50ZWdlcih2YWx1ZSk7IGVyciA9PSBuaWwgewoJCWlmIHYgPD0gMCB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJleHBlY3RlZCB2YWx1ZSA+IDAsIGdvdDogJXYiLCB2KQoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIGVycgoJfQoJcmV0dXJuIG5pbAp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ValidatePositiveOrZeroInteger",
                    "Comment": "Validate that the given value is an integer \u003e= 0.",
                    "Arguments": [
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "ValidatePositiveOrZeroInteger(value interface{}) error",
                    "Source": "ewoJaWYgdiwgZXJyIDo9IHN0cmluZ3V0aWwuQ29udmVydFRvSW50ZWdlcih2YWx1ZSk7IGVyciA9PSBuaWwgewoJCWlmIHYgPCAwIHsKCQkJcmV0dXJuIGZtdC5FcnJvcmYoImV4cGVjdGVkIHZhbHVlID49IDAsIGdvdDogJXYiLCB2KQoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIGVycgoJfQoJcmV0dXJuIG5pbAp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ValidatorFromMap",
                    "Comment": "Retrieve a validator by name.  Used by the ValidatorConfig configuration on Field.",
                    "Arguments": [
                        {
                            "Name": "in",
                            "Type": "map[string]interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldValidatorFunc"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "ValidatorFromMap(in map[string]interface{}) (FieldValidatorFunc, error)",
                    "Source": "ewoJdmFsaWRhdG9ycyA6PSBtYWtlKFtdRmllbGRWYWxpZGF0b3JGdW5jLCAwKQoJZm9yIG5hbWUsIGRlZm4gOj0gcmFuZ2UgaW4gewoJCWlmIHZhbGlkYXRvciwgZXJyIDo9IEdldFZhbGlkYXRvcihuYW1lLCBkZWZuKTsgZXJyID09IG5pbCB7CgkJCXZhbGlkYXRvcnMgPSBhcHBlbmQodmFsaWRhdG9ycywgdmFsaWRhdG9yKQoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkludmFsaWQgdmFsaWRhdG9yIGNvbmZpZ3VyYXRpb24gJXY6ICV2IiwgbmFtZSwgZXJyKQoJCX0KCX0KCXJldHVybiBWYWxpZGF0ZUFsbCh2YWxpZGF0b3JzLi4uKSwgbmlsCn0=",
                    "IsPackageLevel": true
                }
            ],
            "Tests": [
                {
                    "Name": "TestCollectionExtractValueFromRelationship",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestCollectionExtractValueFromRelationship(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglncm91cHMgOj0gTmV3Q29sbGVjdGlvbihgVGVzdENvbGxlY3Rpb25FeHRyYWN0VmFsdWVGcm9tUmVsYXRpb25zaGlwR3JvdXBzYCwgRmllbGR7TmFtZTogYG5hbWVgLCBUeXBlOiBTdHJpbmdUeXBlfSkKCXVzZXJzIDo9IE5ld0NvbGxlY3Rpb24oYFRlc3RDb2xsZWN0aW9uRXh0cmFjdFZhbHVlRnJvbVJlbGF0aW9uc2hpcFVzZXJzYCwgRmllbGR7TmFtZTogYG5hbWVgLCBUeXBlOiBTdHJpbmdUeXBlfSwgRmllbGR7TmFtZTogYGdyb3VwX2lkYCwgVHlwZTogSW50VHlwZSwgQmVsb25nc1RvOiBncm91cHN9LCBGaWVsZHtOYW1lOiBgYWdlYCwgVHlwZTogSW50VHlwZX0pCgliYWNrZW5kIDo9IG5ldyhudWxsQmFja2VuZCkKCWJhY2tlbmQuUmVnaXN0ZXJDb2xsZWN0aW9uKHVzZXJzKQoJYmFja2VuZC5SZWdpc3RlckNvbGxlY3Rpb24oZ3JvdXBzKQoJZiwgb2sgOj0gdXNlcnMuR2V0RmllbGQoYGdyb3VwX2lkYCkKCWFzc2VydC5UcnVlKG9rKQoJa2V5cywgZXJyIDo9IHVzZXJzLmV4dHJhY3RWYWx1ZUZyb21SZWxhdGlvbnNoaXAoJmYsICZ0ZXN0R3JvdXB7SUQ6IDU0MzJ9LCBQZXJzaXN0T3BlcmF0aW9uKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDU0MzIsIGtleXMpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestCollectionIsExpired",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestCollectionIsExpired(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0Q29sbGVjdGlvbklzRXhwaXJlZGAsIElkZW50aXR5RmllbGRUeXBlOiBTdHJpbmdUeXBlLCBUaW1lVG9MaXZlRmllbGQ6IGB0dGxgfQoJYXNzZXJ0LkZhbHNlKGNvbGxlY3Rpb24uSXNFeHBpcmVkKE5ld1JlY29yZChgdGVzdDFgKSkpCglhc3NlcnQuRmFsc2UoY29sbGVjdGlvbi5Jc0V4cGlyZWQoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgbmlsKSkpCglhc3NlcnQuRmFsc2UoY29sbGVjdGlvbi5Jc0V4cGlyZWQoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgMCkpKQoJYXNzZXJ0LkZhbHNlKGNvbGxlY3Rpb24uSXNFeHBpcmVkKE5ld1JlY29yZChgdGVzdDFgKS5TZXQoYHR0bGAsIGBgKSkpCglhc3NlcnQuRmFsc2UoY29sbGVjdGlvbi5Jc0V4cGlyZWQoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgZmFsc2UpKSkKCWFzc2VydC5GYWxzZShjb2xsZWN0aW9uLklzRXhwaXJlZChOZXdSZWNvcmQoYHRlc3QxYCkuU2V0KGB0dGxgLCB0aW1lLk5vdygpLkFkZCh0aW1lLlNlY29uZCkpKSkKCWFzc2VydC5GYWxzZShjb2xsZWN0aW9uLklzRXhwaXJlZChOZXdSZWNvcmQoYHRlc3QxYCkuU2V0KGB0dGxgLCB0aW1lLk5vdygpLlVuaXgoKSs2MCkpKQoJYXNzZXJ0LlRydWUoY29sbGVjdGlvbi5Jc0V4cGlyZWQoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgdGltZS5Ob3coKS5BZGQoLTEqdGltZS5OYW5vc2Vjb25kKSkpKQoJYXNzZXJ0LlRydWUoY29sbGVjdGlvbi5Jc0V4cGlyZWQoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgdGltZS5Ob3coKS5Vbml4KCktNjApKSkKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestCollectionMapFromRecord",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestCollectionMapFromRecord(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9IE5ld0NvbGxlY3Rpb24oYFRlc3RDb2xsZWN0aW9uU3RydWN0VG9SZWNvcmRgKQoJY29sbGVjdGlvbi5JZGVudGl0eUZpZWxkRm9ybWF0dGVyID0gZnVuYyhpZCBpbnRlcmZhY2V7fSwgb3AgRmllbGRPcGVyYXRpb24pIChpbnRlcmZhY2V7fSwgZXJyb3IpIHsKCQlpZiByZWNvcmQsIG9rIDo9IGlkLigqUmVjb3JkKTsgb2sgewoJCQlpZCA9IHJlY29yZC5JRAoJCX0KCQlyZXR1cm4gZm10LlNwcmludGYoIklEPCV2PiIsIGlkKSwgbmlsCgl9Cgljb2xsZWN0aW9uLkFkZEZpZWxkcyhbXUZpZWxke3tOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGV9LCB7TmFtZTogYGVuYWJsZWRgLCBUeXBlOiBCb29sZWFuVHlwZSwgRGVmYXVsdFZhbHVlOiB0cnVlfSwge05hbWU6IGBhZ2VgLCBUeXBlOiBJbnRUeXBlfX0uLi4pCglydiwgZXJyIDo9IGNvbGxlY3Rpb24uTWFwRnJvbVJlY29yZChOZXdSZWNvcmQoYHRlc3RgKS5TZXQoYG5hbWVgLCBgdGVzdGVyYCkuU2V0KGBhZ2VgLCA0MikpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWxWYWx1ZXMobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgaWRgOiBgSUQ8dGVzdD5gLCBgbmFtZWA6IGB0ZXN0ZXJgLCBgZW5hYmxlZGA6IHRydWUsIGBhZ2VgOiA0Mn0sIHJ2KQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestCollectionStructToRecord",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestCollectionStructToRecord(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9IE5ld0NvbGxlY3Rpb24oYFRlc3RDb2xsZWN0aW9uU3RydWN0VG9SZWNvcmRgKQoJY29sbGVjdGlvbi5BZGRGaWVsZHMoW11GaWVsZHt7TmFtZTogYG5hbWVgLCBUeXBlOiBTdHJpbmdUeXBlfSwge05hbWU6IGBlbmFibGVkYCwgVHlwZTogQm9vbGVhblR5cGV9LCB7TmFtZTogYGFnZWAsIFR5cGU6IEludFR5cGV9fS4uLikKCXR5cGUgVGVzdFJlY29yZCBzdHJ1Y3QgewoJCU5hbWUgICAgICBzdHJpbmcgYHBpdm90OiJuYW1lImAKCQlFbmFibGVkICAgYm9vbCAgIGBwaXZvdDoiZW5hYmxlZCxvbWl0ZW1wdHkiYAoJCUFjdHVhbEFnZSBpbnQgICAgYHBpdm90OiJhZ2UiYAoJCUFnZSAgICAgICBpbnQKCX0KCXRlc3RSZWNvcmQgOj0gVGVzdFJlY29yZHtOYW1lOiBgdGVzdGVyYCwgQWN0dWFsQWdlOiA0Mn0KCXJlY29yZCwgZXJyIDo9IGNvbGxlY3Rpb24uU3RydWN0VG9SZWNvcmQoJnRlc3RSZWNvcmQpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuTm90TmlsKHJlY29yZCkKCWFzc2VydC5OaWwocmVjb3JkLklEKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKGB0ZXN0ZXJgLCByZWNvcmQuR2V0KGBuYW1lYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoNDIsIHJlY29yZC5HZXQoYGFnZWApKQoJdHlwZSBUZXN0UmVjb3JkMiBzdHJ1Y3QgewoJCUlEICAgICAgICBpbnQKCQlOYW1lICAgICAgc3RyaW5nIGBwaXZvdDoibmFtZSJgCgkJRW5hYmxlZCAgIGJvb2wgICBgcGl2b3Q6ImVuYWJsZWQsb21pdGVtcHR5ImAKCQlBY3R1YWxBZ2UgaW50ICAgIGBwaXZvdDoiYWdlImAKCQlBZ2UgICAgICAgaW50Cgl9Cgl0ZXN0UmVjb3JkMiA6PSBUZXN0UmVjb3JkMntJRDogMTEsIE5hbWU6IGB0ZXN0ZXJgfQoJcmVjb3JkLCBlcnIgPSBjb2xsZWN0aW9uLlN0cnVjdFRvUmVjb3JkKCZ0ZXN0UmVjb3JkMikKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5Ob3ROaWwocmVjb3JkKQoJYXNzZXJ0LkVxdWFsKDMsIGxlbihyZWNvcmQuRmllbGRzKSkKCWFzc2VydC5FcXVhbCgxMSwgcmVjb3JkLklEKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0ZXJgLCByZWNvcmQuR2V0KGBuYW1lYCkpCglhc3NlcnQuRXF1YWwoZmFsc2UsIHJlY29yZC5HZXQoYGVuYWJsZWRgKSkKCWFzc2VydC5FcXVhbFZhbHVlcygwLCByZWNvcmQuR2V0KGBhZ2VgKSkKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestCollectionStructToRecordRelated",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestCollectionStructToRecordRelated(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglncm91cHMgOj0gTmV3Q29sbGVjdGlvbihgVGVzdENvbGxlY3Rpb25TdHJ1Y3RUb1JlY29yZEdyb3Vwc2AsIEZpZWxke05hbWU6IGBuYW1lYCwgVHlwZTogU3RyaW5nVHlwZX0pCgl1c2VycyA6PSBOZXdDb2xsZWN0aW9uKGBUZXN0Q29sbGVjdGlvblN0cnVjdFRvUmVjb3JkVXNlcnNgLCBGaWVsZHtOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGV9LCBGaWVsZHtOYW1lOiBgZ3JvdXBfaWRgLCBUeXBlOiBJbnRUeXBlLCBCZWxvbmdzVG86IGdyb3Vwc30sIEZpZWxke05hbWU6IGBhZ2VgLCBUeXBlOiBJbnRUeXBlfSkKCWJhY2tlbmQgOj0gbmV3KG51bGxCYWNrZW5kKQoJYmFja2VuZC5SZWdpc3RlckNvbGxlY3Rpb24odXNlcnMpCgliYWNrZW5kLlJlZ2lzdGVyQ29sbGVjdGlvbihncm91cHMpCglyZWNvcmQsIGVyciA6PSB1c2Vycy5TdHJ1Y3RUb1JlY29yZCgmdGVzdFVzZXJ7TmFtZTogYHRlc3RlcmAsIEdyb3VwOiAmdGVzdEdyb3Vwe0lEOiA1NDMyfSwgQWdlOiA0Mn0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuTm90TmlsKHJlY29yZCkKCWFzc2VydC5aZXJvKHJlY29yZC5JRCkKCWFzc2VydC5FcXVhbChgdGVzdGVyYCwgcmVjb3JkLkdldChgbmFtZWApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDU0MzIsIHJlY29yZC5HZXQoYGdyb3VwX2lkYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoNDIsIHJlY29yZC5HZXQoYGFnZWApKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestCollectionTTLField",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestCollectionTTLField(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0Q29sbGVjdGlvblRUTEZpZWxkYCwgSWRlbnRpdHlGaWVsZFR5cGU6IFN0cmluZ1R5cGUsIFRpbWVUb0xpdmVGaWVsZDogYHR0bGB9Cglhc3NlcnQuWmVybyhjb2xsZWN0aW9uLlRUTChOZXdSZWNvcmQoYHRlc3QxYCkpKQoJYXNzZXJ0Llplcm8oY29sbGVjdGlvbi5UVEwoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgbmlsKSkpCglhc3NlcnQuWmVybyhjb2xsZWN0aW9uLlRUTChOZXdSZWNvcmQoYHRlc3QxYCkuU2V0KGB0dGxgLCAwKSkpCglhc3NlcnQuWmVybyhjb2xsZWN0aW9uLlRUTChOZXdSZWNvcmQoYHRlc3QxYCkuU2V0KGB0dGxgLCBgYCkpKQoJYXNzZXJ0Llplcm8oY29sbGVjdGlvbi5UVEwoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgZmFsc2UpKSkKCWFzc2VydC5Ob3RaZXJvKGNvbGxlY3Rpb24uVFRMKE5ld1JlY29yZChgdGVzdDFgKS5TZXQoYHR0bGAsIHRpbWUuTm93KCkuQWRkKHRpbWUuU2Vjb25kKSkpKQoJYXNzZXJ0Lk5vdFplcm8oY29sbGVjdGlvbi5UVEwoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgdGltZS5Ob3coKS5Vbml4KCkrNjApKSkKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestCollectionValidator",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestCollectionValidator(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0Q29sbGVjdGlvblZhbGlkYXRvcmAsIElkZW50aXR5RmllbGRUeXBlOiBTdHJpbmdUeXBlLCBQcmVTYXZlVmFsaWRhdG9yOiBmdW5jKHJlY29yZCAqUmVjb3JkKSBlcnJvciB7CgkJaWYgZm10LlNwcmludGYoIiV2IiwgcmVjb3JkLklEKSA9PSBgdHdvYCB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJJRCBjYW5ub3QgYmUgJ3R3bycgZm9yIHJlYXNvbnMiKQoJCX0KCQlyZXR1cm4gbmlsCgl9fQoJYXNzZXJ0Lk5vRXJyb3IoY29sbGVjdGlvbi5WYWxpZGF0ZVJlY29yZChOZXdSZWNvcmQoYG9uZWApLCBQZXJzaXN0T3BlcmF0aW9uKSkKCWFzc2VydC5FcnJvcihjb2xsZWN0aW9uLlZhbGlkYXRlUmVjb3JkKE5ld1JlY29yZChgdHdvYCksIFBlcnNpc3RPcGVyYXRpb24pKQoJYXNzZXJ0Lk5vRXJyb3IoY29sbGVjdGlvbi5WYWxpZGF0ZVJlY29yZChOZXdSZWNvcmQoYHRocmVlYCksIFBlcnNpc3RPcGVyYXRpb24pKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFieldConvertValueArray",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFieldConvertValueArray(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IEFycmF5VHlwZX0KCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoW11pbnRlcmZhY2V7fXt9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKG1ha2UoW11pbnRlcmZhY2V7fSwgMCksIHZhbHVlKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuTmlsKHZhbHVlKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShbXWludGVyZmFjZXt9ezEsIDIsIDN9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317MSwgMiwgM30sIHZhbHVlKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShbXXN0cmluZ3tgMWAsIGAyYCwgYDNgfSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2AxYCwgYDJgLCBgM2B9LCB2YWx1ZSkKCWZpZWxkLlJlcXVpcmVkID0gdHJ1ZQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShbXWludGVyZmFjZXt9e30pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwobWFrZShbXWludGVyZmFjZXt9LCAwKSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYWtlKFtdaW50ZXJmYWNle30sIDApLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoW11ib29se3RydWUsIHRydWUsIGZhbHNlfSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e3RydWUsIHRydWUsIGZhbHNlfSwgdmFsdWUpCglmaWVsZC5EZWZhdWx0VmFsdWUgPSBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXtgYWAsIGBiYCwgYGNgfSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2BhYCwgYGJgLCBgY2B9LCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoW11pbnQ2NHs5LCA4LCA3fSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2ludDY0KDkpLCBpbnQ2NCg4KSwgaW50NjQoNyl9LCB2YWx1ZSkKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFieldConvertValueBool",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFieldConvertValueBool(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IEJvb2xlYW5UeXBlfQoJZm9yIF8sIHYgOj0gcmFuZ2UgW11pbnRlcmZhY2V7fXt0cnVlLCBgdHJ1ZWAsIGBUcnVlYCwgYFRSVUVgLCBgeWVzYCwgYG9uYCwgYFlFU2AsIGBPTmAsIDEsIC00LCAzLjE0LCA0MiwgYGRlbm5pc2B9IHsKCQl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKHYpCgkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCWFzc2VydC5FcXVhbCh0cnVlLCB2YWx1ZSwgZm10LlNwcmludGYoIm91dHB1dDogJVQoJXYpIC0+ICVUKCV2KSIsIHYsIHYsIHZhbHVlLCB2YWx1ZSkpCgl9Cglmb3IgXywgdiA6PSByYW5nZSBbXWludGVyZmFjZXt9e2ZhbHNlLCBgZmFsc2VgLCBgRmFsc2VgLCBgRkFMU0VgLCBgbm9gLCBgb2ZmYCwgYE5PYCwgYE9GRmAsIDB9IHsKCQl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKHYpCgkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCWFzc2VydC5FcXVhbChmYWxzZSwgdmFsdWUsIGZtdC5TcHJpbnRmKCJvdXRwdXQ6ICVUKCV2KSAtPiAlVCgldikiLCB2LCB2LCB2YWx1ZSwgdmFsdWUpKQoJfQoJZmllbGQuUmVxdWlyZWQgPSB0cnVlCglmb3IgXywgdiA6PSByYW5nZSBbXWludGVyZmFjZXt9e3RydWUsIGB0cnVlYCwgYFRydWVgLCBgVFJVRWAsIGB5ZXNgLCBgb25gLCBgWUVTYCwgYE9OYCwgMSwgLTQsIDMuMTQsIDQyLCBgZGVubmlzYH0gewoJCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUodikKCQlhc3NlcnQuTm9FcnJvcihlcnIpCgkJYXNzZXJ0LkVxdWFsKHRydWUsIHZhbHVlLCBmbXQuU3ByaW50Zigib3V0cHV0OiAlVCgldikgLT4gJVQoJXYpIiwgdiwgdiwgdmFsdWUsIHZhbHVlKSkKCX0KCWZvciBfLCB2IDo9IHJhbmdlIFtdaW50ZXJmYWNle317ZmFsc2UsIGBmYWxzZWAsIGBGYWxzZWAsIGBGQUxTRWAsIGBub2AsIGBvZmZgLCBgTk9gLCBgT0ZGYCwgbmlsLCAwfSB7CgkJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZSh2KQoJCWFzc2VydC5Ob0Vycm9yKGVycikKCQlhc3NlcnQuRXF1YWwoZmFsc2UsIHZhbHVlLCBmbXQuU3ByaW50Zigib3V0cHV0OiAlVCgldikgLT4gJVQoJXYpIiwgdiwgdiwgdmFsdWUsIHZhbHVlKSkKCX0KCWZpZWxkLkRlZmF1bHRWYWx1ZSA9IHRydWUKCWZvciBfLCB2IDo9IHJhbmdlIFtdaW50ZXJmYWNle317dHJ1ZSwgYHRydWVgLCBgVHJ1ZWAsIGBUUlVFYCwgYHllc2AsIGBvbmAsIGBZRVNgLCBgT05gLCAxLCAtNCwgMy4xNCwgNDIsIGBkZW5uaXNgfSB7CgkJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZSh2KQoJCWFzc2VydC5Ob0Vycm9yKGVycikKCQlhc3NlcnQuRXF1YWwodHJ1ZSwgdmFsdWUsIGZtdC5TcHJpbnRmKCJvdXRwdXQ6ICVUKCV2KSAtPiAlVCgldikiLCB2LCB2LCB2YWx1ZSwgdmFsdWUpKQoJfQoJZm9yIF8sIHYgOj0gcmFuZ2UgW11pbnRlcmZhY2V7fXtmYWxzZSwgYGZhbHNlYCwgYEZhbHNlYCwgYEZBTFNFYCwgYG5vYCwgYG9mZmAsIGBOT2AsIGBPRkZgLCBuaWwsIDB9IHsKCQl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKHYpCgkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCWFzc2VydC5FcXVhbCh0cnVlLCB2YWx1ZSwgZm10LlNwcmludGYoIm91dHB1dDogJVQoJXYpIC0+ICVUKCV2KSIsIHYsIHYsIHZhbHVlLCB2YWx1ZSkpCgl9Cgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbCh0cnVlLCB2YWx1ZSwgZm10LlNwcmludGYoIm91dHB1dDogbmlsIC0+ICVUKCV2KSIsIHZhbHVlLCB2YWx1ZSkpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFieldConvertValueFloat",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFieldConvertValueFloat(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IEZsb2F0VHlwZX0KCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYGApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWxWYWx1ZXMoZmxvYXQ2NCgwKSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChmbG9hdDY0KDApLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYDMuMTQxNTk3YCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChmbG9hdDY0KDMuMTQxNTk3KSwgdmFsdWUpCglmaWVsZC5SZXF1aXJlZCA9IHRydWUKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYGApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgwKSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChmbG9hdDY0KDApLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYDIuNzE4MjhgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoMi43MTgyOCksIHZhbHVlKQoJZmllbGQuRGVmYXVsdFZhbHVlID0gaW50MzIoNjkpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKGBgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoNjkpLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoNjkpLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoMC4wMDAwMDAwMDAwMDEpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgwLjAwMDAwMDAwMDAwMSksIHZhbHVlKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFieldConvertValueInteger",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFieldConvertValueInteger(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IEludFR5cGV9Cgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKGBgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKGludDY0KDApLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGludDY0KDApLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYDEyMzRgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGludDY0KDEyMzQpLCB2YWx1ZSkKCWZpZWxkLlJlcXVpcmVkID0gdHJ1ZQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShgYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChpbnQ2NCgwKSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChpbnQ2NCgwKSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKGA5ODc2YCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChpbnQ2NCg5ODc2KSwgdmFsdWUpCglmaWVsZC5EZWZhdWx0VmFsdWUgPSBpbnQzMig2OSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYGApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoaW50NjQoNjkpLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGludDY0KDY5KSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKDQyKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGludDY0KDQyKSwgdmFsdWUpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFieldConvertValueObject",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFieldConvertValueObject(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IE9iamVjdFR5cGV9Cgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG1hcFtzdHJpbmddaW50ZXJmYWNle317fSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbFZhbHVlcyhtYWtlKG1hcFtzdHJpbmddaW50ZXJmYWNle30pLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0Lk5pbCh2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgdmFsdWVgOiAxMjN9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddaW50ZXJmYWNle317YHZhbHVlYDogMTIzfSwgdmFsdWUpCgl0eXBlIGZpZWxkQ29udmVydFN0cnVjdCBzdHJ1Y3QgewoJCU5hbWUgIHN0cmluZwoJCVZhbHVlIGludAoJfQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShmaWVsZENvbnZlcnRTdHJ1Y3R7TmFtZTogYHRlc3RgLCBWYWx1ZTogMTIzfSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BOYW1lYDogYHRlc3RgLCBgVmFsdWVgOiBmbG9hdDY0KDEyMyl9LCB2YWx1ZSkKCWZpZWxkLlJlcXVpcmVkID0gdHJ1ZQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShtYXBbc3RyaW5nXWludGVyZmFjZXt9e30pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwobWFrZShtYXBbc3RyaW5nXWludGVyZmFjZXt9KSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYWtlKG1hcFtzdHJpbmddaW50ZXJmYWNle30pLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgdmFsdWVgOiA0NTZ9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddaW50ZXJmYWNle317YHZhbHVlYDogNDU2fSwgdmFsdWUpCglmaWVsZC5EZWZhdWx0VmFsdWUgPSBtYXBbc3RyaW5nXXN0cmluZ3tgdmFsdWVgOiBgeWF5YCwgYG90aGVyYDogYDEyMzQuNWB9Cgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWludGVyZmFjZXt9e2B2YWx1ZWA6IGB5YXlgLCBgb3RoZXJgOiBgMTIzNC41YH0sIHZhbHVlKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgdmFsdWVgOiBgeWF5YCwgYG90aGVyYDogYDEyMzQuNWB9LCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgdmFsdWVgOiBgb2hoaGB9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddaW50ZXJmYWNle317YHZhbHVlYDogYG9oaGhgfSwgdmFsdWUpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFieldConvertValueString",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFieldConvertValueString(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IFN0cmluZ1R5cGV9Cgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKGBgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0Lk5pbCh2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0Lk5pbCh2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYHRoaW5nc2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYHRoaW5nc2AsIHZhbHVlKQoJZmllbGQuUmVxdWlyZWQgPSB0cnVlCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKGBgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBgLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBgLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYHRoaW5nc2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYHRoaW5nc2AsIHZhbHVlKQoJZmllbGQuRGVmYXVsdFZhbHVlID0gYHRlc3RgCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKGBgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0YCwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgdGVzdGAsIHZhbHVlKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShgdGhpbmdzYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgdGhpbmdzYCwgdmFsdWUpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFieldConvertValueTime",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFieldConvertValueTime(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IFRpbWVUeXBlfQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShgYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKHZhbHVlLih0aW1lLlRpbWUpLklzWmVybygpKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZSh2YWx1ZS4odGltZS5UaW1lKS5Jc1plcm8oKSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYDIwMDYtMDEtMDJUMTU6MDQ6MDUtMDc6MDBgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LlRydWUodXRpbHMuUmVmZXJlbmNlVGltZS5FcXVhbCh2YWx1ZS4odGltZS5UaW1lKSkpCglmaWVsZC5SZXF1aXJlZCA9IHRydWUKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYGApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZSh2YWx1ZS4odGltZS5UaW1lKS5Jc1plcm8oKSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LlRydWUodmFsdWUuKHRpbWUuVGltZSkuSXNaZXJvKCkpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKDExMzYyMzk0NDUpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZSh1dGlscy5SZWZlcmVuY2VUaW1lLkVxdWFsKHZhbHVlLih0aW1lLlRpbWUpKSkKCWZpZWxkLkRlZmF1bHRWYWx1ZSA9IHRpbWUuVW5peCgxMTM2MjM5NDQ1LCAwKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShgYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKHV0aWxzLlJlZmVyZW5jZVRpbWUuRXF1YWwodmFsdWUuKHRpbWUuVGltZSkpKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZSh1dGlscy5SZWZlcmVuY2VUaW1lLkVxdWFsKHZhbHVlLih0aW1lLlRpbWUpKSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoMTUwMDAwMDAwMCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKHRpbWUuRGF0ZSgyMDE3LCA3LCAxNCwgMiwgNDAsIDAsIDAsIHRpbWUuVVRDKS5FcXVhbCh2YWx1ZS4odGltZS5UaW1lKSkpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFieldValidators",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFieldValidators(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmaWVsZDEgOj0gRmllbGR7TmFtZTogYGZpZWxkMWAsIFZhbGlkYXRvcjogZnVuYyh2IGludGVyZmFjZXt9KSBlcnJvciB7CgkJaWYgZm10LlNwcmludGYoIiV2IiwgdikgPT0gYHRlc3RgIHsKCQkJcmV0dXJuIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJWYWx1ZSBpcyBub3QgJ3Rlc3QnIikKCQl9Cgl9fQoJYXNzZXJ0Lk5pbChmaWVsZDEuVmFsaWRhdGUoYHRlc3RgKSkKCWFzc2VydC5FcnJvcihmaWVsZDEuVmFsaWRhdGUoYG5vdC10ZXN0YCkpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestGetIdentityFieldNameFromStruct",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestGetIdentityFieldNameFromStruct(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmIDo9IFRlc3RSZWNvcmR7SUQ6IDEyMzR9CglmaWVsZCwga2V5LCBlcnIgOj0gZ2V0SWRlbnRpdHlGaWVsZE5hbWVGcm9tU3RydWN0KCZmLCBgYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgSURgLCBrZXkpCglhc3NlcnQuRXF1YWwoYElEYCwga2V5KQoJZiA9IFRlc3RSZWNvcmR7fQoJZmllbGQsIGtleSwgZXJyID0gZ2V0SWRlbnRpdHlGaWVsZE5hbWVGcm9tU3RydWN0KCZmLCBgU2l6ZWApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYFNpemVgLCBmaWVsZCkKCWFzc2VydC5FcXVhbChgU2l6ZWAsIGtleSkKCWYyIDo9IFRlc3RSZWNvcmRUd297YDQyYH0KCWZpZWxkLCBrZXksIGVyciA9IGdldElkZW50aXR5RmllbGROYW1lRnJvbVN0cnVjdCgmZjIsIGBgKQoJYXNzZXJ0LkVxdWFsKGBVVUlEYCwgZmllbGQpCglhc3NlcnQuRXF1YWwoYHV1aWRgLCBrZXkpCglmMyA6PSBUZXN0UmVjb3JkVGhyZWV7fQoJZmllbGQsIGtleSwgZXJyID0gZ2V0SWRlbnRpdHlGaWVsZE5hbWVGcm9tU3RydWN0KCZmMywgYGApCglhc3NlcnQuRXJyb3IoZXJyKQoJZjQgOj0gVGVzdFJlY29yZFRocmVle30KCWZpZWxkLCBrZXksIGVyciA9IGdldElkZW50aXR5RmllbGROYW1lRnJvbVN0cnVjdCgmZjQsIGBVVUlEYCkKCWFzc2VydC5FcXVhbChgVVVJRGAsIGZpZWxkKQoJYXNzZXJ0LkVxdWFsKGBVVUlEYCwga2V5KQoJZjUgOj0gVGVzdFJlY29yZEVtYmVkZGVke30KCWY1LlVVSUQgPSBgNDJgCglmNS5VVUlEID0gYDQyYAoJZjUuSUQgPSA0MgoJZjUuTmFtZSA9IGBGb3VydHkgVHdvYAoJZjUuU2l6ZSA9IDQyCglmNS5Mb2NhbCA9IHRydWUKCWZpZWxkLCBrZXksIGVyciA9IGdldElkZW50aXR5RmllbGROYW1lRnJvbVN0cnVjdCgmZjUsIGBgKQoJYXNzZXJ0LkVxdWFsKGBVVUlEYCwgZmllbGQpCglhc3NlcnQuRXF1YWwoYHV1aWRgLCBrZXkpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRecordAppend",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRecordAppend(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglyZWNvcmQgOj0gTmV3UmVjb3JkKGAyYCkuQXBwZW5kKGBmaXJzdGAsIDEpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXsxfSwgcmVjb3JkLkdldChgZmlyc3RgKSkKCXJlY29yZCA9IE5ld1JlY29yZChgMmFgKS5TZXQoYHNlY29uZGAsIDQpCglhc3NlcnQuRXF1YWwoNCwgcmVjb3JkLkdldChgc2Vjb25kYCkpCglyZWNvcmQuQXBwZW5kKGBzZWNvbmRgLCA1KQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317NCwgNX0sIHJlY29yZC5HZXQoYHNlY29uZGApKQoJcmVjb3JkID0gTmV3UmVjb3JkKGAyYmApLlNldChgdGhpcmRgLCBbXXN0cmluZ3tgNmAsIGA3YH0pCglyZWNvcmQuQXBwZW5kKGB0aGlyZGAsIDgpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXtgNmAsIGA3YCwgOH0sIHJlY29yZC5HZXQoYHRoaXJkYCkpCglyZWNvcmQgPSBOZXdSZWNvcmQoYDJjYCkuU2V0KGBmb3VydGhgLCBbXWludGVyZmFjZXt9e2A2YCwgYDdgfSkKCXJlY29yZC5BcHBlbmQoYGZvdXJ0aGAsIDgpCglyZWNvcmQuQXBwZW5kKGBmb3VydGhgLCA5KQoJcmVjb3JkLkFwcGVuZChgZm91cnRoYCwgYDEwYCkKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2A2YCwgYDdgLCA4LCA5LCBgMTBgfSwgcmVjb3JkLkdldChgZm91cnRoYCkpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRecordAppendNested",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRecordAppendNested(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglyZWNvcmQgOj0gTmV3UmVjb3JkKGAyYCkuQXBwZW5kTmVzdGVkKGB0LmZpcnN0YCwgMSkKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9ezF9LCByZWNvcmQuR2V0KGB0LmZpcnN0YCkpCglyZWNvcmQgPSBOZXdSZWNvcmQoYDJhYCkuU2V0TmVzdGVkKGB0LnNlY29uZGAsIDQpCglhc3NlcnQuRXF1YWwoNCwgcmVjb3JkLkdldChgdC5zZWNvbmRgKSkKCXJlY29yZC5BcHBlbmQoYHQuc2Vjb25kYCwgNSkKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9ezQsIDV9LCByZWNvcmQuR2V0KGB0LnNlY29uZGApKQoJcmVjb3JkID0gTmV3UmVjb3JkKGAyYmApLlNldE5lc3RlZChgdC50aGlyZGAsIFtdc3RyaW5ne2A2YCwgYDdgfSkKCXJlY29yZC5BcHBlbmQoYHQudGhpcmRgLCA4KQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317YDZgLCBgN2AsIDh9LCByZWNvcmQuR2V0KGB0LnRoaXJkYCkpCglyZWNvcmQgPSBOZXdSZWNvcmQoYDJjYCkuU2V0TmVzdGVkKGB0LmZvdXJ0aGAsIFtdaW50ZXJmYWNle317YDZgLCBgN2B9KQoJcmVjb3JkLkFwcGVuZE5lc3RlZChgdC5mb3VydGhgLCA4KQoJcmVjb3JkLkFwcGVuZE5lc3RlZChgdC5mb3VydGhgLCA5KQoJcmVjb3JkLkFwcGVuZE5lc3RlZChgdC5mb3VydGhgLCBgMTBgKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317YDZgLCBgN2AsIDgsIDksIGAxMGB9LCByZWNvcmQuR2V0KGB0LmZvdXJ0aGApKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRecordConvertRecordValueToStructValue",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRecordConvertRecordValueToStructValue(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglncm91cHMgOj0gTmV3Q29sbGVjdGlvbihgVGVzdFJlY29yZFBvcHVsYXRlU3RydWN0V2l0aFJlbGF0ZWRTdHJ1Y3RHcm91cHNgLCBGaWVsZHtOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGV9KQoJdXNlcnMgOj0gTmV3Q29sbGVjdGlvbihgVGVzdFJlY29yZFBvcHVsYXRlU3RydWN0V2l0aFJlbGF0ZWRTdHJ1Y3RVc2Vyc2AsIEZpZWxke05hbWU6IGBuYW1lYCwgVHlwZTogU3RyaW5nVHlwZX0sIEZpZWxke05hbWU6IGBncm91cF9pZGAsIFR5cGU6IEludFR5cGUsIEJlbG9uZ3NUbzogZ3JvdXBzfSwgRmllbGR7TmFtZTogYGFnZWAsIFR5cGU6IEludFR5cGV9KQoJYmFja2VuZCA6PSBuZXcobnVsbEJhY2tlbmQpCgliYWNrZW5kLlJlZ2lzdGVyQ29sbGVjdGlvbih1c2VycykKCWJhY2tlbmQuUmVnaXN0ZXJDb2xsZWN0aW9uKGdyb3VwcykKCXJlY29yZCA6PSBOZXdSZWNvcmQobmlsKQoJYWN0dWFsIDo9IG5ldyh0ZXN0VXNlcikKCXJlc3VsdCwgZXJyIDo9IHJlY29yZC5jb252ZXJ0UmVjb3JkVmFsdWVUb1N0cnVjdFZhbHVlKHVzZXJzLCBgZ3JvdXBfaWRgLCA4Njc1LCBhY3R1YWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoJnRlc3RHcm91cHtJRDogODY3NX0sIHJlc3VsdCkKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRecordGet",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRecordGet(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglyZWNvcmQgOj0gTmV3UmVjb3JkKGAxYCkuU2V0KGB0aGlzLmlzLmEudGVzdGAsIHRydWUpCglyZWNvcmQuU2V0TmVzdGVkKGB0aGlzLmlzLmEudGVzdGAsIGBjb3JyZWN0YCkKCWFzc2VydC5FcXVhbChgMWAsIHJlY29yZC5JRCkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWludGVyZmFjZXt9e2B0aGlzLmlzLmEudGVzdGA6IHRydWUsIGB0aGlzYDogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgaXNgOiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BhYDogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgdGVzdGA6IGBjb3JyZWN0YH19fX0sIHJlY29yZC5GaWVsZHMpCglhc3NlcnQuRXF1YWwoYGNvcnJlY3RgLCByZWNvcmQuR2V0TmVzdGVkKGB0aGlzLmlzLmEudGVzdGApKQoJYXNzZXJ0LkVxdWFsKHRydWUsIHJlY29yZC5HZXQoYHRoaXMuaXMuYS50ZXN0YCkpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRecordKeys",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRecordKeys(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0UmVjb3JkS2V5c2AsIEZpZWxkczogW11GaWVsZHt7TmFtZTogYG90aGVyYCwgVHlwZTogU3RyaW5nVHlwZSwgS2V5OiB0cnVlfSwge05hbWU6IGB0aGluZ2AsIFR5cGU6IFN0cmluZ1R5cGV9fX0KCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9ezEsIGBmaXJzdGB9LCBOZXdSZWNvcmQoW11pbnRlcmZhY2V7fXsxLCBgZmlyc3RgfSkuS2V5cyhjb2xsZWN0aW9uKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9ezIsIGBzZWNvbmRgfSwgTmV3UmVjb3JkKFtdaW50ZXJmYWNle317Mn0pLlNldChgb3RoZXJgLCBgc2Vjb25kYCkuS2V5cyhjb2xsZWN0aW9uKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9ezJ9LCBOZXdSZWNvcmQoW11pbnRlcmZhY2V7fXsyfSkuS2V5cyhjb2xsZWN0aW9uKSkKCWFzc2VydC5FbXB0eShOZXdSZWNvcmQobmlsKS5LZXlzKGNvbGxlY3Rpb24pKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRecordPopulateStruct",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRecordPopulateStruct(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl0eXBlIHRlc3RUaGluZyBzdHJ1Y3QgewoJCUlEICAgIGludAoJCU5hbWUgIHN0cmluZyBgcGl2b3Q6Im5hbWUiYAoJCUdyb3VwIHN0cmluZyBgcGl2b3Q6Ikdyb3VwLG9taXRlbXB0eSJgCgkJU2l6ZSAgaW50Cgl9Cgl0aGluZyA6PSB0ZXN0VGhpbmd7fQoJcmVjb3JkIDo9IE5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgdGVzdC1uYW1lYCkuU2V0KGBTaXplYCwgNDIpCgllcnIgOj0gcmVjb3JkLlBvcHVsYXRlKCZ0aGluZywgbmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0LW5hbWVgLCB0aGluZy5OYW1lKQoJYXNzZXJ0Llplcm8odGhpbmcuR3JvdXApCglhc3NlcnQuRXF1YWwoNDIsIHRoaW5nLlNpemUpCgl0aGluZyA9IHRlc3RUaGluZ3tHcm91cDogYHRlc3RzYH0KCXJlY29yZCA9IE5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgdGVzdC1uYW1lYCkuU2V0KGBTaXplYCwgNDIpCgllcnIgPSByZWNvcmQuUG9wdWxhdGUoJnRoaW5nLCBuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYHRlc3QtbmFtZWAsIHRoaW5nLk5hbWUpCglhc3NlcnQuRXF1YWwoYHRlc3RzYCwgdGhpbmcuR3JvdXApCglhc3NlcnQuRXF1YWwoNDIsIHRoaW5nLlNpemUpCgl0eXBlIEtWIHN0cnVjdCB7CgkJS2V5ICAgc3RyaW5nICAgICAgYHBpdm90OiJrZXksaWRlbnRpdHkiYAoJCVZhbHVlIGludGVyZmFjZXt9IGBwaXZvdDoidmFsdWUsb21pdGVtcHR5ImAKCX0KCXJlY29yZCA9IE5ld1JlY29yZChgdGhpcy5pcy5hbi5pZGApLlNldChgdmFsdWVgLCA0MikKCWt2IDo9IG5ldyhLVikKCWVyciA9IHJlY29yZC5Qb3B1bGF0ZShrdiwgbmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGB0aGlzLmlzLmFuLmlkYCwga3YuS2V5KQoJYXNzZXJ0LkVxdWFsKDQyLCBrdi5WYWx1ZSkKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRecordPopulateStructWithEmbeddedStruct",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRecordPopulateStructWithEmbeddedStruct(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgYWN0dWFsIHRlc3RVc2VyRW1iZWQKCXZhciBlcnIgZXJyb3IKCXJlY29yZCA6PSBOZXdSZWNvcmQoYDU1NWApCglyZWNvcmQuU2V0KGBuYW1lYCwgYFRlc3QgRW1iZWRgKQoJcmVjb3JkLlNldChgYWdlYCwgNjkpCglyZWNvcmQuU2V0KGBhY3RpdmVgLCB0cnVlKQoJZXJyID0gcmVjb3JkLlBvcHVsYXRlKCZhY3R1YWwsIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbCgwLCBhY3R1YWwuSUQpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRecordPopulateStructWithFormatter",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRecordPopulateStructWithFormatter(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0UmVjb3JkUG9wdWxhdGVTdHJ1Y3RXaXRoRm9ybWF0dGVyYCwgRmllbGRzOiBbXUZpZWxke3tOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGUsIEZvcm1hdHRlcjogZnVuYyh2IGludGVyZmFjZXt9LCBvcCBGaWVsZE9wZXJhdGlvbikgKGludGVyZmFjZXt9LCBlcnJvcikgewoJCXJldHVybiBzdHJpbmd1dGlsLlVuZGVyc2NvcmUoZm10LlNwcmludGYoIiV2IiwgdikpLCBuaWwKCX19fX0KCXR5cGUgdGVzdFRoaW5nIHN0cnVjdCB7CgkJSUQgICAgaW50CgkJTmFtZSAgc3RyaW5nIGBwaXZvdDoibmFtZSJgCgkJR3JvdXAgc3RyaW5nIGBwaXZvdDoiR3JvdXAsb21pdGVtcHR5ImAKCQlTaXplICBpbnQKCX0KCXRoaW5nIDo9IHRlc3RUaGluZ3t9CglyZWNvcmQgOj0gTmV3UmVjb3JkKDEpLlNldChgbmFtZWAsIGBUZXN0TmFtZWApLlNldChgU2l6ZWAsIDQyKQoJZXJyIDo9IHJlY29yZC5Qb3B1bGF0ZSgmdGhpbmcsIGNvbGxlY3Rpb24pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYHRlc3RfbmFtZWAsIHRoaW5nLk5hbWUpCglhc3NlcnQuWmVybyh0aGluZy5Hcm91cCkKCWFzc2VydC5aZXJvKHRoaW5nLlNpemUpCgl0aGluZyA9IHRlc3RUaGluZ3tOYW1lOiBgQm9vYmVycnlgLCBHcm91cDogYHRlc3RzYH0KCXJlY29yZCA9IE5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgdGVzdC1uYW1lYCkuU2V0KGBTaXplYCwgNDIpCgllcnIgPSByZWNvcmQuUG9wdWxhdGUoJnRoaW5nLCBjb2xsZWN0aW9uKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0X25hbWVgLCB0aGluZy5OYW1lKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0c2AsIHRoaW5nLkdyb3VwKQoJYXNzZXJ0Llplcm8odGhpbmcuU2l6ZSkKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRecordPopulateStructWithFormatterValidator",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRecordPopulateStructWithFormatterValidator(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0UmVjb3JkUG9wdWxhdGVTdHJ1Y3RXaXRoRm9ybWF0dGVyVmFsaWRhdG9yYCwgRmllbGRzOiBbXUZpZWxke3tOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGUsIFZhbGlkYXRvcjogZnVuYyh2IGludGVyZmFjZXt9KSBlcnJvciB7CgkJaWYgZm10LlNwcmludGYoIiV2IiwgdikgPT0gYFRlc3RWYWx1ZWAgewoJCQlyZXR1cm4gZm10LkVycm9yZigiU2hvdWxkbid0IGJlIFRlc3RWYWx1ZSIpCgkJfQoJCXJldHVybiBuaWwKCX0sIEZvcm1hdHRlcjogZnVuYyh2IGludGVyZmFjZXt9LCBvcCBGaWVsZE9wZXJhdGlvbikgKGludGVyZmFjZXt9LCBlcnJvcikgewoJCXJldHVybiBzdHJpbmd1dGlsLlVuZGVyc2NvcmUoZm10LlNwcmludGYoIiV2IiwgdikpLCBuaWwKCX19fX0KCXR5cGUgdGVzdFRoaW5nIHN0cnVjdCB7CgkJSUQgICAgaW50CgkJTmFtZSAgc3RyaW5nIGBwaXZvdDoibmFtZSJgCgkJR3JvdXAgc3RyaW5nIGBwaXZvdDoiR3JvdXAsb21pdGVtcHR5ImAKCQlTaXplICBpbnQKCX0KCXRoaW5nIDo9IHRlc3RUaGluZ3t9CglyZWNvcmQgOj0gTmV3UmVjb3JkKDEpLlNldChgbmFtZWAsIGBUZXN0VmFsdWVgKS5TZXQoYFNpemVgLCA0MikKCWVyciA6PSByZWNvcmQuUG9wdWxhdGUoJnRoaW5nLCBjb2xsZWN0aW9uKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0X3ZhbHVlYCwgdGhpbmcuTmFtZSkKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRecordPopulateStructWithRelatedStruct",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRecordPopulateStructWithRelatedStruct(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgYWN0dWFsIHRlc3RVc2VyCgl2YXIgZXJyIGVycm9yCgl3YW50ZWQgOj0gJnRlc3RVc2Vye0lEOiA1NTUsIE5hbWU6IGBUZXN0IFVzZXJgLCBBZ2U6IDIyLCBHcm91cDogJnRlc3RHcm91cHtJRDogODc2NX19CglyZWNvcmQgOj0gTmV3UmVjb3JkKDU1NSkKCXJlY29yZC5TZXQoYG5hbWVgLCBgVGVzdCBVc2VyYCkKCXJlY29yZC5TZXQoYGFnZWAsIDIyKQoJcmVjb3JkLlNldChgZ3JvdXBfaWRgLCA4NzY1KQoJZ3JvdXBzIDo9IE5ld0NvbGxlY3Rpb24oYFRlc3RSZWNvcmRQb3B1bGF0ZVN0cnVjdFdpdGhSZWxhdGVkU3RydWN0R3JvdXBzYCwgRmllbGR7TmFtZTogYG5hbWVgLCBUeXBlOiBTdHJpbmdUeXBlfSkKCXVzZXJzIDo9IE5ld0NvbGxlY3Rpb24oYFRlc3RSZWNvcmRQb3B1bGF0ZVN0cnVjdFdpdGhSZWxhdGVkU3RydWN0VXNlcnNgLCBGaWVsZHtOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGV9LCBGaWVsZHtOYW1lOiBgZ3JvdXBfaWRgLCBUeXBlOiBJbnRUeXBlLCBCZWxvbmdzVG86IGdyb3Vwc30sIEZpZWxke05hbWU6IGBhZ2VgLCBUeXBlOiBJbnRUeXBlfSkKCWJhY2tlbmQgOj0gbmV3KG51bGxCYWNrZW5kKQoJYmFja2VuZC5SZWdpc3RlckNvbGxlY3Rpb24odXNlcnMpCgliYWNrZW5kLlJlZ2lzdGVyQ29sbGVjdGlvbihncm91cHMpCgllcnIgPSByZWNvcmQuUG9wdWxhdGUoJmFjdHVhbCwgdXNlcnMpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwod2FudGVkLklELCBhY3R1YWwuSUQpCglhc3NlcnQuRXF1YWwod2FudGVkLk5hbWUsIGFjdHVhbC5OYW1lKQoJYXNzZXJ0LkVxdWFsKHdhbnRlZC5BZ2UsIGFjdHVhbC5BZ2UpCglhc3NlcnQuRXF1YWwod2FudGVkLkdyb3VwLklELCBhY3R1YWwuR3JvdXAuSUQpCglhc3NlcnQuRXF1YWwod2FudGVkLkdyb3VwLk5hbWUsIGFjdHVhbC5Hcm91cC5OYW1lKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRecordPopulateStructWithValidator",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRecordPopulateStructWithValidator(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0UmVjb3JkUG9wdWxhdGVTdHJ1Y3RXaXRoVmFsaWRhdG9yYCwgRmllbGRzOiBbXUZpZWxke3tOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGUsIFZhbGlkYXRvcjogZnVuYyh2IGludGVyZmFjZXt9KSBlcnJvciB7CgkJaWYgZm10LlNwcmludGYoIiV2IiwgdikgPT0gYHRlc3RgIHsKCQkJcmV0dXJuIGZtdC5FcnJvcmYoIlNob3VsZG4ndCBiZSB0ZXN0IikKCQl9CgkJcmV0dXJuIG5pbAoJfSwgVmFsaWRhdGVPblBvcHVsYXRlOiB0cnVlfX19Cgl0eXBlIHRlc3RUaGluZyBzdHJ1Y3QgewoJCUlEICAgIGludAoJCU5hbWUgIHN0cmluZyBgcGl2b3Q6Im5hbWUiYAoJCUdyb3VwIHN0cmluZyBgcGl2b3Q6Ikdyb3VwLG9taXRlbXB0eSJgCgkJU2l6ZSAgaW50Cgl9Cgl0aGluZyA6PSB0ZXN0VGhpbmd7fQoJcmVjb3JkIDo9IE5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgdGVzdGApLlNldChgU2l6ZWAsIDQyKQoJYXNzZXJ0LkVycm9yKHJlY29yZC5Qb3B1bGF0ZSgmdGhpbmcsIGNvbGxlY3Rpb24pKQoJY29sbGVjdGlvbi5GaWVsZHNbMF0uVmFsaWRhdGVPblBvcHVsYXRlID0gZmFsc2UKCWFzc2VydC5OaWwocmVjb3JkLlBvcHVsYXRlKCZ0aGluZywgY29sbGVjdGlvbikpCgljb2xsZWN0aW9uLkZpZWxkc1swXS5WYWxpZGF0ZU9uUG9wdWxhdGUgPSB0cnVlCgl0aGluZyA9IHRlc3RUaGluZ3tOYW1lOiBgQm9vYmVycnlgLCBHcm91cDogYHRlc3RzYH0KCXJlY29yZCA9IE5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgdGVzdC1uYW1lYCkuU2V0KGBTaXplYCwgNDIpCgllcnIgOj0gcmVjb3JkLlBvcHVsYXRlKCZ0aGluZywgY29sbGVjdGlvbikKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgdGVzdC1uYW1lYCwgdGhpbmcuTmFtZSkKCWFzc2VydC5FcXVhbChgdGVzdHNgLCB0aGluZy5Hcm91cCkKCWFzc2VydC5aZXJvKHRoaW5nLlNpemUpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRecordSet",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRecordSet(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglkZW1vIDo9ICZDb2xsZWN0aW9ue0ZpZWxkczogW11GaWVsZHt7TmFtZTogYG5hbWVgLCBUeXBlOiBTdHJpbmdUeXBlfSwge05hbWU6IGBmYWN0b3JgLCBUeXBlOiBGbG9hdFR5cGUsIFJlcXVpcmVkOiB0cnVlLCBEZWZhdWx0VmFsdWU6IDAuMn0sIHtOYW1lOiBgY3JlYXRlZF9hdGAsIFR5cGU6IFRpbWVUeXBlLCBSZXF1aXJlZDogdHJ1ZSwgRGVmYXVsdFZhbHVlOiBmdW5jKCkgaW50ZXJmYWNle30gewoJCXJldHVybiBkZWZ0aW1lCgl9fX19CglyZWNvcmRzZXQgOj0gTmV3UmVjb3JkU2V0KE5ld1JlY29yZCgxKS5TZXRGaWVsZHMobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgbmFtZWA6IGBGaXJzdGAsIGBmYWN0b3JgOiAwLjEsIGBjcmVhdGVkX2F0YDogbmlsfSksIE5ld1JlY29yZCgzKS5TZXRGaWVsZHMobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgbmFtZWA6IGBTZWNvbmRgLCBgZmFjdG9yYDogbmlsLCBgY3JlYXRlZF9hdGA6IG90aHRpbWV9KSwgTmV3UmVjb3JkKDUpLlNldEZpZWxkcyhtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BuYW1lYDogYFRoaXJkYCwgYGZhY3RvcmA6IDAuMywgYGNyZWF0ZWRfYXRgOiBuaWx9KSkKCWRlc3QgOj0gbWFrZShbXSp0ZXN0UmVjb3JkU2V0UmVjb3JkRGVzdCwgMCkKCWFzc2VydC5Ob0Vycm9yKHJlY29yZHNldC5Qb3B1bGF0ZUZyb21SZWNvcmRzKCZkZXN0LCBkZW1vKSkKCWFzc2VydC5MZW4oZGVzdCwgMykKCWFzc2VydC5FcXVhbCgxLCBkZXN0WzBdLklEKQoJYXNzZXJ0LkVxdWFsKGBGaXJzdGAsIGRlc3RbMF0uTmFtZSkKCWFzc2VydC5FcXVhbCgwLjEsIGRlc3RbMF0uRmFjdG9yKQoJYXNzZXJ0LkVxdWFsKGRlZnRpbWUsIGRlc3RbMF0uQ3JlYXRlZEF0KQoJYXNzZXJ0LkVxdWFsKDMsIGRlc3RbMV0uSUQpCglhc3NlcnQuRXF1YWwoYFNlY29uZGAsIGRlc3RbMV0uTmFtZSkKCWFzc2VydC5FcXVhbCgwLjIsIGRlc3RbMV0uRmFjdG9yKQoJYXNzZXJ0LkVxdWFsKG90aHRpbWUsIGRlc3RbMV0uQ3JlYXRlZEF0KQoJYXNzZXJ0LkVxdWFsKDUsIGRlc3RbMl0uSUQpCglhc3NlcnQuRXF1YWwoYFRoaXJkYCwgZGVzdFsyXS5OYW1lKQoJYXNzZXJ0LkVxdWFsKDAuMywgZGVzdFsyXS5GYWN0b3IpCglhc3NlcnQuRXF1YWwoZGVmdGltZSwgZGVzdFsyXS5DcmVhdGVkQXQpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestRecordSetKeys",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestRecordSetKeys(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0UmVjb3JkS2V5c2AsIEZpZWxkczogW11GaWVsZHt7TmFtZTogYG90aGVyYCwgVHlwZTogU3RyaW5nVHlwZSwgS2V5OiB0cnVlfSwge05hbWU6IGB0aGluZ2AsIFR5cGU6IFN0cmluZ1R5cGV9fX0KCXJlY29yZCA6PSBOZXdSZWNvcmQobmlsKQoJcmVjb3JkLlNldEtleXMoY29sbGVjdGlvbiwgUGVyc2lzdE9wZXJhdGlvbiwgMSwgYGZpcnN0YCkKCWFzc2VydC5FcXVhbFZhbHVlcygxLCByZWNvcmQuSUQpCglhc3NlcnQuRXF1YWxWYWx1ZXMoYGZpcnN0YCwgcmVjb3JkLkdldChgb3RoZXJgKSkKCXJlY29yZCA9IE5ld1JlY29yZChuaWwpCglyZWNvcmQuU2V0S2V5cyhjb2xsZWN0aW9uLCBQZXJzaXN0T3BlcmF0aW9uLCAxKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEsIHJlY29yZC5JRCkKCWFzc2VydC5OaWwocmVjb3JkLkdldChgb3RoZXJgKSkKCXJlY29yZCA9IE5ld1JlY29yZChuaWwpCglyZWNvcmQuU2V0S2V5cyhjb2xsZWN0aW9uLCBQZXJzaXN0T3BlcmF0aW9uKQoJYXNzZXJ0Lk5pbChyZWNvcmQuSUQpCglhc3NlcnQuTmlsKHJlY29yZC5HZXQoYG90aGVyYCkpCn0=",
                    "IsPackageLevel": true
                }
            ],
            "Types": {
                "Backend": {
                    "Name": "Backend",
                    "Source": "dHlwZSBCYWNrZW5kIGludGVyZmFjZSB7CglHZXRDb2xsZWN0aW9uKGNvbGxlY3Rpb24gc3RyaW5nKSAoKkNvbGxlY3Rpb24sIGVycm9yKQp9"
                },
                "Collection": {
                    "Name": "Collection",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "AddFields",
                            "Comment": "Append a field definition to this collection.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "fields",
                                    "Type": "...Field"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Collection"
                                }
                            ],
                            "Signature": "AddFields(fields ...Field) *Collection",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ApplyDefinition",
                            "Comment": "Copies certain collection and field properties from the definition object into this collection\ninstance.  This is useful for collections that are created by parsing the schema as it exists on\nthe remote datastore, which will have some but not all of the information we need to work with the\ndata.  Definition collections are the authoritative source for things like what the default value\nshould be, and which validators and formatters apply to a given field.\n\nThis function converts this instance into a Collection definition by copying the relevant values\nfrom given definition.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "definition",
                                    "Type": "*Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ApplyDefinition(definition *Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Check",
                            "Comment": "Verifies that the schema passes some basic sanity checks.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Check() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ConvertValue",
                            "Comment": "Convert a given value according to the data type of a specific named field.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "value",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "interface{}"
                                }
                            ],
                            "Signature": "ConvertValue(name string, value interface{}) interface{}",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Diff",
                            "Comment": "Determine the differences (if any) between this Collection definition and another.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "actual",
                                    "Type": "*Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "[]*SchemaDelta"
                                }
                            ],
                            "Signature": "Diff(actual *Collection) []*SchemaDelta",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "EmptyRecord",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*Record"
                                }
                            ],
                            "Signature": "EmptyRecord() *Record",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FillDefaults",
                            "Comment": "Populate a given Record with the default values (if any) of all fields in the Collection.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "record",
                                    "Type": "*Record"
                                }
                            ],
                            "Signature": "FillDefaults(record *Record)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetAggregatorName",
                            "Comment": "Get the canonical name of the dataset in an external aggregator service.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "GetAggregatorName() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetAllConstraints",
                            "Comment": "Retrieve the set of all Constraints on this collection, both explicitly provided\nvia the Constraints field, as well as constraints specified using the \"BelongsTo\"\nshorthand on Fields.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Name": "constraints",
                                    "Type": "[]Constraint"
                                }
                            ],
                            "Signature": "GetAllConstraints() constraints []Constraint",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetField",
                            "Comment": "Retrieve a single field by name.  The second return value will be false if the field does not\nexist.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Field"
                                },
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "GetField(name string) (Field, bool)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetFieldByIndex",
                            "Comment": "Retrieve a single field by its index value. The second return value will be false if a field\nat that index does not exist.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "index",
                                    "Type": "int"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Field"
                                },
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "GetFieldByIndex(index int) (Field, bool)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetFirstNonIdentityKeyField",
                            "Comment": "Retrieve the first non-indentity key field, sometimes referred to as the \"range\", \"sort\", or \"cluster\" key.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "Field"
                                },
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "GetFirstNonIdentityKeyField() (Field, bool)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetIdentityFieldName",
                            "Comment": "Get the canonical name of the primary identity field.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "GetIdentityFieldName() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetIndexName",
                            "Comment": "Get the canonical name of the external index name.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "GetIndexName() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetRelatedCollection",
                            "Comment": "Retrieves a Collection by name from the backend this Collection is registered to.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Collection"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GetRelatedCollection(name string) (*Collection, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "HasRecordType",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "HasRecordType() bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IsExpired",
                            "Comment": "Expired records are those whose TTL duration is non-zero and negative.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "record",
                                    "Type": "*Record"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IsExpired(record *Record) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IsIdentityField",
                            "Comment": "TODO: what is this?",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IsIdentityField(name string) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IsKeyField",
                            "Comment": "Return whether a given field name is a key on this Collection.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IsKeyField(name string) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "KeyCount",
                            "Comment": "Return the number of keys on that uniquely identify a single record in this Collection.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "int"
                                }
                            ],
                            "Signature": "KeyCount() int",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "KeyFieldNames",
                            "Comment": "Same as KeyFields, but returns only the field names",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Name": "names",
                                    "Type": "[]string"
                                }
                            ],
                            "Signature": "KeyFieldNames() names []string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "KeyFields",
                            "Comment": "Retrieve all of the fields that comprise the primary key for this Collection.  This will always include the identity\nfield at a minimum.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]Field"
                                }
                            ],
                            "Signature": "KeyFields() []Field",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "MakeRecord",
                            "Comment": "Deprecated: use StructToRecord instead",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "in",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "ops",
                                    "Type": "...FieldOperation"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "MakeRecord(in interface{}, ops ...FieldOperation) (*Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "MapFromRecord",
                            "Comment": "Convert the given record into a map.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "record",
                                    "Type": "*Record"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "MapFromRecord(record *Record, fields ...string) (map[string]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "NewCollection",
                            "Comment": "Create a new colllection definition with no fields.",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "...Field"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Collection"
                                }
                            ],
                            "Signature": "NewCollection(name string, fields ...Field) *Collection",
                            "Source": "ewoJaWYgbGVuKGZpZWxkcykgPT0gMCB7CgkJZmllbGRzID0gbWFrZShbXUZpZWxkLCAwKQoJfQoJcmV0dXJuICZDb2xsZWN0aW9ue05hbWU6IG5hbWUsIEZpZWxkczogZmllbGRzLCBJZGVudGl0eUZpZWxkOiBEZWZhdWx0SWRlbnRpdHlGaWVsZCwgSWRlbnRpdHlGaWVsZFR5cGU6IERlZmF1bHRJZGVudGl0eUZpZWxkVHlwZSwgSWRlbnRpdHlGaWVsZFZhbGlkYXRvcjogVmFsaWRhdGVOb3RFbXB0eX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "SetBackend",
                            "Comment": "Set the backend for this collection.  The Backend interface in this package is a limited subset\nof the backends.Backend interface that avoids a circular dependency between the two packages.\nThe intent is to allow Collections to retrieve details about other collections registered on the\nsame backend.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "backend",
                                    "Type": "Backend"
                                }
                            ],
                            "Signature": "SetBackend(backend Backend)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetIdentity",
                            "Comment": "Configure the identity field of a collection in a single function call.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "idtype",
                                    "Type": "Type"
                                },
                                {
                                    "Name": "formatter",
                                    "Type": "FieldFormatterFunc"
                                },
                                {
                                    "Name": "validator",
                                    "Type": "FieldValidatorFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Collection"
                                }
                            ],
                            "Signature": "SetIdentity(name string, idtype Type, formatter FieldFormatterFunc, validator FieldValidatorFunc) *Collection",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetRecordType",
                            "Comment": "Deprecated: this functionality has been removed.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "in",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Collection"
                                }
                            ],
                            "Signature": "SetRecordType(in interface{}) *Collection",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "StructToRecord",
                            "Comment": "Generates a Record suitable for persistence in a backend from the given struct.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "in",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Record"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "StructToRecord(in interface{}) (*Record, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "TTL",
                            "Comment": "Return the duration until the TimeToLiveField in given record expires within the current collection.\nCollections with an empty TimeToLiveField, or records with a missing or zero-valued TimeToLiveField\nwill return 0.  If the record has already expired, the returned duration will be a negative number.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "record",
                                    "Type": "*Record"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "time.Duration"
                                }
                            ],
                            "Signature": "TTL(record *Record) time.Duration",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ValidateRecord",
                            "Comment": "Validate the given record against all Field and Collection validators.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "record",
                                    "Type": "*Record"
                                },
                                {
                                    "Name": "op",
                                    "Type": "FieldOperation"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ValidateRecord(record *Record, op FieldOperation) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ValueForField",
                            "Comment": "Convert a given value into one that that can go into the backend database (for create/update operations), or that\nshould be returned to the user (for retrieval operations) in accordance with the named field's data type and\nformatters.  Invalid values (determined by Validators and the Required option in the Field) will return an error.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "value",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "op",
                                    "Type": "FieldOperation"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ValueForField(name string, value interface{}, op FieldOperation) (interface{}, error)",
                            "IsPackageLevel": false
                        }
                    ],
                    "Fields": [
                        {
                            "Name": "Name",
                            "Type": "string",
                            "Comment": "The name of the collection"
                        },
                        {
                            "Name": "IndexName",
                            "Type": "string",
                            "Comment": "The name of the associated external inverted index used to query this collection."
                        },
                        {
                            "Name": "IndexCompoundFields",
                            "Type": "[]string",
                            "Comment": "Lists the field names that make up a composite key on this Collection that should be joined\ntogether when determining index record IDs.  Often it is the case that external indices do\nnot support composite keys the way databases do, so this allows Collections with composite\nkeys to be indexed in those systems by joining several values together to form a unique key."
                        },
                        {
                            "Name": "IndexCompoundFieldJoiner",
                            "Type": "string",
                            "Comment": "The string used to join and split ID values that go into / come out of external indices."
                        },
                        {
                            "Name": "SkipIndexPersistence",
                            "Type": "bool",
                            "Comment": "Disable automatically dual-writing modified records into the external index."
                        },
                        {
                            "Name": "Fields",
                            "Type": "[]Field",
                            "Comment": "The fields that belong to this collection (all except the primary key/identity field/first\nfield in a composite key)"
                        },
                        {
                            "Name": "IdentityField",
                            "Type": "string",
                            "Comment": "The name of the identity field for this Collection.  Defaults to \"id\"."
                        },
                        {
                            "Name": "IdentityFieldType",
                            "Type": "Type",
                            "Comment": "The datatype of the identity field.  Defaults to integer."
                        },
                        {
                            "Name": "IdentityFieldIndex",
                            "Type": "int",
                            "Comment": "Used to store the location of the identity field in the source database."
                        },
                        {
                            "Name": "EmbeddedCollections",
                            "Type": "[]Relationship",
                            "Comment": "Specifies how fields in this Collection relate to records from other collections.  This is\na partial implementation of a relational model, specifically capturing one-to-one or\none-to-many relationships.  The definitions here will retrieve the associated records from\nanother, and those values will replace the value that is actually in this Collection's field."
                        },
                        {
                            "Name": "Constraints",
                            "Type": "[]Constraint",
                            "Comment": "Allows for constraints to be applied to a collection.  In addition to informing Pivot about the\nrelationships between collections, this data is also used to enforce referential integrity for\nbackends that support such guarantees (e.g.: ACID-compliant RDBMS')."
                        },
                        {
                            "Name": "ExportedFields",
                            "Type": "[]string",
                            "Comment": "Specifies which fields can be seen when records are from relationships defined on other\nCollections.  This can be used to restrict the exposure) of sensitive data in this Collection\nbe being an embedded field in another Collection."
                        },
                        {
                            "Name": "AllowMissingEmbeddedRecords",
                            "Type": "bool",
                            "Comment": "Specify whether missing related fields generate an error when retrieving a record."
                        },
                        {
                            "Name": "TotalRecords",
                            "Type": "int64",
                            "Comment": "A read-only count of the number of records in this Collection"
                        },
                        {
                            "Name": "TotalRecordsExact",
                            "Type": "bool",
                            "Comment": "Whether the value of TotalRecords represents an exact (authoritative) count or an\napproximate count."
                        },
                        {
                            "Name": "TimeToLiveField",
                            "Type": "string",
                            "Comment": "The name of a field containing an absolute datetime after which expired records should be\ndeleted from this Collection."
                        },
                        {
                            "Name": "IdentityFieldFormatter",
                            "Type": "FieldFormatterFunc",
                            "Comment": "A function that modifies the identity key value before any operation.  Operates the same as\na Field Formatter function."
                        },
                        {
                            "Name": "AutoIdentity",
                            "Type": "string",
                            "Comment": "Specifies that IDs should be automatically generated using a formatter function"
                        },
                        {
                            "Name": "IdentityFieldValidator",
                            "Type": "FieldValidatorFunc",
                            "Comment": "A function that validates the value of an identity key before create and update operations.\nOperates the same as a Field Validator function."
                        },
                        {
                            "Name": "SourceURI",
                            "Type": "string",
                            "Comment": "Allow backends to store internal information about the backing datasource for this collection."
                        },
                        {
                            "Name": "PreSaveValidator",
                            "Type": "CollectionValidatorFunc",
                            "Comment": "If specified, this function receives a copy of the populated record before create and update\noperations, allowing for a last-chance validation of the record as a whole.  Use a pre-save\nvalidator when validation requires checking multiple fields at once."
                        },
                        {
                            "Name": "View",
                            "Type": "bool",
                            "Comment": "Specifies that this collection is a read-only view on data that is queried by the underlying database engine."
                        },
                        {
                            "Name": "ViewKeywords",
                            "Type": "string",
                            "Comment": "Specify additional keywords in the view creation to modify how it is created."
                        },
                        {
                            "Name": "ViewQuery",
                            "Type": "interface{}",
                            "Comment": "A query object that is passed to the underlying database engine."
                        },
                        {
                            "Name": "AlwaysCreate",
                            "Type": "bool",
                            "Comment": "Specifies that creating this collection on the backend should always be attempted."
                        },
                        {
                            "Name": "Ready",
                            "Type": "bool",
                            "Comment": "Specifies that the collection is fully ready to be used"
                        }
                    ],
                    "Source": "dHlwZSBDb2xsZWN0aW9uIHN0cnVjdCB7CglOYW1lICAgICAgICAgICAgICAgIHN0cmluZyBganNvbjoibmFtZSJgCglJbmRleE5hbWUgICAgICAgICAgIHN0cmluZyBganNvbjoiaW5kZXhfbmFtZSxvbWl0ZW1wdHkiYAoJSW5kZXhDb21wb3VuZEZpZWxkcyBbIC8vIFRoZSBuYW1lIG9mIHRoZSBjb2xsZWN0aW9uCgkvLyBMaXN0cyB0aGUgZmllbGQgbmFtZXMgdGhhdCBtYWtlIHVwIGEgY29tcG9zaXRlIGtleSBvbiB0aGlzIENvbGxlY3Rpb24gdGhhdCBzaG91bGQgYmUgam9pbmVkCgkvLyB0b2dldGhlciB3aGVuIGRldGVybWluaW5nIGluZGV4IHJlY29yZCBJRHMuICBPZnRlbiBpdCBpcyB0aGUgY2FzZSB0aGF0IGV4dGVybmFsIGluZGljZXMgZG8KCS8vIG5vdCBzdXBwb3J0IGNvbXBvc2l0ZSBrZXlzIHRoZSB3YXkgZGF0YWJhc2VzIGRvLCBzbyB0aGlzIGFsbG93cyBDb2xsZWN0aW9ucyB3aXRoIGNvbXBvc2l0ZQoJLy8ga2V5cyB0byBiZSBpbmRleGVkIGluIHRob3NlIHN5c3RlbXMgYnkgam9pbmluZyBzZXZlcmFsIHZhbHVlcyB0b2dldGhlciB0byBmb3JtIGEgdW5pcXVlIGtleS4KCV1zdHJpbmcgYGpzb246ImluZGV4X2NvbXBvdW5kX2ZpZWxkcyxvbWl0ZW1wdHkiYAoJSW5kZXhDb21wb3VuZEZpZWxkSm9pbmVyIHN0cmluZyBganNvbjoiaW5kZXhfY29tcG91bmRfZmllbGRfam9pbmVyLG9taXRlbXB0eSJgCglTa2lwSW5kZXhQZXJzaXN0ZW5jZSAgICAgYm9vbCAgIGBqc29uOiJza2lwX2luZGV4X3BlcnNpc3RlbmNlLG9taXRlbXB0eSJgCglGaWVsZHMgICAgICAgICAgICAgICAgICAgWyAvLyBUaGUgc3RyaW5nIHVzZWQgdG8gam9pbiBhbmQgc3BsaXQgSUQgdmFsdWVzIHRoYXQgZ28gaW50byAvIGNvbWUgb3V0IG9mIGV4dGVybmFsIGluZGljZXMuCgkvLyBUaGUgZmllbGRzIHRoYXQgYmVsb25nIHRvIHRoaXMgY29sbGVjdGlvbiAoYWxsIGV4Y2VwdCB0aGUgcHJpbWFyeSBrZXkvaWRlbnRpdHkgZmllbGQvZmlyc3QKCS8vIGZpZWxkIGluIGEgY29tcG9zaXRlIGtleSkKCV1GaWVsZCBganNvbjoiZmllbGRzImAKCUlkZW50aXR5RmllbGQgICAgICAgc3RyaW5nIGBqc29uOiJpZGVudGl0eV9maWVsZCxvbWl0ZW1wdHkiYAoJSWRlbnRpdHlGaWVsZFR5cGUgICBUeXBlICAgYGpzb246ImlkZW50aXR5X2ZpZWxkX3R5cGUsb21pdGVtcHR5ImAKCUlkZW50aXR5RmllbGRJbmRleCAgaW50ICAgIGBqc29uOiJpZGVudGl0eV9maWVsZF9pbmRleCJgCglFbWJlZGRlZENvbGxlY3Rpb25zIFsgLy8gVGhlIG5hbWUgb2YgdGhlIGlkZW50aXR5IGZpZWxkIGZvciB0aGlzIENvbGxlY3Rpb24uICBEZWZhdWx0cyB0byAiaWQiLgoJLy8gU3BlY2lmaWVzIGhvdyBmaWVsZHMgaW4gdGhpcyBDb2xsZWN0aW9uIHJlbGF0ZSB0byByZWNvcmRzIGZyb20gb3RoZXIgY29sbGVjdGlvbnMuICBUaGlzIGlzCgkvLyBhIHBhcnRpYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWxhdGlvbmFsIG1vZGVsLCBzcGVjaWZpY2FsbHkgY2FwdHVyaW5nIG9uZS10by1vbmUgb3IKCS8vIG9uZS10by1tYW55IHJlbGF0aW9uc2hpcHMuICBUaGUgZGVmaW5pdGlvbnMgaGVyZSB3aWxsIHJldHJpZXZlIHRoZSBhc3NvY2lhdGVkIHJlY29yZHMgZnJvbQoJLy8gYW5vdGhlciwgYW5kIHRob3NlIHZhbHVlcyB3aWxsIHJlcGxhY2UgdGhlIHZhbHVlIHRoYXQgaXMgYWN0dWFsbHkgaW4gdGhpcyBDb2xsZWN0aW9uJ3MgZmllbGQuCgldUmVsYXRpb25zaGlwIGBqc29uOiJlbWJlZCxvbWl0ZW1wdHkiYAoJQ29uc3RyYWludHMgWyAvLyBBbGxvd3MgZm9yIGNvbnN0cmFpbnRzIHRvIGJlIGFwcGxpZWQgdG8gYSBjb2xsZWN0aW9uLiAgSW4gYWRkaXRpb24gdG8gaW5mb3JtaW5nIFBpdm90IGFib3V0IHRoZQoJLy8gcmVsYXRpb25zaGlwcyBiZXR3ZWVuIGNvbGxlY3Rpb25zLCB0aGlzIGRhdGEgaXMgYWxzbyB1c2VkIHRvIGVuZm9yY2UgcmVmZXJlbnRpYWwgaW50ZWdyaXR5IGZvcgoJLy8gYmFja2VuZHMgdGhhdCBzdXBwb3J0IHN1Y2ggZ3VhcmFudGVlcyAoZS5nLjogQUNJRC1jb21wbGlhbnQgUkRCTVMnKS4KCV1Db25zdHJhaW50IGBqc29uOiJjb25zdHJhaW50cyxvbWl0ZW1wdHkiYAoJRXhwb3J0ZWRGaWVsZHMgWyAvLyBTcGVjaWZpZXMgd2hpY2ggZmllbGRzIGNhbiBiZSBzZWVuIHdoZW4gcmVjb3JkcyBhcmUgZnJvbSByZWxhdGlvbnNoaXBzIGRlZmluZWQgb24gb3RoZXIKCS8vIENvbGxlY3Rpb25zLiAgVGhpcyBjYW4gYmUgdXNlZCB0byByZXN0cmljdCB0aGUgZXhwb3N1cmUpIG9mIHNlbnNpdGl2ZSBkYXRhIGluIHRoaXMgQ29sbGVjdGlvbgoJLy8gYmUgYmVpbmcgYW4gZW1iZWRkZWQgZmllbGQgaW4gYW5vdGhlciBDb2xsZWN0aW9uLgoJXXN0cmluZyBganNvbjoiZXhwb3J0LG9taXRlbXB0eSJgCglBbGxvd01pc3NpbmdFbWJlZGRlZFJlY29yZHMgYm9vbCAgICAgICAgICAgICAgICAgICAgYGpzb246ImFsbG93X21pc3NpbmdfZW1iZWRkZWRfcmVjb3JkcyJgCglUb3RhbFJlY29yZHMgICAgICAgICAgICAgICAgaW50NjQgICAgICAgICAgICAgICAgICAgYGpzb246InRvdGFsX3JlY29yZHMsb21pdGVtcHR5ImAKCVRvdGFsUmVjb3Jkc0V4YWN0ICAgICAgICAgICBib29sICAgICAgICAgICAgICAgICAgICBganNvbjoidG90YWxfcmVjb3Jkc19leGFjdCxvbWl0ZW1wdHkiYAoJVGltZVRvTGl2ZUZpZWxkICAgICAgICAgICAgIHN0cmluZyAgICAgICAgICAgICAgICAgIGBqc29uOiJ0aW1lX3RvX2xpdmVfZmllbGQiYAoJSWRlbnRpdHlGaWVsZEZvcm1hdHRlciAgICAgIEZpZWxkRm9ybWF0dGVyRnVuYyAgICAgIGBqc29uOiItImAKCUF1dG9JZGVudGl0eSAgICAgICAgICAgICAgICBzdHJpbmcgICAgICAgICAgICAgICAgICBganNvbjoiYXV0b2lkZW50aXR5ImAKCUlkZW50aXR5RmllbGRWYWxpZGF0b3IgICAgICBGaWVsZFZhbGlkYXRvckZ1bmMgICAgICBganNvbjoiLSJgCglTb3VyY2VVUkkgICAgICAgICAgICAgICAgICAgc3RyaW5nICAgICAgICAgICAgICAgICAgYGpzb246Ii0iYAoJUHJlU2F2ZVZhbGlkYXRvciAgICAgICAgICAgIENvbGxlY3Rpb25WYWxpZGF0b3JGdW5jIGBqc29uOiItImAKCVZpZXcgICAgICAgICAgICAgICAgICAgICAgICBib29sICAgICAgICAgICAgICAgICAgICBganNvbjoidmlldyxvbWl0ZW1wdHkiYAoJVmlld0tleXdvcmRzICAgICAgICAgICAgICAgIHN0cmluZyAgICAgICAgICAgICAgICAgIGBqc29uOiJ2aWV3X2tleXdvcmRzLG9taXRlbXB0eSJgCglWaWV3UXVlcnkgICAgICAgICAgICAgICAgICAgaW50ZXJmYWNle30gICAgICAgICAgICAgYGpzb246InZpZXdfcXVlcnksb21pdGVtcHR5ImAKCUFsd2F5c0NyZWF0ZSAgICAgICAgICAgICAgICBib29sICAgICAgICAgICAgICAgICAgICBganNvbjoiY3JlYXRlLG9taXRlbXB0eSJgCglSZWFkeSAgICAgICAgICAgICAgICAgICAgICAgYm9vbCAgICAgICAgICAgICAgICAgICAgYGpzb246InJlYWR5LG9taXRlbXB0eSJgCgp9Ly8gU3BlY2lmeSB3aGV0aGVyIG1pc3NpbmcgcmVsYXRlZCBmaWVsZHMgZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiByZXRyaWV2aW5nIGEgcmVjb3JkLgoK",
                    "HasUnexportedFields": true
                },
                "CollectionAction": {
                    "Name": "CollectionAction",
                    "MetaType": "int",
                    "Source": "dHlwZSBDb2xsZWN0aW9uQWN0aW9uIGludA=="
                },
                "CollectionValidatorFunc": {
                    "Name": "CollectionValidatorFunc",
                    "Source": "dHlwZSBDb2xsZWN0aW9uVmFsaWRhdG9yRnVuYyBmdW5jKCpSZWNvcmQpIGVycm9y"
                },
                "ConnectionString": {
                    "Name": "ConnectionString",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "Backend",
                            "Comment": "Returns the backend component of the string.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "Backend() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ClearOpt",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                }
                            ],
                            "Signature": "ClearOpt(key string)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Credentials",
                            "Comment": "Return the credentials (if any) associated with this string, and whether they\nwere present or not.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                },
                                {
                                    "Type": "string"
                                },
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Credentials() (string, string, bool)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Dataset",
                            "Comment": "Returns the dataset component of the string.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "Dataset() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "HasOpt",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "HasOpt(key string) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Host",
                            "Comment": "Returns the host component of the string.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "defaults",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "Host(defaults ...string) string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "LoadCredentialsFromNetrc",
                            "Comment": "Reads a .netrc-style file and loads the appropriate credentials.  The host component of\nthis connection string is matched with the netrc \"machine\" field.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "filename",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "LoadCredentialsFromNetrc(filename string) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Opt",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "typeutil.Variant"
                                }
                            ],
                            "Signature": "Opt(key string) typeutil.Variant",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "OptBool",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                },
                                {
                                    "Name": "fallback",
                                    "Type": "bool"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "OptBool(key string, fallback bool) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "OptDuration",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                },
                                {
                                    "Name": "fallback",
                                    "Type": "time.Duration"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "time.Duration"
                                }
                            ],
                            "Signature": "OptDuration(key string, fallback time.Duration) time.Duration",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "OptFloat",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                },
                                {
                                    "Name": "fallback",
                                    "Type": "float64"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                }
                            ],
                            "Signature": "OptFloat(key string, fallback float64) float64",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "OptInt",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                },
                                {
                                    "Name": "fallback",
                                    "Type": "int64"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "int64"
                                }
                            ],
                            "Signature": "OptInt(key string, fallback int64) int64",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "OptString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                },
                                {
                                    "Name": "fallback",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "OptString(key string, fallback string) string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "OptTime",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                },
                                {
                                    "Name": "fallback",
                                    "Type": "time.Time"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "time.Time"
                                }
                            ],
                            "Signature": "OptTime(key string, fallback time.Time) time.Time",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Protocol",
                            "Comment": "Returns the protocol component of the string.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "defaults",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "Protocol(defaults ...string) string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Scheme",
                            "Comment": "Returns the backend and protocol components of the string.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                },
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "Scheme() (string, string)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetCredentials",
                            "Comment": "Explicitly set username and password on this connection string",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "username",
                                    "Type": "string"
                                },
                                {
                                    "Name": "password",
                                    "Type": "string"
                                }
                            ],
                            "Signature": "SetCredentials(username string, password string)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ParseConnectionString",
                            "Arguments": [
                                {
                                    "Name": "conn",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "ConnectionString"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ParseConnectionString(conn string) (ConnectionString, error)",
                            "Source": "ewoJaWYgdXJpLCBlcnIgOj0gdXJsLlBhcnNlKGNvbm4pOyBlcnIgPT0gbmlsIHsKCQlpZiBlcnIgOj0gcHJlcGFyZVVSSSh1cmkpOyBlcnIgPT0gbmlsIHsKCQkJcmV0dXJuIENvbm5lY3Rpb25TdHJpbmd7VVJJOiB1cmksIE9wdGlvbnM6IG9wdGlvbnNGcm9tVVJJKHVyaSl9LCBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gQ29ubmVjdGlvblN0cmluZ3t9LCBlcnIKCQl9Cgl9IGVsc2UgewoJCXJldHVybiBDb25uZWN0aW9uU3RyaW5ne30sIGVycgoJfQp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "MustParseConnectionString",
                            "Arguments": [
                                {
                                    "Name": "conn",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "ConnectionString"
                                }
                            ],
                            "Signature": "MustParseConnectionString(conn string) ConnectionString",
                            "Source": "ewoJaWYgY3MsIGVyciA6PSBQYXJzZUNvbm5lY3Rpb25TdHJpbmcoY29ubik7IGVyciA9PSBuaWwgewoJCXJldHVybiBjcwoJfSBlbHNlIHsKCQlwYW5pYyhlcnIuRXJyb3IoKSkKCX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "MakeConnectionString",
                            "Arguments": [
                                {
                                    "Name": "scheme",
                                    "Type": "string"
                                },
                                {
                                    "Name": "host",
                                    "Type": "string"
                                },
                                {
                                    "Name": "dataset",
                                    "Type": "string"
                                },
                                {
                                    "Name": "options",
                                    "Type": "map[string]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "ConnectionString"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "MakeConnectionString(scheme string, host string, dataset string, options map[string]interface{}) (ConnectionString, error)",
                            "Source": "ewoJcXMgOj0gdXJsLlZhbHVlc3t9Cglmb3IgaywgdiA6PSByYW5nZSBvcHRpb25zIHsKCQlpZiBzdHJ2YWx1ZSwgZXJyIDo9IHN0cmluZ3V0aWwuVG9TdHJpbmcodik7IGVyciA9PSBuaWwgewoJCQl2YWx1ZXMgOj0gc3RyaW5ncy5TcGxpdChzdHJ2YWx1ZSwgYCxgKQoJCQlmb3IgXywgdnYgOj0gcmFuZ2UgdmFsdWVzIHsKCQkJCXFzLkFkZChrLCB2dikKCQkJfQoJCX0gZWxzZSB7CgkJCXJldHVybiBDb25uZWN0aW9uU3RyaW5ne30sIGVycgoJCX0KCX0KCXVyaSA6PSAmdXJsLlVSTHtTY2hlbWU6IHNjaGVtZSwgSG9zdDogaG9zdCwgUGF0aDogZGF0YXNldCwgUmF3UXVlcnk6IHFzLkVuY29kZSgpfQoJaWYgZXJyIDo9IHByZXBhcmVVUkkodXJpKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIENvbm5lY3Rpb25TdHJpbmd7VVJJOiB1cmksIE9wdGlvbnM6IG9wdGlvbnNGcm9tVVJJKHVyaSl9LCBuaWwKCX0gZWxzZSB7CgkJcmV0dXJuIENvbm5lY3Rpb25TdHJpbmd7fSwgZXJyCgl9Cn0=",
                            "IsPackageLevel": true
                        }
                    ],
                    "Fields": [
                        {
                            "Name": "URI",
                            "Type": "*url.URL"
                        },
                        {
                            "Name": "Options",
                            "Type": "map[string]interface{}"
                        }
                    ],
                    "Source": "dHlwZSBDb25uZWN0aW9uU3RyaW5nIHN0cnVjdCB7CglVUkkgICAgICp1cmwuVVJMCglPcHRpb25zIG1hcFtzdHJpbmddaW50ZXJmYWNle30KfQ=="
                },
                "Constraint": {
                    "Name": "Constraint",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "Equal",
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "other",
                                    "Type": "*Constraint"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Equal(other *Constraint) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Validate",
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Validate() error",
                            "IsPackageLevel": false
                        }
                    ],
                    "Fields": [
                        {
                            "Name": "On",
                            "Type": "interface{}",
                            "Comment": "Represents the name (or array of names) of the local field the constraint is being applied to."
                        },
                        {
                            "Name": "Collection",
                            "Type": "string",
                            "Comment": "The remote collection the constraint applies to."
                        },
                        {
                            "Name": "Field",
                            "Type": "interface{}",
                            "Comment": "The remote field (or fields) in the remote collection the constraint applies to."
                        },
                        {
                            "Name": "Options",
                            "Type": "string",
                            "Comment": "Provides backend-specific additional options for the constraint."
                        },
                        {
                            "Name": "Into",
                            "Type": "string",
                            "Comment": "Specifies the local field that related records will be put into.  Defaults to the field specified in On."
                        },
                        {
                            "Name": "NoEmbed",
                            "Type": "bool",
                            "Comment": "Whether to omit this constraint when determining embedded collections."
                        }
                    ],
                    "Source": "dHlwZSBDb25zdHJhaW50IHN0cnVjdCB7CglPbiAgICAgICAgIGludGVyZmFjZXt9IGBqc29uOiJvbiJgCglDb2xsZWN0aW9uIHN0cmluZyAgICAgIGBqc29uOiJjb2xsZWN0aW9uImAKCUZpZWxkICAgICAgaW50ZXJmYWNle30gYGpzb246ImZpZWxkImAKCU9wdGlvbnMgICAgc3RyaW5nICAgICAgYGpzb246Im9wdGlvbnMsb21pdGVtcHR5ImAKCUludG8gICAgICAgc3RyaW5nICAgICAgYGpzb246ImludG8sb21pdGVtcHR5ImAKCU5vRW1iZWQgICAgYm9vbCAgICAgICAgYGpzb246Im5vZW1iZWQsb21pdGVtcHR5ImAKfS8vIFJlcHJlc2VudHMgdGhlIG5hbWUgKG9yIGFycmF5IG9mIG5hbWVzKSBvZiB0aGUgbG9jYWwgZmllbGQgdGhlIGNvbnN0cmFpbnQgaXMgYmVpbmcgYXBwbGllZCB0by4KLy8gV2hldGhlciB0byBvbWl0IHRoaXMgY29uc3RyYWludCB3aGVuIGRldGVybWluaW5nIGVtYmVkZGVkIGNvbGxlY3Rpb25zLgo="
                },
                "DeltaIssue": {
                    "Name": "DeltaIssue",
                    "MetaType": "int",
                    "Source": "dHlwZSBEZWx0YUlzc3VlIGludA=="
                },
                "DeltaType": {
                    "Name": "DeltaType",
                    "MetaType": "string",
                    "Source": "dHlwZSBEZWx0YVR5cGUgc3RyaW5n"
                },
                "EncoderFunc": {
                    "Name": "EncoderFunc",
                    "Source": "dHlwZSBFbmNvZGVyRnVuYyBmdW5jKFtdYnl0ZSkgKHN0cmluZywgZXJyb3IpIC8ve30K"
                },
                "Field": {
                    "Name": "Field",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "BelongsToConstraint",
                            "Comment": "Parses the value of BelongsTo into a valid Constraint",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*Constraint"
                                }
                            ],
                            "Signature": "BelongsToConstraint() *Constraint",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ConvertValue",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "in",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ConvertValue(in interface{}) (interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Diff",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "other",
                                    "Type": "*Field"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "[]*SchemaDelta"
                                }
                            ],
                            "Signature": "Diff(other *Field) []*SchemaDelta",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Format",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "value",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "op",
                                    "Type": "FieldOperation"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Format(value interface{}, op FieldOperation) (interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetDefaultValue",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "interface{}"
                                }
                            ],
                            "Signature": "GetDefaultValue() interface{}",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetTypeInstance",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "interface{}"
                                }
                            ],
                            "Signature": "GetTypeInstance() interface{}",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "MarshalJSON",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]byte"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "MarshalJSON() ([]byte, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "UnmarshalJSON",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "b",
                                    "Type": "[]byte"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "UnmarshalJSON(b []byte) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Validate",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "value",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Validate(value interface{}) error",
                            "IsPackageLevel": false
                        }
                    ],
                    "Fields": [
                        {
                            "Name": "Name",
                            "Type": "string",
                            "Comment": "The name of the field"
                        },
                        {
                            "Name": "Description",
                            "Type": "string",
                            "Comment": "A description of the field used in help text"
                        },
                        {
                            "Name": "Type",
                            "Type": "Type",
                            "Comment": "The data type of the field"
                        },
                        {
                            "Name": "KeyType",
                            "Type": "Type",
                            "Comment": "For complex field types (tuples, objects); the data type of the key portion"
                        },
                        {
                            "Name": "Subtype",
                            "Type": "Type",
                            "Comment": "For complex field types (arrays, sets, lists); the data type of the contained values"
                        },
                        {
                            "Name": "Length",
                            "Type": "int",
                            "Comment": "The length constraint for values in the field (where supported)"
                        },
                        {
                            "Name": "Precision",
                            "Type": "int",
                            "Comment": "The precision of stored values in the field (where supported)"
                        },
                        {
                            "Name": "Identity",
                            "Type": "bool",
                            "Comment": "Whether the field is an identity field (don't use this, configure the identity on the\nCollection instead)"
                        },
                        {
                            "Name": "Key",
                            "Type": "bool",
                            "Comment": "Whether the field is a key field in a composite key Collection"
                        },
                        {
                            "Name": "Required",
                            "Type": "bool",
                            "Comment": "Whether the field can store a null/empty value"
                        },
                        {
                            "Name": "Unique",
                            "Type": "bool",
                            "Comment": "Enforces that the field value must be unique across the entire Collection (where supported)"
                        },
                        {
                            "Name": "UniqueGroup",
                            "Type": "string",
                            "Comment": "The name of a group of unique fields that, taken together, must be unique across the entire\nCollection (where supported)"
                        },
                        {
                            "Name": "DefaultValue",
                            "Type": "interface{}",
                            "Comment": "The default value of the field is one is not explicitly specified.  Can be any type or a\nfunction that takes zero arguments and returns a single value."
                        },
                        {
                            "Name": "NativeType",
                            "Type": "string",
                            "Comment": "Represents the native datatype of the underlying Backend object (read only)"
                        },
                        {
                            "Name": "NotUserEditable",
                            "Type": "bool",
                            "Comment": "Specify that the field should not be modified.  This is not enforced in Pivot, but rather\nserves as a note to applications implementing interactions with the Pivot API."
                        },
                        {
                            "Name": "ValidateOnPopulate",
                            "Type": "bool",
                            "Comment": "Whether this field's validator(s) should be used to validate data being retrieved from the\nbackend.  Invalid data (possibly created outside of Pivot) will cause Retrieve() calls to\nreturn a validation error."
                        },
                        {
                            "Name": "Validator",
                            "Type": "FieldValidatorFunc",
                            "Comment": "A function that is used to validate the field's value before performing any create, update,\nand (optionally) retrieval operations."
                        },
                        {
                            "Name": "Formatter",
                            "Type": "FieldFormatterFunc",
                            "Comment": "A function that can modify values before any create or update operations.  Formatters run\nbefore Validators, giving users the opportunity to ensure a valid value is in the data\nstructure before validation runs."
                        },
                        {
                            "Name": "ValidatorConfig",
                            "Type": "map[string]interface{}",
                            "Comment": "A declarative form of the Validator configuration that uses pre-defined validators. Primarily\nused when storing schema declarations in external JSON files."
                        },
                        {
                            "Name": "FormatterConfig",
                            "Type": "map[string]interface{}",
                            "Comment": "A declarative form of the Formatter configuration that uses pre-defined validators. Primarily\nused when storing schema declarations in external JSON files."
                        },
                        {
                            "Name": "Index",
                            "Type": "int",
                            "Comment": "Used to store the order this field appears in the source database."
                        },
                        {
                            "Name": "BelongsTo",
                            "Type": "interface{}",
                            "Comment": "Specify a relationship between this field and another collection.\n\nIf given a string, it will be interpreted as a collection name and a\nconstaint against that collection's identity field will be created.\n\nIf given a *Collection, the same behavior as above will occur, but using\nthe Collection.Name from the given struct.\n\nIf given a Constraint, the constraint will be added to this field's\nparent collection with the \"On\" field set to this field's name."
                        },
                        {
                            "Name": "ReadOnly",
                            "Type": "bool",
                            "Comment": "Specifies that the field may not be updated, only read.  Attempts to update the field will be silently discarded."
                        }
                    ],
                    "Source": "dHlwZSBGaWVsZCBzdHJ1Y3QgewoJTmFtZSAgICAgICAgICAgICAgIHN0cmluZyAgICAgICAgICAgICBganNvbjoibmFtZSJgCglEZXNjcmlwdGlvbiAgICAgICAgc3RyaW5nICAgICAgICAgICAgIGBqc29uOiJkZXNjcmlwdGlvbixvbWl0ZW1wdHkiYAoJVHlwZSAgICAgICAgICAgICAgIFR5cGUgICAgICAgICAgICAgICBganNvbjoidHlwZSJgCglLZXlUeXBlICAgICAgICAgICAgVHlwZSAgICAgICAgICAgICAgIGBqc29uOiJrZXl0eXBlLG9taXRlbXB0eSJgCglTdWJ0eXBlICAgICAgICAgICAgVHlwZSAgICAgICAgICAgICAgIGBqc29uOiJzdWJ0eXBlLG9taXRlbXB0eSJgCglMZW5ndGggICAgICAgICAgICAgaW50ICAgICAgICAgICAgICAgIGBqc29uOiJsZW5ndGgsb21pdGVtcHR5ImAKCVByZWNpc2lvbiAgICAgICAgICBpbnQgICAgICAgICAgICAgICAgYGpzb246InByZWNpc2lvbixvbWl0ZW1wdHkiYAoJSWRlbnRpdHkgICAgICAgICAgIGJvb2wgICAgICAgICAgICAgICBganNvbjoiaWRlbnRpdHksb21pdGVtcHR5ImAKCUtleSAgICAgICAgICAgICAgICBib29sICAgICAgICAgICAgICAgYGpzb246ImtleSxvbWl0ZW1wdHkiYAoJUmVxdWlyZWQgICAgICAgICAgIGJvb2wgICAgICAgICAgICAgICBganNvbjoicmVxdWlyZWQsb21pdGVtcHR5ImAKCVVuaXF1ZSAgICAgICAgICAgICBib29sICAgICAgICAgICAgICAgYGpzb246InVuaXF1ZSxvbWl0ZW1wdHkiYAoJVW5pcXVlR3JvdXAgICAgICAgIHN0cmluZyAgICAgICAgICAgICBganNvbjoidW5pcXVlX2dyb3VwLG9taXRlbXB0eSJgCglEZWZhdWx0VmFsdWUgICAgICAgaW50ZXJmYWNle30gICAgICAgIGBqc29uOiJkZWZhdWx0LG9taXRlbXB0eSJgCglOYXRpdmVUeXBlICAgICAgICAgc3RyaW5nICAgICAgICAgICAgIGBqc29uOiJuYXRpdmVfdHlwZSxvbWl0ZW1wdHkiYAoJTm90VXNlckVkaXRhYmxlICAgIGJvb2wgICAgICAgICAgICAgICBganNvbjoibm90X3VzZXJfZWRpdGFibGUiYAoJVmFsaWRhdGVPblBvcHVsYXRlIGJvb2wgICAgICAgICAgICAgICBganNvbjoidmFsaWRhdGVfb25fcG9wdWxhdGUsb21pdGVtcHR5ImAKCVZhbGlkYXRvciAgICAgICAgICBGaWVsZFZhbGlkYXRvckZ1bmMgYGpzb246Ii0iYAoJRm9ybWF0dGVyICAgICAgICAgIEZpZWxkRm9ybWF0dGVyRnVuYyBganNvbjoiLSJgCglWYWxpZGF0b3JDb25maWcgICAgbWFwIC8vIFRoZSBuYW1lIG9mIHRoZSBmaWVsZAoJLy8gQSBkZWNsYXJhdGl2ZSBmb3JtIG9mIHRoZSBWYWxpZGF0b3IgY29uZmlndXJhdGlvbiB0aGF0IHVzZXMgcHJlLWRlZmluZWQgdmFsaWRhdG9ycy4gUHJpbWFyaWx5CgkvLyB1c2VkIHdoZW4gc3RvcmluZyBzY2hlbWEgZGVjbGFyYXRpb25zIGluIGV4dGVybmFsIEpTT04gZmlsZXMuCglbc3RyaW5nXWludGVyZmFjZXt9IGBqc29uOiJ2YWxpZGF0b3JzLG9taXRlbXB0eSJgCglGb3JtYXR0ZXJDb25maWcgbWFwIC8vIEEgZGVjbGFyYXRpdmUgZm9ybSBvZiB0aGUgRm9ybWF0dGVyIGNvbmZpZ3VyYXRpb24gdGhhdCB1c2VzIHByZS1kZWZpbmVkIHZhbGlkYXRvcnMuIFByaW1hcmlseQoJLy8gdXNlZCB3aGVuIHN0b3Jpbmcgc2NoZW1hIGRlY2xhcmF0aW9ucyBpbiBleHRlcm5hbCBKU09OIGZpbGVzLgoJW3N0cmluZ11pbnRlcmZhY2V7fSBganNvbjoiZm9ybWF0dGVycyxvbWl0ZW1wdHkiYAoJSW5kZXggICAgIGludCAgICAgICAgIGBqc29uOiJpbmRleCxvbWl0ZW1wdHkiYAoJQmVsb25nc1RvIGludGVyZmFjZXt9IGBqc29uOiJiZWxvbmdzX3RvLG9taXRlbXB0eSJgCglSZWFkT25seSAgYm9vbCAgICAgICAgYGpzb246InJlYWRvbmx5LG9taXRlbXB0eSJgCn0vLyBVc2VkIHRvIHN0b3JlIHRoZSBvcmRlciB0aGlzIGZpZWxkIGFwcGVhcnMgaW4gdGhlIHNvdXJjZSBkYXRhYmFzZS4KLy8gU3BlY2lmaWVzIHRoYXQgdGhlIGZpZWxkIG1heSBub3QgYmUgdXBkYXRlZCwgb25seSByZWFkLiAgQXR0ZW1wdHMgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aWxsIGJlIHNpbGVudGx5IGRpc2NhcmRlZC4K"
                },
                "FieldFormatterFunc": {
                    "Name": "FieldFormatterFunc",
                    "Methods": [
                        {
                            "Name": "FormatterFromMap",
                            "Arguments": [
                                {
                                    "Name": "in",
                                    "Type": "map[string]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "FieldFormatterFunc"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FormatterFromMap(in map[string]interface{}) (FieldFormatterFunc, error)",
                            "Source": "ewoJZm9ybWF0dGVycyA6PSBtYWtlKFtdRmllbGRGb3JtYXR0ZXJGdW5jLCAwKQoJZm9yIG5hbWUsIGRlZm4gOj0gcmFuZ2UgaW4gewoJCWlmIGZvcm1hdHRlciwgZXJyIDo9IEdldEZvcm1hdHRlcihuYW1lLCBkZWZuKTsgZXJyID09IG5pbCB7CgkJCWZvcm1hdHRlcnMgPSBhcHBlbmQoZm9ybWF0dGVycywgZm9ybWF0dGVyKQoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkludmFsaWQgZm9ybWF0dGVyIGNvbmZpZ3VyYXRpb24gJXY6ICV2IiwgbmFtZSwgZXJyKQoJCX0KCX0KCXJldHVybiBGb3JtYXRBbGwoZm9ybWF0dGVycy4uLiksIG5pbAp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "GetFormatter",
                            "Arguments": [
                                {
                                    "Name": "name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "args",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "FieldFormatterFunc"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GetFormatter(name string, args interface{}) (FieldFormatterFunc, error)",
                            "Source": "ewoJc3dpdGNoIG5hbWUgewoJY2FzZSBgdXVpZGA6CgkJcmV0dXJuIEdlbmVyYXRlVVVJRCwgbmlsCgljYXNlIGBlbmNvZGVkLXV1aWRgOgoJCXZhciBlbmNvZGVyIEVuY29kZXJGdW5jCgkJc3dpdGNoIGZtdC5TcHJpbnRmKCIldiIsIGFyZ3MpIHsKCQljYXNlIGBiYXNlMzJgOgoJCQllbmNvZGVyID0gQmFzZTMyRW5jb2RlcgoJCWNhc2UgYGJhc2U1OGA6CgkJCWVuY29kZXIgPSBCYXNlNThFbmNvZGVyCgkJY2FzZSBgYmFzZTY0YDoKCQkJZW5jb2RlciA9IEJhc2U2NEVuY29kZXIKCQlkZWZhdWx0OgoJCQllbmNvZGVyID0gSGV4RW5jb2RlcgoJCX0KCQlyZXR1cm4gR2VuZXJhdGVFbmNvZGVkVVVJRChlbmNvZGVyKSwgbmlsCgljYXNlIGB0cmltLXNwYWNlYDoKCQlyZXR1cm4gVHJpbVNwYWNlLCBuaWwKCWNhc2UgYGNoYW5nZS1jYXNlYDoKCQlyZXR1cm4gQ2hhbmdlQ2FzZShzbGljZXV0aWwuU3RyaW5naWZ5KGFyZ3MpLi4uKSwgbmlsCgljYXNlIGByZXBsYWNlYDoKCQlyZXR1cm4gUmVwbGFjZShzbGljZXV0aWwuU2xpY2VpZnkoYXJncykpLCBuaWwKCWNhc2UgYGN1cnJlbnQtdGltZWA6CgkJcmV0dXJuIEN1cnJlbnRUaW1lLCBuaWwKCWNhc2UgYGN1cnJlbnQtdGltZS1pZi11bnNldGA6CgkJcmV0dXJuIEN1cnJlbnRUaW1lSWZVbnNldCwgbmlsCgljYXNlIGBub3ctcGx1cy1kdXJhdGlvbmA6CgkJcmV0dXJuIE5vd1BsdXNEdXJhdGlvbih0eXBldXRpbC5WKGFyZ3MpLkR1cmF0aW9uKCkpLCBuaWwKCWRlZmF1bHQ6CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiVW5rbm93biBmb3JtYXR0ZXIgJXEiLCBuYW1lKQoJfQp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "FormatAll",
                            "Arguments": [
                                {
                                    "Name": "formatters",
                                    "Type": "...FieldFormatterFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "FieldFormatterFunc"
                                }
                            ],
                            "Signature": "FormatAll(formatters ...FieldFormatterFunc) FieldFormatterFunc",
                            "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30sIG9wIEZpZWxkT3BlcmF0aW9uKSAoaW50ZXJmYWNle30sIGVycm9yKSB7CgkJZm9yIF8sIGZvcm1hdHRlciA6PSByYW5nZSBmb3JtYXR0ZXJzIHsKCQkJaWYgdiwgZXJyIDo9IGZvcm1hdHRlcih2YWx1ZSwgb3ApOyBlcnIgPT0gbmlsIHsKCQkJCXZhbHVlID0gdgoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIG5pbCwgZXJyCgkJCX0KCQl9CgkJcmV0dXJuIHZhbHVlLCBuaWwKCX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "ChangeCase",
                            "Arguments": [
                                {
                                    "Name": "cases",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "FieldFormatterFunc"
                                }
                            ],
                            "Signature": "ChangeCase(cases ...string) FieldFormatterFunc",
                            "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30sIF8gRmllbGRPcGVyYXRpb24pIChpbnRlcmZhY2V7fSwgZXJyb3IpIHsKCQlpZiByZWNvcmQsIG9rIDo9IHZhbHVlLigqUmVjb3JkKTsgb2sgewoJCQl2YWx1ZSA9IHJlY29yZC5JRAoJCX0KCQlpZiB2U3RyLCBlcnIgOj0gc3RyaW5ndXRpbC5Ub1N0cmluZyh2YWx1ZSk7IGVyciA9PSBuaWwgewoJCQlmb3IgXywgYyA6PSByYW5nZSBjYXNlcyB7CgkJCQlzd2l0Y2ggYyB7CgkJCQljYXNlIGB1cHBlcmA6CgkJCQkJdlN0ciA9IHN0cmluZ3MuVG9VcHBlcih2U3RyKQoJCQkJY2FzZSBgbG93ZXJgOgoJCQkJCXZTdHIgPSBzdHJpbmdzLlRvTG93ZXIodlN0cikKCQkJCWNhc2UgYGNhbWVsaXplYDoKCQkJCQl2U3RyID0gc3RyaW5ndXRpbC5DYW1lbGl6ZSh2U3RyKQoJCQkJY2FzZSBgaHlwaGVuYXRlYDoKCQkJCQl2U3RyID0gc3RyaW5ndXRpbC5IeXBoZW5hdGUodlN0cikKCQkJCWNhc2UgYHVuZGVyc2NvcmVgOgoJCQkJCXZTdHIgPSBzdHJpbmd1dGlsLlVuZGVyc2NvcmUodlN0cikKCQkJCWNhc2UgYHRpdGxlYDoKCQkJCQl2U3RyID0gc3RyaW5ncy5UaXRsZSh2U3RyKQoJCQkJZGVmYXVsdDoKCQkJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJVbnN1cHBvcnRlZCBjYXNlICclcyciLCBjKQoJCQkJfQoJCQl9CgkJCXJldHVybiB2U3RyLCBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gdmFsdWUsIGVycgoJCX0KCX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "Replace",
                            "Arguments": [
                                {
                                    "Name": "pairs",
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "FieldFormatterFunc"
                                }
                            ],
                            "Signature": "Replace(pairs []interface{}) FieldFormatterFunc",
                            "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30sIF8gRmllbGRPcGVyYXRpb24pIChpbnRlcmZhY2V7fSwgZXJyb3IpIHsKCQlpZiB2U3RyLCBlcnIgOj0gc3RyaW5ndXRpbC5Ub1N0cmluZyh2YWx1ZSk7IGVyciA9PSBuaWwgewoJCQlmb3IgXywgcGFpciA6PSByYW5nZSBwYWlycyB7CgkJCQlwIDo9IHNsaWNldXRpbC5TdHJpbmdpZnkocGFpcikKCQkJCWlmIGxlbihwKSAhPSAyIHsKCQkJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCIncmVwbGFjZScgZm9ybWF0dGVyIHJlcXVpcmVzIGFuIGFyZ3VtZW50IG9mIFtbRklORFBBVFRFUk4sIFJFUExBQ0VXSVRIXSwgLi5dIikKCQkJCX0gZWxzZSB7CgkJCQkJZmluZCA6PSBwWzBdCgkJCQkJcmVwbGFjZSA6PSBwWzFdCgkJCQkJaWYgcmVjb3JkLCBvayA6PSB2YWx1ZS4oKlJlY29yZCk7IG9rIHsKCQkJCQkJdmFsdWUgPSByZWNvcmQuSUQKCQkJCQl9CgkJCQkJaWYgcngsIGVyciA6PSByZWdleHAuQ29tcGlsZShmaW5kKTsgZXJyID09IG5pbCB7CgkJCQkJCXZTdHIgPSByeC5SZXBsYWNlQWxsU3RyaW5nKHZTdHIsIHJlcGxhY2UpCgkJCQkJfSBlbHNlIHsKCQkJCQkJcmV0dXJuIHZhbHVlLCBmbXQuRXJyb3JmKCJpbnZhbGlkIGZpbmQgcGF0dGVybjogJXYiLCBlcnIpCgkJCQkJfQoJCQkJfQoJCQl9CgkJCXJldHVybiB2U3RyLCBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gdmFsdWUsIGVycgoJCX0KCX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "GenerateEncodedUUID",
                            "Comment": "Same as GenerateUUID, but allows for a custom representation of the underlying bytes.",
                            "Arguments": [
                                {
                                    "Name": "encoder",
                                    "Type": "EncoderFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "FieldFormatterFunc"
                                }
                            ],
                            "Signature": "GenerateEncodedUUID(encoder EncoderFunc) FieldFormatterFunc",
                            "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30sIF8gRmllbGRPcGVyYXRpb24pIChpbnRlcmZhY2V7fSwgZXJyb3IpIHsKCQlpZiByZWNvcmQsIG9rIDo9IHZhbHVlLigqUmVjb3JkKTsgb2sgewoJCQl2YWx1ZSA9IHJlY29yZC5JRAoJCX0KCQlpZiB0eXBldXRpbC5Jc1plcm8odmFsdWUpIHsKCQkJaWYgdiwgZXJyIDo9IGVuY29kZXIoc3RyaW5ndXRpbC5VVUlEKCkuQnl0ZXMoKSk7IGVyciA9PSBuaWwgewoJCQkJaWYgdHlwZXV0aWwuSXNaZXJvKHYpIHsKCQkJCQlyZXR1cm4gdmFsdWUsIGZtdC5FcnJvcmYoIlVVSUQgZW5jb2RlciBwcm9kdWNlZCBhIHplcm8tbGVuZ3RoIHJlc3VsdCIpCgkJCQl9CgkJCQl2YWx1ZSA9IHYKCQkJfSBlbHNlIHsKCQkJCXJldHVybiB2YWx1ZSwgZXJyCgkJCX0KCQl9CgkJcmV0dXJuIHZhbHVlLCBuaWwKCX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "IfUnset",
                            "Comment": "Only evaluates the given formatter if the current value of the field is empty.",
                            "Arguments": [
                                {
                                    "Name": "onlyIf",
                                    "Type": "FieldFormatterFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "FieldFormatterFunc"
                                }
                            ],
                            "Signature": "IfUnset(onlyIf FieldFormatterFunc) FieldFormatterFunc",
                            "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30sIG9wIEZpZWxkT3BlcmF0aW9uKSAoaW50ZXJmYWNle30sIGVycm9yKSB7CgkJaWYgb25seUlmICE9IG5pbCB7CgkJCWlmIHR5cGV1dGlsLklzWmVybyh2YWx1ZSkgewoJCQkJcmV0dXJuIG9ubHlJZih2YWx1ZSwgb3ApCgkJCX0KCQl9CgkJcmV0dXJuIHZhbHVlLCBuaWwKCX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "DeriveFromFields",
                            "Comment": "Extracts values from the given Record and generates a deterministic output based on those values.",
                            "Arguments": [
                                {
                                    "Name": "format",
                                    "Type": "string"
                                },
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "FieldFormatterFunc"
                                }
                            ],
                            "Signature": "DeriveFromFields(format string, fields ...string) FieldFormatterFunc",
                            "Source": "ewoJcmV0dXJuIGZ1bmMoaW5wdXQgaW50ZXJmYWNle30sIF8gRmllbGRPcGVyYXRpb24pIChpbnRlcmZhY2V7fSwgZXJyb3IpIHsKCQlpZiByZWNvcmQsIG9rIDo9IGlucHV0LigqUmVjb3JkKTsgb2sgewoJCQl2YWx1ZXMgOj0gbWFrZShbXWludGVyZmFjZXt9LCBsZW4oZmllbGRzKSkKCQkJZm9yIGksIGZpZWxkIDo9IHJhbmdlIGZpZWxkcyB7CgkJCQl2YWx1ZXNbaV0gPSByZWNvcmQuR2V0KGZpZWxkKQoJCQl9CgkJCXJldHVybiBmbXQuU3ByaW50Zihmb3JtYXQsIHZhbHVlcy4uLiksIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkRlcml2ZUZyb21GaWVsZHMgZm9ybWF0dGVyIHJlcXVpcmVzIGEgKmRhbC5SZWNvcmQgYXJndW1lbnQsIGdvdCAlVCIsIGlucHV0KQoJCX0KCX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "NowPlusDuration",
                            "Comment": "Returns the current time with an added offset when the field is persisted.",
                            "Arguments": [
                                {
                                    "Name": "duration",
                                    "Type": "time.Duration"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "FieldFormatterFunc"
                                }
                            ],
                            "Signature": "NowPlusDuration(duration time.Duration) FieldFormatterFunc",
                            "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30sIG9wIEZpZWxkT3BlcmF0aW9uKSAoaW50ZXJmYWNle30sIGVycm9yKSB7CgkJaWYgb3AgPT0gUGVyc2lzdE9wZXJhdGlvbiB7CgkJCWlmIGR1cmF0aW9uICE9IDAgewoJCQkJcmV0dXJuIHRpbWUuTm93KCkuQWRkKGR1cmF0aW9uKSwgbmlsCgkJCX0KCQl9CgkJcmV0dXJuIHZhbHVlLCBuaWwKCX0KfQ==",
                            "IsPackageLevel": true
                        }
                    ],
                    "Source": "dHlwZSBGaWVsZEZvcm1hdHRlckZ1bmMgZnVuYyhpbnRlcmZhY2V7fSwgRmllbGRPcGVyYXRpb24pIChpbnRlcmZhY2V7fSwgZXJyb3Ip"
                },
                "FieldOperation": {
                    "Name": "FieldOperation",
                    "MetaType": "int",
                    "Source": "dHlwZSBGaWVsZE9wZXJhdGlvbiBpbnQ="
                },
                "FieldValidatorFunc": {
                    "Name": "FieldValidatorFunc",
                    "Source": "dHlwZSBGaWVsZFZhbGlkYXRvckZ1bmMgZnVuYyhpbnRlcmZhY2V7fSkgZXJyb3I="
                },
                "Migratable": {
                    "Name": "Migratable",
                    "Source": "dHlwZSBNaWdyYXRhYmxlIGludGVyZmFjZXsgTWlncmF0ZSgpIGVycm9yIH0="
                },
                "Model": {
                    "Name": "Model",
                    "Source": "dHlwZSBNb2RlbCBpbnRlcmZhY2V7fQ=="
                },
                "Record": {
                    "Name": "Record",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "Append",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                },
                                {
                                    "Name": "value",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Record"
                                }
                            ],
                            "Signature": "Append(key string, value ...interface{}) *Record",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "AppendNested",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                },
                                {
                                    "Name": "value",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Record"
                                }
                            ],
                            "Signature": "AppendNested(key string, value ...interface{}) *Record",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Copy",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "other",
                                    "Type": "*Record"
                                },
                                {
                                    "Name": "schema",
                                    "Type": "...*Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Copy(other *Record, schema ...*Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Get",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                },
                                {
                                    "Name": "fallback",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "interface{}"
                                }
                            ],
                            "Signature": "Get(key string, fallback ...interface{}) interface{}",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetNested",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                },
                                {
                                    "Name": "fallback",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "interface{}"
                                }
                            ],
                            "Signature": "GetNested(key string, fallback ...interface{}) interface{}",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetString",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                },
                                {
                                    "Name": "fallback",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "GetString(key string, fallback ...string) string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Keys",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Signature": "Keys(collection *Collection) []interface{}",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Map",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string]interface{}"
                                }
                            ],
                            "Signature": "Map(fields ...string) map[string]interface{}",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "NewRecord",
                            "Arguments": [
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "data",
                                    "Type": "...map[string]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Record"
                                }
                            ],
                            "Signature": "NewRecord(id interface{}, data ...map[string]interface{}) *Record",
                            "Source": "ewoJcmVjb3JkIDo9ICZSZWNvcmR7SUQ6IGlkfQoJaWYgbGVuKGRhdGEpID4gMCAmJiBsZW4oZGF0YVswXSkgPiAwIHsKCQlyZWNvcmQuRmllbGRzID0gZGF0YVswXQoJfSBlbHNlIHsKCQlyZWNvcmQuRmllbGRzID0gbWFrZShtYXBbc3RyaW5nXWludGVyZmFjZXt9KQoJfQoJcmV0dXJuIHJlY29yZAp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "NewRecordErr",
                            "Arguments": [
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "err",
                                    "Type": "error"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Record"
                                }
                            ],
                            "Signature": "NewRecordErr(id interface{}, err error) *Record",
                            "Source": "ewoJcmV0dXJuICZSZWNvcmR7SUQ6IGlkLCBGaWVsZHM6IG1ha2UobWFwW3N0cmluZ11pbnRlcmZhY2V7fSksIEVycm9yOiBlcnJ9Cn0=",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "OnlyFields",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Record"
                                }
                            ],
                            "Signature": "OnlyFields(fields []string) *Record",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Populate",
                            "Comment": "Populates a given struct with with the values in this record.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "into",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "collection",
                                    "Type": "*Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Populate(into interface{}, collection *Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Set",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                },
                                {
                                    "Name": "value",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Record"
                                }
                            ],
                            "Signature": "Set(key string, value interface{}) *Record",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetData",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "data",
                                    "Type": "[]byte"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Record"
                                }
                            ],
                            "Signature": "SetData(data []byte) *Record",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetFields",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "values",
                                    "Type": "map[string]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Record"
                                }
                            ],
                            "Signature": "SetFields(values map[string]interface{}) *Record",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetKeys",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "collection",
                                    "Type": "*Collection"
                                },
                                {
                                    "Name": "op",
                                    "Type": "FieldOperation"
                                },
                                {
                                    "Name": "keys",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "SetKeys(collection *Collection, op FieldOperation, keys ...interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "SetNested",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "key",
                                    "Type": "string"
                                },
                                {
                                    "Name": "value",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Record"
                                }
                            ],
                            "Signature": "SetNested(key string, value interface{}) *Record",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        }
                    ],
                    "Fields": [
                        {
                            "Name": "ID",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "Fields",
                            "Type": "map[string]interface{}"
                        },
                        {
                            "Name": "Data",
                            "Type": "[]byte"
                        },
                        {
                            "Name": "Error",
                            "Type": "error"
                        },
                        {
                            "Name": "CollectionName",
                            "Type": "string"
                        },
                        {
                            "Name": "Operation",
                            "Type": "string"
                        },
                        {
                            "Name": "Optional",
                            "Type": "bool"
                        }
                    ],
                    "Source": "dHlwZSBSZWNvcmQgc3RydWN0IHsKCUlEICAgICAgICAgICAgIGludGVyZmFjZXt9ICAgICAgICAgICAgYGpzb246ImlkImAKCUZpZWxkcyAgICAgICAgIG1hcFtzdHJpbmddaW50ZXJmYWNle30gYGpzb246ImZpZWxkcyxvbWl0ZW1wdHkiYAoJRGF0YSAgICAgICAgICAgW11ieXRlICAgICAgICAgICAgICAgICBganNvbjoiZGF0YSxvbWl0ZW1wdHkiYAoJRXJyb3IgICAgICAgICAgZXJyb3IgICAgICAgICAgICAgICAgICBganNvbjoiZXJyb3Isb21pdGVtcHR5ImAKCUNvbGxlY3Rpb25OYW1lIHN0cmluZyAgICAgICAgICAgICAgICAgYGpzb246ImNvbGxlY3Rpb24sb21pdGVtcHR5ImAKCU9wZXJhdGlvbiAgICAgIHN0cmluZyAgICAgICAgICAgICAgICAgYGpzb246Im9wZXJhdGlvbixvbWl0ZW1wdHkiYAoJT3B0aW9uYWwgICAgICAgYm9vbCAgICAgICAgICAgICAgICAgICBganNvbjoib3B0aW9uYWwsb21pdGVtcHR5ImAKfS8vIFNwZWNpZmllcyB0aGF0IHRoZSByZWNvcmQgaXMgIm9wdGlvbmFsIiwgd2hpY2ggaXMgbmFtZWx5IHVzZWQgaW4gZml4dHVyZXMgdG8gaW5kaWNhdGUgdGhhdCBhIG1pc3NpbmcgY29sbGVjdGlvbiBzaG91bGQgbm90IGJlIGNvbnNpZGVyZWQgZmF0YWwuCg=="
                },
                "RecordSet": {
                    "Name": "RecordSet",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "Append",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "other",
                                    "Type": "*RecordSet"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*RecordSet"
                                }
                            ],
                            "Signature": "Append(other *RecordSet) *RecordSet",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetRecord",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "index",
                                    "Type": "int"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Record"
                                },
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "GetRecord(index int) (*Record, bool)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetRecordByID",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Record"
                                },
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "GetRecordByID(id interface{}) (*Record, bool)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IDs",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Name": "ids",
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Signature": "IDs() ids []interface{}",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IsEmpty",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IsEmpty() bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "NewRecordSet",
                            "Arguments": [
                                {
                                    "Name": "records",
                                    "Type": "...*Record"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*RecordSet"
                                }
                            ],
                            "Signature": "NewRecordSet(records ...*Record) *RecordSet",
                            "Source": "ewoJcmV0dXJuICZSZWNvcmRTZXR7UmVjb3JkczogcmVjb3JkcywgT3B0aW9uczogbWFrZShtYXBbc3RyaW5nXWludGVyZmFjZXt9KX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "Pluck",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "fallback",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "[]interface{}"
                                }
                            ],
                            "Signature": "Pluck(field string, fallback ...interface{}) []interface{}",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "PopulateFromRecords",
                            "Comment": "Takes a slice of structs or maps and fills it with instances populated by the records in this RecordSet\nin accordance with the types specified in the given collection definition, as well as which\nfields are available in the given struct.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "into",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "schema",
                                    "Type": "*Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "PopulateFromRecords(into interface{}, schema *Collection) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Push",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "record",
                                    "Type": "*Record"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*RecordSet"
                                }
                            ],
                            "Signature": "Push(record *Record) *RecordSet",
                            "IsPackageLevel": false
                        }
                    ],
                    "Fields": [
                        {
                            "Name": "ResultCount",
                            "Type": "int64"
                        },
                        {
                            "Name": "Page",
                            "Type": "int"
                        },
                        {
                            "Name": "TotalPages",
                            "Type": "int"
                        },
                        {
                            "Name": "RecordsPerPage",
                            "Type": "int"
                        },
                        {
                            "Name": "Records",
                            "Type": "[]*Record"
                        },
                        {
                            "Name": "Options",
                            "Type": "map[string]interface{}"
                        },
                        {
                            "Name": "KnownSize",
                            "Type": "bool"
                        }
                    ],
                    "Source": "dHlwZSBSZWNvcmRTZXQgc3RydWN0IHsKCVJlc3VsdENvdW50ICAgIGludDY0ICAgICAgICAgICAgICAgICAgYGpzb246InJlc3VsdF9jb3VudCJgCglQYWdlICAgICAgICAgICBpbnQgICAgICAgICAgICAgICAgICAgIGBqc29uOiJwYWdlLG9taXRlbXB0eSJgCglUb3RhbFBhZ2VzICAgICBpbnQgICAgICAgICAgICAgICAgICAgIGBqc29uOiJ0b3RhbF9wYWdlcyxvbWl0ZW1wdHkiYAoJUmVjb3Jkc1BlclBhZ2UgaW50ICAgICAgICAgICAgICAgICAgICBganNvbjoicmVjb3Jkc19wZXJfcGFnZSxvbWl0ZW1wdHkiYAoJUmVjb3JkcyAgICAgICAgW10qUmVjb3JkICAgICAgICAgICAgICBganNvbjoicmVjb3JkcyJgCglPcHRpb25zICAgICAgICBtYXBbc3RyaW5nXWludGVyZmFjZXt9IGBqc29uOiJvcHRpb25zImAKCUtub3duU2l6ZSAgICAgIGJvb2wgICAgICAgICAgICAgICAgICAgYGpzb246Imtub3duX3NpemUiYAp9"
                },
                "Relationship": {
                    "Name": "Relationship",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "RelatedCollectionName",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "RelatedCollectionName() string",
                            "IsPackageLevel": false
                        }
                    ],
                    "Fields": [
                        {
                            "Name": "Keys",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "Collection",
                            "Type": "*Collection"
                        },
                        {
                            "Name": "CollectionName",
                            "Type": "string"
                        },
                        {
                            "Name": "Fields",
                            "Type": "[]string"
                        },
                        {
                            "Name": "Force",
                            "Type": "bool"
                        }
                    ],
                    "Source": "dHlwZSBSZWxhdGlvbnNoaXAgc3RydWN0IHsKCUtleXMgICAgICAgICAgIGludGVyZmFjZXt9IGBqc29uOiJrZXkiYAoJQ29sbGVjdGlvbiAgICAgKkNvbGxlY3Rpb24gYGpzb246Ii0iYAoJQ29sbGVjdGlvbk5hbWUgc3RyaW5nICAgICAgYGpzb246ImNvbGxlY3Rpb24sb21pdGVtcHR5ImAKCUZpZWxkcyAgICAgICAgIFtdc3RyaW5nICAgIGBqc29uOiJmaWVsZHMsb21pdGVtcHR5ImAKCUZvcmNlICAgICAgICAgIGJvb2wgICAgICAgIGBqc29uOiJmb3JjZSxvbWl0ZW1wdHkiYAp9"
                },
                "SchemaDelta": {
                    "Name": "SchemaDelta",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "DesiredField",
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "from",
                                    "Type": "Field"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Field"
                                }
                            ],
                            "Signature": "DesiredField(from Field) *Field",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        }
                    ],
                    "Fields": [
                        {
                            "Name": "Type",
                            "Type": "DeltaType"
                        },
                        {
                            "Name": "Issue",
                            "Type": "DeltaIssue"
                        },
                        {
                            "Name": "Message",
                            "Type": "string"
                        },
                        {
                            "Name": "Collection",
                            "Type": "string"
                        },
                        {
                            "Name": "Name",
                            "Type": "string"
                        },
                        {
                            "Name": "Parameter",
                            "Type": "string"
                        },
                        {
                            "Name": "Desired",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "Actual",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "ReferenceField",
                            "Type": "*Field"
                        }
                    ],
                    "Source": "dHlwZSBTY2hlbWFEZWx0YSBzdHJ1Y3QgewoJVHlwZSAgICAgICAgICAgRGVsdGFUeXBlCglJc3N1ZSAgICAgICAgICBEZWx0YUlzc3VlCglNZXNzYWdlICAgICAgICBzdHJpbmcKCUNvbGxlY3Rpb24gICAgIHN0cmluZwoJTmFtZSAgICAgICAgICAgc3RyaW5nCglQYXJhbWV0ZXIgICAgICBzdHJpbmcKCURlc2lyZWQgICAgICAgIGludGVyZmFjZXt9CglBY3R1YWwgICAgICAgICBpbnRlcmZhY2V7fQoJUmVmZXJlbmNlRmllbGQgKkZpZWxkCn0="
                },
                "TestRecord": {
                    "Name": "TestRecord",
                    "MetaType": "struct",
                    "Fields": [
                        {
                            "Name": "ID",
                            "Type": "int"
                        },
                        {
                            "Name": "Name",
                            "Type": "string"
                        },
                        {
                            "Name": "Size",
                            "Type": "int"
                        }
                    ],
                    "Source": "dHlwZSBUZXN0UmVjb3JkIHN0cnVjdCB7CglJRCAgIGludAoJTmFtZSBzdHJpbmcgYHBpdm90OiJuYW1lLG9taXRlbXB0eSJgCglTaXplIGludCAgICBgcGl2b3Q6InNpemUiYAp9"
                },
                "TestRecordEmbedded": {
                    "Name": "TestRecordEmbedded",
                    "MetaType": "struct",
                    "Fields": [
                        {
                            "Name": "Local",
                            "Type": "bool"
                        }
                    ],
                    "Source": "dHlwZSBUZXN0UmVjb3JkRW1iZWRkZWQgc3RydWN0IHsKCVRlc3RSZWNvcmRUd28KCVRlc3RSZWNvcmQKCUxvY2FsIGJvb2wKfQ=="
                },
                "TestRecordThree": {
                    "Name": "TestRecordThree",
                    "MetaType": "struct",
                    "Fields": [
                        {
                            "Name": "UUID",
                            "Type": "string"
                        }
                    ],
                    "Source": "dHlwZSBUZXN0UmVjb3JkVGhyZWUgc3RydWN0eyBVVUlEIHN0cmluZyB9"
                },
                "TestRecordTwo": {
                    "Name": "TestRecordTwo",
                    "MetaType": "struct",
                    "Fields": [
                        {
                            "Name": "UUID",
                            "Type": "string"
                        }
                    ],
                    "Source": "dHlwZSBUZXN0UmVjb3JkVHdvIHN0cnVjdCB7CglVVUlEIHN0cmluZyBgcGl2b3Q6InV1aWQsaWRlbnRpdHkiYAp9"
                },
                "Type": {
                    "Name": "Type",
                    "MetaType": "string",
                    "Methods": [
                        {
                            "Name": "String",
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ParseFieldType",
                            "Arguments": [
                                {
                                    "Name": "in",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Type"
                                }
                            ],
                            "Signature": "ParseFieldType(in string) Type",
                            "Source": "ewoJc3dpdGNoIGluIHsKCWNhc2UgYHN0cmA6CgkJcmV0dXJuIFN0cmluZ1R5cGUKCWNhc2UgYGJvb2xgOgoJCXJldHVybiBCb29sZWFuVHlwZQoJY2FzZSBgaW50YDoKCQlyZXR1cm4gSW50VHlwZQoJY2FzZSBgZmxvYXRgOgoJCXJldHVybiBGbG9hdFR5cGUKCWNhc2UgYHRpbWVgOgoJCXJldHVybiBUaW1lVHlwZQoJY2FzZSBgb2JqZWN0YDoKCQlyZXR1cm4gT2JqZWN0VHlwZQoJY2FzZSBgcmF3YDoKCQlyZXR1cm4gUmF3VHlwZQoJY2FzZSBgYXJyYXlgOgoJCXJldHVybiBBcnJheVR5cGUKCWRlZmF1bHQ6CgkJcmV0dXJuIGBgCgl9Cn0=",
                            "IsPackageLevel": true
                        }
                    ],
                    "Source": "dHlwZSBUeXBlIHN0cmluZw=="
                }
            }
        },
        {
            "Name": "filter",
            "CanonicalImportPath": "github.com/ghetzel/pivot/filter",
            "ImportPath": "filter",
            "ParentPackage": "pivot",
            "URL": "https://github.com/ghetzel/pivot",
            "Synopsis": "",
            "MainFunction": false,
            "CommentWordCount": 3,
            "LineCount": 1131,
            "SourceLineCount": 893,
            "FunctionCount": 36,
            "TypeCount": 9,
            "ConstantCount": 9,
            "VariableCount": 11,
            "Statistics": {
                "Mean": 0.0041,
                "StdDev": 0.0346,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 0.3
            },
            "Files": [
                {
                    "Name": "filter.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "net/url",
                            "Alias": "url"
                        },
                        {
                            "PackageName": "regexp",
                            "Alias": "regexp"
                        },
                        {
                            "PackageName": "strconv",
                            "Alias": "strconv"
                        },
                        {
                            "PackageName": "strings",
                            "Alias": "strings"
                        },
                        {
                            "PackageName": "time",
                            "Alias": "time"
                        },
                        {
                            "PackageName": "github.com/fatih/structs",
                            "Alias": "structs"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                            "Alias": "maputil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                            "Alias": "stringutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/timeutil",
                            "Alias": "timeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/util",
                            "Alias": "util"
                        }
                    ],
                    "Size": 15269,
                    "LineCount": 712,
                    "SourceLineCount": 565,
                    "FunctionCount": 30,
                    "TypeCount": 7,
                    "ConstantCount": 9,
                    "VariableCount": 11
                },
                {
                    "Name": "filter_matches_record_test.go",
                    "Imports": [
                        {
                            "PackageName": "testing",
                            "Alias": "testing"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/stretchr/testify/require",
                            "Alias": "require"
                        }
                    ],
                    "Size": 3481,
                    "LineCount": 60,
                    "SourceLineCount": 49,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "filter_test.go",
                    "Imports": [
                        {
                            "PackageName": "testing",
                            "Alias": "testing"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/stretchr/testify/require",
                            "Alias": "require"
                        }
                    ],
                    "Size": 6021,
                    "LineCount": 269,
                    "SourceLineCount": 211,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "generator.go",
                    "Size": 1817,
                    "LineCount": 90,
                    "SourceLineCount": 68,
                    "FunctionCount": 6,
                    "TypeCount": 2,
                    "ConstantCount": 0,
                    "VariableCount": 0
                }
            ],
            "Constants": [
                {
                    "Name": "AndConjunction",
                    "Type": "ConjunctionType",
                    "Immutable": true,
                    "Expression": "``"
                },
                {
                    "Name": "Average",
                    "Immutable": true
                },
                {
                    "Name": "Count",
                    "Immutable": true
                },
                {
                    "Name": "First",
                    "Type": "Aggregation",
                    "Immutable": true,
                    "Expression": "iota"
                },
                {
                    "Name": "Last",
                    "Immutable": true
                },
                {
                    "Name": "Maximum",
                    "Immutable": true
                },
                {
                    "Name": "Minimum",
                    "Immutable": true
                },
                {
                    "Name": "OrConjunction",
                    "Immutable": true,
                    "Expression": "`or`",
                    "Value": "or"
                },
                {
                    "Name": "Sum",
                    "Immutable": true
                }
            ],
            "Variables": [
                {
                    "Name": "AllValue",
                    "Expression": "`all`",
                    "Value": "all"
                },
                {
                    "Name": "CriteriaSeparator",
                    "Expression": "`/`",
                    "Value": "/"
                },
                {
                    "Name": "DefaultIdentityField",
                    "Expression": "`id`",
                    "Value": "id"
                },
                {
                    "Name": "DefaultNormalizerFunc"
                },
                {
                    "Name": "FieldLengthDelimiter",
                    "Expression": "`#`",
                    "Value": "#"
                },
                {
                    "Name": "FieldTermSeparator",
                    "Expression": "`/`",
                    "Value": "/"
                },
                {
                    "Name": "ModifierDelimiter",
                    "Expression": "`:`",
                    "Value": ":"
                },
                {
                    "Name": "QueryUnescapeValues",
                    "Expression": "false"
                },
                {
                    "Name": "SortAscending",
                    "Expression": "`+`",
                    "Value": "+"
                },
                {
                    "Name": "SortDescending",
                    "Expression": "`-`",
                    "Value": "-"
                },
                {
                    "Name": "ValueSeparator",
                    "Expression": "`|`",
                    "Value": "|"
                }
            ],
            "Functions": [
                {
                    "Name": "IsExactMatchOperator",
                    "Arguments": [
                        {
                            "Name": "operator",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "IsExactMatchOperator(operator string) bool",
                    "Source": "ewoJc3dpdGNoIG9wZXJhdG9yIHsKCWNhc2UgYGAsIGBpc2AsIGBub3RgLCBgZ3RgLCBgZ3RlYCwgYGx0YCwgYGx0ZWA6CgkJcmV0dXJuIHRydWUKCX0KCXJldHVybiBmYWxzZQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "IsInvertingOperator",
                    "Arguments": [
                        {
                            "Name": "operator",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "IsInvertingOperator(operator string) bool",
                    "Source": "ewoJc3dpdGNoIG9wZXJhdG9yIHsKCWNhc2UgYG5vdGAsIGB1bmxpa2VgOgoJCXJldHVybiB0cnVlCgl9CglyZXR1cm4gZmFsc2UKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "Render",
                    "Arguments": [
                        {
                            "Name": "generator",
                            "Type": "IGenerator"
                        },
                        {
                            "Name": "collectionName",
                            "Type": "string"
                        },
                        {
                            "Name": "filter",
                            "Type": "*Filter"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "[]byte"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Render(generator IGenerator, collectionName string, filter *Filter) ([]byte, error)",
                    "Source": "ewoJaWYgZXJyIDo9IGdlbmVyYXRvci5Jbml0aWFsaXplKGNvbGxlY3Rpb25OYW1lKTsgZXJyICE9IG5pbCB7CgkJcmV0dXJuIG5pbCwgZXJyCgl9Cglmb3Iga2V5LCB2YWx1ZSA6PSByYW5nZSBmaWx0ZXIuT3B0aW9ucyB7CgkJaWYgZXJyIDo9IGdlbmVyYXRvci5TZXRPcHRpb24oa2V5LCB2YWx1ZSk7IGVyciAhPSBuaWwgewoJCQlyZXR1cm4gbmlsLCBlcnIKCQl9Cgl9Cglmb3IgXywgZmllbGROYW1lIDo9IHJhbmdlIGZpbHRlci5GaWVsZHMgewoJCWlmIGZpbHRlci5JZGVudGl0eUZpZWxkICE9IGBgICYmIGZpZWxkTmFtZSA9PSBgaWRgIHsKCQkJZmllbGROYW1lID0gZmlsdGVyLklkZW50aXR5RmllbGQKCQl9CgkJaWYgZXJyIDo9IGdlbmVyYXRvci5XaXRoRmllbGQoZmllbGROYW1lKTsgZXJyICE9IG5pbCB7CgkJCXJldHVybiBuaWwsIGVycgoJCX0KCX0KCWZvciBfLCBjcml0ZXJpb24gOj0gcmFuZ2UgZmlsdGVyLkNyaXRlcmlhIHsKCQlpZiBmaWx0ZXIuSWRlbnRpdHlGaWVsZCAhPSBgYCAmJiBjcml0ZXJpb24uRmllbGQgPT0gYGlkYCB7CgkJCWNyaXRlcmlvbi5GaWVsZCA9IGZpbHRlci5JZGVudGl0eUZpZWxkCgkJfQoJCWlmIGVyciA6PSBnZW5lcmF0b3IuV2l0aENyaXRlcmlvbihjcml0ZXJpb24pOyBlcnIgIT0gbmlsIHsKCQkJcmV0dXJuIG5pbCwgZXJyCgkJfQoJfQoJaWYgZXJyIDo9IGdlbmVyYXRvci5GaW5hbGl6ZShmaWx0ZXIpOyBlcnIgIT0gbmlsIHsKCQlyZXR1cm4gbmlsLCBlcnIKCX0KCXJldHVybiBnZW5lcmF0b3IuUGF5bG9hZCgpLCBuaWwKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "SplitModifierToken",
                    "Arguments": [
                        {
                            "Name": "in",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "string"
                        },
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "SplitModifierToken(in string) (string, string)",
                    "Source": "ewoJcGFydHMgOj0gc3RyaW5ncy5TcGxpdE4oaW4sIE1vZGlmaWVyRGVsaW1pdGVyLCAyKQoJaWYgbGVuKHBhcnRzKSA9PSAxIHsKCQlyZXR1cm4gYGAsIHBhcnRzWzBdCgl9IGVsc2UgewoJCXJldHVybiBwYXJ0c1swXSwgcGFydHNbMV0KCX0KfQ==",
                    "IsPackageLevel": true
                }
            ],
            "Tests": [
                {
                    "Name": "TestFilterCopy",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFilterCopy(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmMSwgZXJyIDo9IFBhcnNlKGBpZC80MmApCglhc3NlcnQuTm9FcnJvcihlcnIpCglmMiA6PSBDb3B5KGYxKQoJYXNzZXJ0LkVxdWFsKFtdQ3JpdGVyaW9ue3tUeXBlOiBkYWwuQXV0b1R5cGUsIEZpZWxkOiBgaWRgLCBWYWx1ZXM6IFtdaW50ZXJmYWNle317YDQyYH19fSwgZjEuQ3JpdGVyaWEpCglmMi5BZGRDcml0ZXJpYShDcml0ZXJpb257VHlwZTogZGFsLlN0cmluZ1R5cGUsIEZpZWxkOiBgbmFtZWAsIFZhbHVlczogW11pbnRlcmZhY2V7fXtgdGVzdGB9fSkKCWFzc2VydC5FcXVhbChbXUNyaXRlcmlvbnt7VHlwZTogZGFsLkF1dG9UeXBlLCBGaWVsZDogYGlkYCwgVmFsdWVzOiBbXWludGVyZmFjZXt9e2A0MmB9fX0sIGYxLkNyaXRlcmlhKQoJYXNzZXJ0LkVxdWFsKFtdQ3JpdGVyaW9ue3tUeXBlOiBkYWwuQXV0b1R5cGUsIEZpZWxkOiBgaWRgLCBWYWx1ZXM6IFtdaW50ZXJmYWNle317YDQyYH19LCB7VHlwZTogZGFsLlN0cmluZ1R5cGUsIEZpZWxkOiBgbmFtZWAsIFZhbHVlczogW11pbnRlcmZhY2V7fXtgdGVzdGB9fX0sIGYyLkNyaXRlcmlhKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFilterFromMap",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFilterFromMap(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmLCBlcnIgOj0gRnJvbU1hcChtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BmMWA6IGB2MWAsIGBpbnQ6ZjJgOiAyLCBgZmxvYXQ6ZjNgOiBgZ3RlOjNgLCBgaWRgOiBbXXN0cmluZ3tgMWAsIGAzYCwgYDVgfSwgYG90aGVyYDogYDJ8NHw2YH0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoNSwgbGVuKGYuQ3JpdGVyaWEpKQoJZm9yIF8sIGNyaXRlcmlvbiA6PSByYW5nZSBmLkNyaXRlcmlhIHsKCQlzd2l0Y2ggY3JpdGVyaW9uLkZpZWxkIHsKCQljYXNlIGBmMWA6CgkJCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2B2MWB9LCBjcml0ZXJpb24uVmFsdWVzKQoJCWNhc2UgYGYyYDoKCQkJYXNzZXJ0LlRydWUoZGFsLkludFR5cGUgPT0gY3JpdGVyaW9uLlR5cGUpCgkJCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9ezJ9LCBjcml0ZXJpb24uVmFsdWVzKQoJCWNhc2UgYGYzYDoKCQkJYXNzZXJ0LlRydWUoZGFsLkZsb2F0VHlwZSA9PSBjcml0ZXJpb24uVHlwZSkKCQkJYXNzZXJ0LkVxdWFsKGBndGVgLCBjcml0ZXJpb24uT3BlcmF0b3IpCgkJCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2AzYH0sIGNyaXRlcmlvbi5WYWx1ZXMpCgkJY2FzZSBgaWRgOgoJCQlhc3NlcnQuRXF1YWxWYWx1ZXMoW11pbnRlcmZhY2V7fXtgMWAsIGAzYCwgYDVgfSwgY3JpdGVyaW9uLlZhbHVlcykKCQljYXNlIGBvdGhlcmA6CgkJCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9e2AyYCwgYDRgLCBgNmB9LCBjcml0ZXJpb24uVmFsdWVzKQoJCWRlZmF1bHQ6CgkJCXQuRXJyb3JmKCJVbmtub3duIGZpZWxkICVxIiwgY3JpdGVyaW9uLkZpZWxkKQoJCX0KCX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFilterGetSort",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFilterGetSort(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmLCBlcnIgOj0gUGFyc2UoYG5hbWUvdGVzdC8tYWdlLzQvK2dyb3VwL29uZWApCglhc3NlcnQuTm9FcnJvcihlcnIpCglzb3J0QnkgOj0gZi5HZXRTb3J0KCkKCWFzc2VydC5FcXVhbCgyLCBsZW4oc29ydEJ5KSkKCWFzc2VydC5FcXVhbChgYWdlYCwgc29ydEJ5WzBdLkZpZWxkKQoJYXNzZXJ0LlRydWUoc29ydEJ5WzBdLkRlc2NlbmRpbmcpCglhc3NlcnQuRXF1YWwoYGdyb3VwYCwgc29ydEJ5WzFdLkZpZWxkKQoJYXNzZXJ0LkZhbHNlKHNvcnRCeVsxXS5EZXNjZW5kaW5nKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFilterIdOnly",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFilterIdOnly(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmIDo9IE1ha2VGaWx0ZXIoQWxsVmFsdWUpCglmLkZpZWxkcyA9IFtdc3RyaW5ne2YuSWRlbnRpdHlGaWVsZH0KCWFzc2VydC5UcnVlKGYuSWRPbmx5KCkpCglmID0gTWFrZUZpbHRlcihBbGxWYWx1ZSkKCWFzc2VydC5GYWxzZShmLklkT25seSgpKQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFilterIdentity",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFilterIdentity(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglzcGVjIDo9IGBzdHIjMTY6bmFtZS9wcmVmaXg6Zm9vYAoJZmlsdGVyLCBlcnIgOj0gUGFyc2Uoc3BlYykKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbCgxLCBsZW4oZmlsdGVyLkNyaXRlcmlhKSkKCWFzc2VydC5FcXVhbChkYWwuU3RyaW5nVHlwZSwgZmlsdGVyLkNyaXRlcmlhWzBdLlR5cGUpCglhc3NlcnQuRXF1YWwoMTYsIGZpbHRlci5Dcml0ZXJpYVswXS5MZW5ndGgpCglhc3NlcnQuRXF1YWwoYG5hbWVgLCBmaWx0ZXIuQ3JpdGVyaWFbMF0uRmllbGQpCglhc3NlcnQuRXF1YWwoYHByZWZpeGAsIGZpbHRlci5Dcml0ZXJpYVswXS5PcGVyYXRvcikKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2Bmb29gfSwgZmlsdGVyLkNyaXRlcmlhWzBdLlZhbHVlcykKCWFzc2VydC5FcXVhbChzcGVjLCBmaWx0ZXIuU3RyaW5nKCkpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFilterMatchesRecord",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFilterMatchesRecord(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglhc3NlcnQuVHJ1ZShNdXN0UGFyc2UoYGlkLzFgKS5NYXRjaGVzUmVjb3JkKGRhbC5OZXdSZWNvcmQoMSkpKQoJYXNzZXJ0LlRydWUoTXVzdFBhcnNlKGBpZC8xYCkuTWF0Y2hlc1JlY29yZChkYWwuTmV3UmVjb3JkKGAxYCkpKQoJYXNzZXJ0LlRydWUoTXVzdFBhcnNlKGBpZC9pczoxYCkuTWF0Y2hlc1JlY29yZChkYWwuTmV3UmVjb3JkKDEpKSkKCWFzc2VydC5UcnVlKE11c3RQYXJzZShgaWQvaXM6MWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZChgMWApKSkKCWFzc2VydC5UcnVlKE11c3RQYXJzZShgaW50OmlkLzFgKS5NYXRjaGVzUmVjb3JkKGRhbC5OZXdSZWNvcmQoMSkpKQoJYXNzZXJ0LlRydWUoTXVzdFBhcnNlKGBzdHI6aWQvMWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZChgMWApKSkKCWFzc2VydC5GYWxzZShNdXN0UGFyc2UoYHN0cjppZC9pczoxYCkuTWF0Y2hlc1JlY29yZChkYWwuTmV3UmVjb3JkKDEpKSkKCWFzc2VydC5UcnVlKE11c3RQYXJzZShgaWQvbm90OjFgKS5NYXRjaGVzUmVjb3JkKGRhbC5OZXdSZWNvcmQoMikpKQoJYXNzZXJ0LlRydWUoTXVzdFBhcnNlKGBpZC9ub3Q6MWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZChgMmApKSkKCWFzc2VydC5UcnVlKE11c3RQYXJzZShgaWQvMS90ZXN0L3RydWVgKS5NYXRjaGVzUmVjb3JkKGRhbC5OZXdSZWNvcmQoMSkuU2V0KGB0ZXN0YCwgdHJ1ZSkpKQoJYXNzZXJ0LlRydWUoTXVzdFBhcnNlKGBpZC8xL3Rlc3QvdHJ1ZWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgxKS5TZXQoYHRlc3RgLCBgdHJ1ZWApKSkKCWFzc2VydC5UcnVlKE11c3RQYXJzZShgaWQvMS9ib29sOnRlc3QvdHJ1ZWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgxKS5TZXQoYHRlc3RgLCB0cnVlKSkpCglhc3NlcnQuVHJ1ZShNdXN0UGFyc2UoYGlkLzEvc3RyOnRlc3QvdHJ1ZWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgxKS5TZXQoYHRlc3RgLCBgdHJ1ZWApKSkKCWFzc2VydC5GYWxzZShNdXN0UGFyc2UoYGlkLzEvdGVzdC90cnVlYCkuTWF0Y2hlc1JlY29yZChkYWwuTmV3UmVjb3JkKDEpLlNldChgdGVzdGAsIGZhbHNlKSkpCglhc3NlcnQuRmFsc2UoTXVzdFBhcnNlKGBpZC8xL3Rlc3QvdHJ1ZWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgxKS5TZXQoYHRlc3RgLCBgZmFsc2VgKSkpCglhc3NlcnQuRmFsc2UoTXVzdFBhcnNlKGBpZC8xL3Rlc3QvdHJ1ZWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgxKS5TZXQoYHRlc3RgLCAxKSkpCglhc3NlcnQuRmFsc2UoTXVzdFBhcnNlKGBpZC8xL3Rlc3QvdHJ1ZWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgxKS5TZXQoYHRlc3RgLCBgMWApKSkKCWFzc2VydC5GYWxzZShNdXN0UGFyc2UoYGlkLzEvdGVzdC9mYWxzZWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgxKS5TZXQoYHRlc3RgLCAwKSkpCglhc3NlcnQuRmFsc2UoTXVzdFBhcnNlKGBpZC8xL3Rlc3QvZmFsc2VgKS5NYXRjaGVzUmVjb3JkKGRhbC5OZXdSZWNvcmQoMSkuU2V0KGB0ZXN0YCwgYDBgKSkpCglhc3NlcnQuRmFsc2UoTXVzdFBhcnNlKGBpZC8xL3N0cjp0ZXN0L3RydWVgKS5NYXRjaGVzUmVjb3JkKGRhbC5OZXdSZWNvcmQoMSkuU2V0KGB0ZXN0YCwgdHJ1ZSkpKQoJYXNzZXJ0LkZhbHNlKE11c3RQYXJzZShgaWQvZ3Q6MWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgwKSkpCglhc3NlcnQuRmFsc2UoTXVzdFBhcnNlKGBpZC9ndDoxYCkuTWF0Y2hlc1JlY29yZChkYWwuTmV3UmVjb3JkKDEpKSkKCWFzc2VydC5UcnVlKE11c3RQYXJzZShgaWQvZ3Q6MWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgyKSkpCglhc3NlcnQuRmFsc2UoTXVzdFBhcnNlKGBpZC9ndGU6MWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgwKSkpCglhc3NlcnQuVHJ1ZShNdXN0UGFyc2UoYGlkL2d0ZToxYCkuTWF0Y2hlc1JlY29yZChkYWwuTmV3UmVjb3JkKDEpKSkKCWFzc2VydC5UcnVlKE11c3RQYXJzZShgaWQvZ3RlOjFgKS5NYXRjaGVzUmVjb3JkKGRhbC5OZXdSZWNvcmQoMikpKQoJYXNzZXJ0LkZhbHNlKE11c3RQYXJzZShgaWQvbHQ6MWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgyKSkpCglhc3NlcnQuRmFsc2UoTXVzdFBhcnNlKGBpZC9sdDoxYCkuTWF0Y2hlc1JlY29yZChkYWwuTmV3UmVjb3JkKDEpKSkKCWFzc2VydC5UcnVlKE11c3RQYXJzZShgaWQvbHQ6MWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgwKSkpCglhc3NlcnQuRmFsc2UoTXVzdFBhcnNlKGBpZC9sdGU6MWApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgyKSkpCglhc3NlcnQuVHJ1ZShNdXN0UGFyc2UoYGlkL2x0ZToxYCkuTWF0Y2hlc1JlY29yZChkYWwuTmV3UmVjb3JkKDEpKSkKCWFzc2VydC5UcnVlKE11c3RQYXJzZShgaWQvbHRlOjFgKS5NYXRjaGVzUmVjb3JkKGRhbC5OZXdSZWNvcmQoMCkpKQoJYXNzZXJ0LlRydWUoTXVzdFBhcnNlKGBuYW1lL2NvbnRhaW5zOm9sZGApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgR29sZGVucm9kYCkpKQoJYXNzZXJ0LlRydWUoTXVzdFBhcnNlKGBuYW1lL3ByZWZpeDpnb2xkYCkuTWF0Y2hlc1JlY29yZChkYWwuTmV3UmVjb3JkKDEpLlNldChgbmFtZWAsIGBHb2xkYCkpKQoJYXNzZXJ0LlRydWUoTXVzdFBhcnNlKGBuYW1lL3ByZWZpeDpHb2xkYCkuTWF0Y2hlc1JlY29yZChkYWwuTmV3UmVjb3JkKDEpLlNldChgbmFtZWAsIGBHb2xkYCkpKQoJYXNzZXJ0LlRydWUoTXVzdFBhcnNlKGBuYW1lL3N1ZmZpeDpyb2RgKS5NYXRjaGVzUmVjb3JkKGRhbC5OZXdSZWNvcmQoMSkuU2V0KGBuYW1lYCwgYEdvbGRlbnJvZGApKSkKCWFzc2VydC5UcnVlKE11c3RQYXJzZShgbmFtZS9zdWZmaXg6YXBwbGV8b3JhbmdlfHJvZGApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgR29sZGVucm9kYCkpKQoJYXNzZXJ0LlRydWUoTXVzdFBhcnNlKGBuYW1lL2NvbnRhaW5zOm9sZGVuIHJvZGApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgR29sZGVuIHJvZGApKSkKCWFzc2VydC5UcnVlKE11c3RQYXJzZShgbmFtZS9Hb2xkZW4gcm9kYCkuTWF0Y2hlc1JlY29yZChkYWwuTmV3UmVjb3JkKDEpLlNldChgbmFtZWAsIGBHb2xkZW4gcm9kYCkpKQoJYXNzZXJ0LlRydWUoTXVzdFBhcnNlKGBuYW1lL2xpa2U6Z29sZGVuIHJvZGApLk1hdGNoZXNSZWNvcmQoZGFsLk5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgR29sZGVuIHJvZGApKSkKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFilterParse",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFilterParse(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglDcml0ZXJpYVNlcGFyYXRvciA9IGAvYAoJRmllbGRUZXJtU2VwYXJhdG9yID0gYC9gCgl0ZXN0cyA6PSBtYXBbc3RyaW5nXWZ1bmMoKkZpbHRlciwgZXJyb3Ipe0FsbFZhbHVlOiBmdW5jKGYgKkZpbHRlciwgZXJyIGVycm9yKSB7CgkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCWFzc2VydC5UcnVlKGYuTWF0Y2hBbGwpCgkJYXNzZXJ0LkVxdWFsKGYuU3BlYywgQWxsVmFsdWUpCgkJYXNzZXJ0LkVxdWFsKDAsIGxlbihmLkNyaXRlcmlhKSkKCX0sIGBrMS9jb250YWluczp2MS9pbnQ6azIvbHQ6djJhfHYyYmA6IGZ1bmMoZiAqRmlsdGVyLCBlcnIgZXJyb3IpIHsKCQlhc3NlcnQuTm9FcnJvcihlcnIpCgkJYXNzZXJ0LkVxdWFsKDIsIGxlbihmLkNyaXRlcmlhKSkKCQlhc3NlcnQuVHJ1ZShkYWwuQXV0b1R5cGUgPT0gZi5Dcml0ZXJpYVswXS5UeXBlKQoJCWFzc2VydC5FcXVhbChgazFgLCBmLkNyaXRlcmlhWzBdLkZpZWxkKQoJCWFzc2VydC5FcXVhbChgY29udGFpbnNgLCBmLkNyaXRlcmlhWzBdLk9wZXJhdG9yKQoJCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2B2MWB9LCBmLkNyaXRlcmlhWzBdLlZhbHVlcykKCQlhc3NlcnQuVHJ1ZShkYWwuSW50VHlwZSA9PSBmLkNyaXRlcmlhWzFdLlR5cGUpCgkJYXNzZXJ0LkVxdWFsKGBrMmAsIGYuQ3JpdGVyaWFbMV0uRmllbGQpCgkJYXNzZXJ0LkVxdWFsKGBsdGAsIGYuQ3JpdGVyaWFbMV0uT3BlcmF0b3IpCgkJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317YHYyYWAsIGB2MmJgfSwgZi5Dcml0ZXJpYVsxXS5WYWx1ZXMpCgl9fQoJZm9yIHNwZWMsIGZuIDo9IHJhbmdlIHRlc3RzIHsKCQlmLCBlcnIgOj0gUGFyc2Uoc3BlYykKCQlmbihmLCBlcnIpCgl9Cn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFilterParseAltDelimiters",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFilterParseAltDelimiters(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljcywgZnRzIDo9IENyaXRlcmlhU2VwYXJhdG9yLCBGaWVsZFRlcm1TZXBhcmF0b3IKCUNyaXRlcmlhU2VwYXJhdG9yID0gYCBgCglGaWVsZFRlcm1TZXBhcmF0b3IgPSBgPWAKCXRlc3RzIDo9IG1hcFtzdHJpbmddZnVuYygqRmlsdGVyLCBlcnJvcil7QWxsVmFsdWU6IGZ1bmMoZiAqRmlsdGVyLCBlcnIgZXJyb3IpIHsKCQlhc3NlcnQuTm9FcnJvcihlcnIpCgkJYXNzZXJ0LlRydWUoZi5NYXRjaEFsbCkKCQlhc3NlcnQuRXF1YWwoZi5TcGVjLCBBbGxWYWx1ZSkKCQlhc3NlcnQuRXF1YWwoMCwgbGVuKGYuQ3JpdGVyaWEpKQoJfSwgYGsxPWNvbnRhaW5zOnYxIGludDprMj1sdDp2MmF8djJiYDogZnVuYyhmICpGaWx0ZXIsIGVyciBlcnJvcikgewoJCWFzc2VydC5Ob0Vycm9yKGVycikKCQlhc3NlcnQuRXF1YWwoMiwgbGVuKGYuQ3JpdGVyaWEpKQoJCWFzc2VydC5UcnVlKGRhbC5BdXRvVHlwZSA9PSBmLkNyaXRlcmlhWzBdLlR5cGUpCgkJYXNzZXJ0LkVxdWFsKGBrMWAsIGYuQ3JpdGVyaWFbMF0uRmllbGQpCgkJYXNzZXJ0LkVxdWFsKGBjb250YWluc2AsIGYuQ3JpdGVyaWFbMF0uT3BlcmF0b3IpCgkJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317YHYxYH0sIGYuQ3JpdGVyaWFbMF0uVmFsdWVzKQoJCWFzc2VydC5UcnVlKGRhbC5JbnRUeXBlID09IGYuQ3JpdGVyaWFbMV0uVHlwZSkKCQlhc3NlcnQuRXF1YWwoYGsyYCwgZi5Dcml0ZXJpYVsxXS5GaWVsZCkKCQlhc3NlcnQuRXF1YWwoYGx0YCwgZi5Dcml0ZXJpYVsxXS5PcGVyYXRvcikKCQlhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXtgdjJhYCwgYHYyYmB9LCBmLkNyaXRlcmlhWzFdLlZhbHVlcykKCX19Cglmb3Igc3BlYywgZm4gOj0gcmFuZ2UgdGVzdHMgewoJCWYsIGVyciA6PSBQYXJzZShzcGVjKQoJCWZuKGYsIGVycikKCX0KCUNyaXRlcmlhU2VwYXJhdG9yLCBGaWVsZFRlcm1TZXBhcmF0b3IgPSBjcywgZnRzCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFilterParsePtrToStruct",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFilterParsePtrToStruct(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl0eXBlIGZDb29sT2JqZWN0IHN0cnVjdCB7CgkJTmFtZSAgICBzdHJpbmcgYHBpdm90OiJuYW1lImAKCQlFbmFibGVkIGJvb2wKCQlBZ2UgICAgIGludCBgcGl2b3Q6IixvbWl0ZW1wdHkiYAoJfQoJZiwgZXJyIDo9IFBhcnNlKCZmQ29vbE9iamVjdHtOYW1lOiBgdGVzdDFgfSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbCgyLCBsZW4oZi5Dcml0ZXJpYSkpCgl2YWx1ZXMsIG9rIDo9IGYuR2V0VmFsdWVzKGBuYW1lYCkKCWFzc2VydC5UcnVlKG9rKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317YHRlc3QxYH0sIHZhbHVlcykKCXZhbHVlcywgb2sgPSBmLkdldFZhbHVlcyhgRW5hYmxlZGApCglhc3NlcnQuVHJ1ZShvaykKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2ZhbHNlfSwgdmFsdWVzKQoJdmFsdWVzLCBvayA9IGYuR2V0VmFsdWVzKGBBZ2VgKQoJYXNzZXJ0LkZhbHNlKG9rKQoJYXNzZXJ0Lk5pbCh2YWx1ZXMpCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "TestFilterParseStruct",
                    "Arguments": [
                        {
                            "Name": "t",
                            "Type": "*testing.T"
                        }
                    ],
                    "Signature": "TestFilterParseStruct(t *testing.T)",
                    "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl0eXBlIGZDb29sT2JqZWN0IHN0cnVjdCB7CgkJTmFtZSAgICBzdHJpbmcgYHBpdm90OiJuYW1lImAKCQlFbmFibGVkIGJvb2wKCQlBZ2UgICAgIGludCBgcGl2b3Q6Iix3d3V1dXV1dXQiYAoJfQoJZiwgZXJyIDo9IFBhcnNlKGZDb29sT2JqZWN0e05hbWU6IGB0ZXN0MWAsIEVuYWJsZWQ6IHRydWUsIEFnZTogNDJ9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKDMsIGxlbihmLkNyaXRlcmlhKSkKCXZhbHVlcywgb2sgOj0gZi5HZXRWYWx1ZXMoYG5hbWVgKQoJYXNzZXJ0LlRydWUob2spCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXtgdGVzdDFgfSwgdmFsdWVzKQoJdmFsdWVzLCBvayA9IGYuR2V0VmFsdWVzKGBFbmFibGVkYCkKCWFzc2VydC5UcnVlKG9rKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317dHJ1ZX0sIHZhbHVlcykKCXZhbHVlcywgb2sgPSBmLkdldFZhbHVlcyhgQWdlYCkKCWFzc2VydC5UcnVlKG9rKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317NDJ9LCB2YWx1ZXMpCn0=",
                    "IsPackageLevel": true
                }
            ],
            "Types": {
                "Aggregate": {
                    "Name": "Aggregate",
                    "MetaType": "struct",
                    "Fields": [
                        {
                            "Name": "Aggregation",
                            "Type": "Aggregation"
                        },
                        {
                            "Name": "Field",
                            "Type": "string"
                        }
                    ],
                    "Source": "dHlwZSBBZ2dyZWdhdGUgc3RydWN0IHsKCUFnZ3JlZ2F0aW9uIEFnZ3JlZ2F0aW9uCglGaWVsZCAgICAgICBzdHJpbmcKfQ=="
                },
                "Aggregation": {
                    "Name": "Aggregation",
                    "MetaType": "int",
                    "Source": "dHlwZSBBZ2dyZWdhdGlvbiBpbnQ="
                },
                "ConjunctionType": {
                    "Name": "ConjunctionType",
                    "MetaType": "string",
                    "Source": "dHlwZSBDb25qdW5jdGlvblR5cGUgc3RyaW5n"
                },
                "Criterion": {
                    "Name": "Criterion",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "IsExactMatch",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IsExactMatch() bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        }
                    ],
                    "Fields": [
                        {
                            "Name": "Type",
                            "Type": "dal.Type"
                        },
                        {
                            "Name": "Length",
                            "Type": "int"
                        },
                        {
                            "Name": "Field",
                            "Type": "string"
                        },
                        {
                            "Name": "Operator",
                            "Type": "string"
                        },
                        {
                            "Name": "Values",
                            "Type": "[]interface{}"
                        },
                        {
                            "Name": "Aggregation",
                            "Type": "Aggregation"
                        }
                    ],
                    "Source": "dHlwZSBDcml0ZXJpb24gc3RydWN0IHsKCVR5cGUgICAgICAgIGRhbC5UeXBlICAgICAgYGpzb246InR5cGUsb21pdGVtcHR5ImAKCUxlbmd0aCAgICAgIGludCAgICAgICAgICAgYGpzb246Imxlbmd0aCxvbWl0ZW1wdHkiYAoJRmllbGQgICAgICAgc3RyaW5nICAgICAgICBganNvbjoiZmllbGQiYAoJT3BlcmF0b3IgICAgc3RyaW5nICAgICAgICBganNvbjoib3BlcmF0b3Isb21pdGVtcHR5ImAKCVZhbHVlcyAgICAgIFtdaW50ZXJmYWNle30gYGpzb246InZhbHVlcyJgCglBZ2dyZWdhdGlvbiBBZ2dyZWdhdGlvbiAgIGBqc29uOiJhZ2dyZWdhdGlvbixvbWl0ZW1wdHkiYAp9"
                },
                "Filter": {
                    "Name": "Filter",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "AddCriteria",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "criteria",
                                    "Type": "...Criterion"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Filter"
                                }
                            ],
                            "Signature": "AddCriteria(criteria ...Criterion) *Filter",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "All",
                            "Returns": [
                                {
                                    "Type": "*Filter"
                                }
                            ],
                            "Signature": "All() *Filter",
                            "Source": "ewoJZiA6PSBNYWtlRmlsdGVyKEFsbFZhbHVlKQoJcmV0dXJuICZmCn0=",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "ApplyOptions",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "in",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ApplyOptions(in interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "BoundedBy",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "limit",
                                    "Type": "int"
                                },
                                {
                                    "Name": "offset",
                                    "Type": "int"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Filter"
                                }
                            ],
                            "Signature": "BoundedBy(limit int, offset int) *Filter",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Copy",
                            "Arguments": [
                                {
                                    "Name": "other",
                                    "Type": "*Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Filter"
                                }
                            ],
                            "Signature": "Copy(other *Filter) Filter",
                            "Source": "ewoJcmV0dXJuICpvdGhlcgp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "CriteriaFields",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]string"
                                }
                            ],
                            "Signature": "CriteriaFields() []string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FromMap",
                            "Arguments": [
                                {
                                    "Name": "in",
                                    "Type": "map[string]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Filter"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FromMap(in map[string]interface{}) (*Filter, error)",
                            "Source": "ewoJcnYgOj0gTWFrZUZpbHRlcigpCglmb3IgdHlwZUZpZWxkLCBvcFZhbHVlIDo9IHJhbmdlIGluIHsKCQlmVHlwZSwgZk5hbWUgOj0gU3BsaXRNb2RpZmllclRva2VuKHR5cGVGaWVsZCkKCQl2YXIgdk9wZXIgc3RyaW5nCgkJdmFyIHZWYWx1ZXMgaW50ZXJmYWNle30KCQlpZiBwYWlyLCBvayA6PSBvcFZhbHVlLihzdHJpbmcpOyBvayB7CgkJCXZPcGVyLCB2VmFsdWVzID0gU3BsaXRNb2RpZmllclRva2VuKHBhaXIpCgkJfSBlbHNlIHsKCQkJdlZhbHVlcyA9IG9wVmFsdWUKCQl9CgkJaWYgdHlwZXV0aWwuSXNTY2FsYXIodlZhbHVlcykgewoJCQlpZiB2UyA6PSB0eXBldXRpbC5TdHJpbmcodlZhbHVlcyk7IHN0cmluZ3MuQ29udGFpbnModlMsIFZhbHVlU2VwYXJhdG9yKSB7CgkJCQl2VmFsdWVzID0gc3RyaW5ncy5TcGxpdCh2UywgVmFsdWVTZXBhcmF0b3IpCgkJCX0KCQl9CgkJcnYuQWRkQ3JpdGVyaWEoQ3JpdGVyaW9ue1R5cGU6IGRhbC5UeXBlKGZUeXBlKSwgRmllbGQ6IGZOYW1lLCBPcGVyYXRvcjogdk9wZXIsIFZhbHVlczogc2xpY2V1dGlsLlNsaWNlaWZ5KHZWYWx1ZXMpfSkKCX0KCXJldHVybiAmcnYsIG5pbAp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "GetFirstValue",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "interface{}"
                                },
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "GetFirstValue() (interface{}, bool)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetIdentityValue",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "interface{}"
                                },
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "GetIdentityValue() (interface{}, bool)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetSort",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]SortBy"
                                }
                            ],
                            "Signature": "GetSort() []SortBy",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetValues",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "field",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "[]interface{}"
                                },
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "GetValues(field string) ([]interface{}, bool)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IdOnly",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IdOnly() bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "IsMatchAll",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "IsMatchAll() bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "MakeFilter",
                            "Arguments": [
                                {
                                    "Name": "specs",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "Filter"
                                }
                            ],
                            "Signature": "MakeFilter(specs ...string) Filter",
                            "Source": "ewoJc3BlYyA6PSBzdHJpbmdzLkpvaW4oc3BlY3MsIENyaXRlcmlhU2VwYXJhdG9yKQoJZiA6PSBGaWx0ZXJ7U3BlYzogc3BlYywgQ3JpdGVyaWE6IG1ha2UoW11Dcml0ZXJpb24sIDApLCBTb3J0OiBtYWtlKFtdc3RyaW5nLCAwKSwgRmllbGRzOiBtYWtlKFtdc3RyaW5nLCAwKSwgT3B0aW9uczogbWFrZShtYXBbc3RyaW5nXWludGVyZmFjZXt9KSwgUGFnaW5hdGU6IHRydWUsIElkZW50aXR5RmllbGQ6IERlZmF1bHRJZGVudGl0eUZpZWxkLCBOb3JtYWxpemVyOiBEZWZhdWx0Tm9ybWFsaXplckZ1bmN9CglpZiBzcGVjID09IEFsbFZhbHVlIHsKCQlmLk1hdGNoQWxsID0gdHJ1ZQoJfQoJcmV0dXJuIGYKfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "MatchesRecord",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "record",
                                    "Type": "*dal.Record"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "MatchesRecord(record *dal.Record) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "MustParse",
                            "Arguments": [
                                {
                                    "Name": "in",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Filter"
                                }
                            ],
                            "Signature": "MustParse(in interface{}) *Filter",
                            "Source": "ewoJaWYgZmx0LCBlcnIgOj0gUGFyc2UoaW4pOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gZmx0Cgl9IGVsc2UgewoJCXBhbmljKCJmaWx0ZXI6ICIgKyBlcnIuRXJyb3IoKSkKCX0KfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "New",
                            "Returns": [
                                {
                                    "Type": "*Filter"
                                }
                            ],
                            "Signature": "New() *Filter",
                            "Source": "ewoJcmV0dXJuICZGaWx0ZXJ7Q3JpdGVyaWE6IG1ha2UoW11Dcml0ZXJpb24sIDApLCBTb3J0OiBtYWtlKFtdc3RyaW5nLCAwKSwgRmllbGRzOiBtYWtlKFtdc3RyaW5nLCAwKSwgT3B0aW9uczogbWFrZShtYXBbc3RyaW5nXWludGVyZmFjZXt9KSwgUGFnaW5hdGU6IHRydWUsIElkZW50aXR5RmllbGQ6IERlZmF1bHRJZGVudGl0eUZpZWxkLCBOb3JtYWxpemVyOiBEZWZhdWx0Tm9ybWFsaXplckZ1bmN9Cn0=",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "NewFromMap",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "in",
                                    "Type": "map[string]interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Filter"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "NewFromMap(in map[string]interface{}) (*Filter, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "NewFromSpec",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "specs",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Filter"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "NewFromSpec(specs ...string) (*Filter, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Null",
                            "Returns": [
                                {
                                    "Type": "*Filter"
                                }
                            ],
                            "Signature": "Null() *Filter",
                            "Source": "ewoJZiA6PSBNYWtlRmlsdGVyKGBgKQoJcmV0dXJuICZmCn0=",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "Parse",
                            "Arguments": [
                                {
                                    "Name": "in",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Filter"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Parse(in interface{}) (*Filter, error)",
                            "Source": "ewoJaWYgZiwgb2sgOj0gaW4uKEZpbHRlcik7IG9rIHsKCQlyZXR1cm4gJmYsIG5pbAoJfSBlbHNlIGlmIGYsIG9rIDo9IGluLigqRmlsdGVyKTsgb2sgewoJCXJldHVybiBmLCBuaWwKCX0gZWxzZSBpZiBlbGVtIDo9IHR5cGV1dGlsLlJlc29sdmVWYWx1ZShpbik7IHR5cGV1dGlsLklzU3RydWN0KGVsZW0pIHsKCQlyZXR1cm4gRnJvbU1hcCh0eXBldXRpbC5WKGVsZW0pLk1hcE5hdGl2ZSh1dGlsLlJlY29yZFN0cnVjdFRhZykpCgl9IGVsc2UgaWYgdHlwZXV0aWwuSXNNYXAoaW4pIHsKCQlyZXR1cm4gRnJvbU1hcChtYXB1dGlsLk0oaW4pLk1hcE5hdGl2ZSgpKQoJfSBlbHNlIGlmIGZTdHIsIG9rIDo9IGluLihzdHJpbmcpOyBvayB7CgkJcmV0dXJuIFBhcnNlU3BlYyhmU3RyKQoJfSBlbHNlIHsKCQlyZXR1cm4gTnVsbCgpLCBmbXQuRXJyb3JmKCJFeHBlY3RlZCBmaWx0ZXIuRmlsdGVyLCBtYXAsIG9yIHN0cmluZzsgZ290OiAlVCIsIGluKQoJfQp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "ParseSpec",
                            "Comment": "Filter syntax definition",
                            "Arguments": [
                                {
                                    "Name": "spec",
                                    "Type": "string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Filter"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ParseSpec(spec string) (*Filter, error)",
                            "Source": "ewoJdmFyIGNyaXRlcmlvbiBDcml0ZXJpb24KCXNwZWMgPSBzdHJpbmdzLlRyaW1QcmVmaXgoc3BlYywgYC9gKQoJaWYgc3BlYyA9PSBBbGxWYWx1ZSB7CgkJcmV0dXJuIEFsbCgpLCBuaWwKCX0KCXJ2ViA6PSBNYWtlRmlsdGVyKHNwZWMpCglydiA6PSAmcnZWCgljcml0ZXJpYVByZSA6PSBzdHJpbmdzLlNwbGl0KHNwZWMsIENyaXRlcmlhU2VwYXJhdG9yKQoJY3JpdGVyaWEgOj0gbWFrZShbXXN0cmluZywgMCkKCWlmIENyaXRlcmlhU2VwYXJhdG9yID09IEZpZWxkVGVybVNlcGFyYXRvciB7CgkJY3JpdGVyaWEgPSBjcml0ZXJpYVByZQoJfSBlbHNlIHsKCQlmb3IgXywgZmllbGRUZXJtIDo9IHJhbmdlIGNyaXRlcmlhUHJlIHsKCQkJcGFydHMgOj0gc3RyaW5ncy5TcGxpdE4oZmllbGRUZXJtLCBGaWVsZFRlcm1TZXBhcmF0b3IsIDIpCgkJCWNyaXRlcmlhID0gYXBwZW5kKGNyaXRlcmlhLCBwYXJ0cy4uLikKCQl9Cgl9Cglzd2l0Y2ggewoJY2FzZSBzcGVjID09IGBgOgoJCW51bGxGaWx0ZXIgOj0gTWFrZUZpbHRlcihgYCkKCQlyZXR1cm4gJm51bGxGaWx0ZXIsIG5pbAoJY2FzZSBzcGVjID09IEFsbFZhbHVlOgoJCXJldHVybiBydiwgbmlsCgljYXNlIGxlbihjcml0ZXJpYSkgPj0gMjoKCQlmb3IgaSwgdG9rZW4gOj0gcmFuZ2UgY3JpdGVyaWEgewoJCQlpZiAoaSAlIDIpID09IDAgewoJCQkJdmFyIGFkZFNvcnRBc2MgKmJvb2wKCQkJCWlmIHN0cmluZ3MuSGFzUHJlZml4KHRva2VuLCBTb3J0QXNjZW5kaW5nKSB7CgkJCQkJdiA6PSB0cnVlCgkJCQkJYWRkU29ydEFzYyA9ICZ2CgkJCQl9IGVsc2UgaWYgc3RyaW5ncy5IYXNQcmVmaXgodG9rZW4sIFNvcnREZXNjZW5kaW5nKSB7CgkJCQkJdiA6PSBmYWxzZQoJCQkJCWFkZFNvcnRBc2MgPSAmdgoJCQkJfQoJCQkJdG9rZW4gPSBzdHJpbmdzLlRyaW1QcmVmaXgodG9rZW4sIFNvcnREZXNjZW5kaW5nKQoJCQkJdG9rZW4gPSBzdHJpbmdzLlRyaW1QcmVmaXgodG9rZW4sIFNvcnRBc2NlbmRpbmcpCgkJCQlmVHlwZSwgZk5hbWUgOj0gU3BsaXRNb2RpZmllclRva2VuKHRva2VuKQoJCQkJaWYgZlR5cGUgPT0gYGAgewoJCQkJCWNyaXRlcmlvbiA9IENyaXRlcmlvbntGaWVsZDogZk5hbWUsIFR5cGU6IGRhbC5BdXRvVHlwZX0KCQkJCX0gZWxzZSB7CgkJCQkJdHlwZUxlbmd0aFBhaXIgOj0gc3RyaW5ncy5TcGxpdE4oZlR5cGUsIEZpZWxkTGVuZ3RoRGVsaW1pdGVyLCAyKQoJCQkJCWlmIGxlbih0eXBlTGVuZ3RoUGFpcikgPT0gMSB7CgkJCQkJCWNyaXRlcmlvbiA9IENyaXRlcmlvbntUeXBlOiBzbGljZXV0aWwuT3IoZGFsLlR5cGUoZlR5cGUpLCBkYWwuU3RyaW5nVHlwZSkuKGRhbC5UeXBlKSwgRmllbGQ6IGZOYW1lfQoJCQkJCX0gZWxzZSB7CgkJCQkJCWlmIHYsIGVyciA6PSBzdHJjb252LlBhcnNlVWludCh0eXBlTGVuZ3RoUGFpclsxXSwgMTAsIDMyKTsgZXJyID09IG5pbCB7CgkJCQkJCQljcml0ZXJpb24gPSBDcml0ZXJpb257VHlwZTogc2xpY2V1dGlsLk9yKGRhbC5UeXBlKHR5cGVMZW5ndGhQYWlyWzBdKSwgZGFsLlN0cmluZ1R5cGUpLihkYWwuVHlwZSksIExlbmd0aDogaW50KHYpLCBGaWVsZDogZk5hbWV9CgkJCQkJCX0gZWxzZSB7CgkJCQkJCQlyZXR1cm4gcnYsIGVycgoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQkJaWYgYWRkU29ydEFzYyAhPSBuaWwgewoJCQkJCWlmICphZGRTb3J0QXNjID09IHRydWUgewoJCQkJCQlydi5Tb3J0ID0gYXBwZW5kKHJ2LlNvcnQsIGNyaXRlcmlvbi5GaWVsZCkKCQkJCQl9IGVsc2UgewoJCQkJCQlydi5Tb3J0ID0gYXBwZW5kKHJ2LlNvcnQsIFNvcnREZXNjZW5kaW5nK2NyaXRlcmlvbi5GaWVsZCkKCQkJCQl9CgkJCQl9CgkJCX0gZWxzZSB7CgkJCQl2T3BlciwgdlZhbHVlIDo9IFNwbGl0TW9kaWZpZXJUb2tlbih0b2tlbikKCQkJCWNyaXRlcmlvbi5WYWx1ZXMgPSBtYWtlKFtdaW50ZXJmYWNle30sIDApCgkJCQlpZiB2T3BlciAhPSBgYCB7CgkJCQkJY3JpdGVyaW9uLk9wZXJhdG9yID0gdk9wZXIKCQkJCX0KCQkJCWZvciBfLCB2IDo9IHJhbmdlIHN0cmluZ3MuU3BsaXQodlZhbHVlLCBWYWx1ZVNlcGFyYXRvcikgewoJCQkJCXZhciB2YWx1ZSBpbnRlcmZhY2V7fQoJCQkJCXZhbHVlID0gdgoJCQkJCWlmIGNyaXRlcmlvbi5UeXBlID09IGRhbC5UaW1lVHlwZSB7CgkJCQkJCWZhY3RvciA6PSAxCgkJCQkJCWlmIHN0cmluZ3MuSGFzUHJlZml4KHYsIGAtYCkgewoJCQkJCQkJdiA9IHZbMTpdCgkJCQkJCQlmYWN0b3IgPSAtMQoJCQkJCQl9CgkJCQkJCWlmIGRlbHRhLCBlcnIgOj0gdGltZXV0aWwuUGFyc2VEdXJhdGlvbih2KTsgZXJyID09IG5pbCB7CgkJCQkJCQl2YWx1ZSA9IHRpbWUuTm93KCkuQWRkKHRpbWUuRHVyYXRpb24oZmFjdG9yKSAqIGRlbHRhKQoJCQkJCQl9IGVsc2UgaWYgdG0sIGVyciA6PSBzdHJpbmd1dGlsLkNvbnZlcnRUb1RpbWUodik7IGVyciA9PSBuaWwgewoJCQkJCQkJdmFsdWUgPSB0bQoJCQkJCQl9CgkJCQkJfQoJCQkJCWNyaXRlcmlvbi5WYWx1ZXMgPSBhcHBlbmQoY3JpdGVyaW9uLlZhbHVlcywgdmFsdWUpCgkJCQl9CgkJCQlpZiBRdWVyeVVuZXNjYXBlVmFsdWVzIHsKCQkJCQlmb3IgaSwgdmFsdWUgOj0gcmFuZ2UgY3JpdGVyaW9uLlZhbHVlcyB7CgkJCQkJCWlmIHYsIGVyciA6PSB1cmwuUXVlcnlVbmVzY2FwZShmbXQuU3ByaW50ZigiJXYiLCB2YWx1ZSkpOyBlcnIgPT0gbmlsIHsKCQkJCQkJCWNyaXRlcmlvbi5WYWx1ZXNbaV0gPSB2CgkJCQkJCX0gZWxzZSB7CgkJCQkJCQlyZXR1cm4gcnYsIGVycgoJCQkJCQl9CgkJCQkJfQoJCQkJfQoJCQkJcnYuQ3JpdGVyaWEgPSBhcHBlbmQocnYuQ3JpdGVyaWEsIGNyaXRlcmlvbikKCQkJfQoJCX0KCWRlZmF1bHQ6CgkJcmV0dXJuIHJ2LCBmbXQuRXJyb3JmKCJJbnZhbGlkIGZpbHRlciBzcGVjOiAlcyIsIHNwZWMpCgl9CglyZXR1cm4gcnYsIG5pbAp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "SortBy",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Filter"
                                }
                            ],
                            "Signature": "SortBy(fields ...string) *Filter",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "WithFields",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "fields",
                                    "Type": "...string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Filter"
                                }
                            ],
                            "Signature": "WithFields(fields ...string) *Filter",
                            "IsPackageLevel": false
                        }
                    ],
                    "Fields": [
                        {
                            "Name": "Spec",
                            "Type": "string"
                        },
                        {
                            "Name": "MatchAll",
                            "Type": "bool"
                        },
                        {
                            "Name": "Offset",
                            "Type": "int"
                        },
                        {
                            "Name": "Limit",
                            "Type": "int"
                        },
                        {
                            "Name": "Criteria",
                            "Type": "[]Criterion"
                        },
                        {
                            "Name": "Sort",
                            "Type": "[]string"
                        },
                        {
                            "Name": "Fields",
                            "Type": "[]string"
                        },
                        {
                            "Name": "Options",
                            "Type": "map[string]interface{}"
                        },
                        {
                            "Name": "Paginate",
                            "Type": "bool"
                        },
                        {
                            "Name": "IdentityField",
                            "Type": "string"
                        },
                        {
                            "Name": "Normalizer",
                            "Type": "NormalizerFunc"
                        },
                        {
                            "Name": "Conjunction",
                            "Type": "ConjunctionType"
                        }
                    ],
                    "Source": "dHlwZSBGaWx0ZXIgc3RydWN0IHsKCVNwZWMgICAgICAgICAgc3RyaW5nCglNYXRjaEFsbCAgICAgIGJvb2wKCU9mZnNldCAgICAgICAgaW50CglMaW1pdCAgICAgICAgIGludAoJQ3JpdGVyaWEgICAgICBbXUNyaXRlcmlvbgoJU29ydCAgICAgICAgICBbXXN0cmluZwoJRmllbGRzICAgICAgICBbXXN0cmluZwoJT3B0aW9ucyAgICAgICBtYXBbc3RyaW5nXWludGVyZmFjZXt9CglQYWdpbmF0ZSAgICAgIGJvb2wKCUlkZW50aXR5RmllbGQgc3RyaW5nCglOb3JtYWxpemVyICAgIE5vcm1hbGl6ZXJGdW5jIGBqc29uOiItIiBic29uOiItIiBwaXZvdDoiLSJgCglDb25qdW5jdGlvbiAgIENvbmp1bmN0aW9uVHlwZQp9"
                },
                "Generator": {
                    "Name": "Generator",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "Finalize",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "_",
                                    "Type": "*Filter"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Finalize(_ *Filter) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Payload",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "[]byte"
                                }
                            ],
                            "Signature": "Payload() []byte",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Push",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "data",
                                    "Type": "[]byte"
                                }
                            ],
                            "Signature": "Push(data []byte)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Reset",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Signature": "Reset()",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Set",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "data",
                                    "Type": "[]byte"
                                }
                            ],
                            "Signature": "Set(data []byte)",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBHZW5lcmF0b3Igc3RydWN0IHsKCUlHZW5lcmF0b3IKCn0K",
                    "HasUnexportedFields": true
                },
                "IGenerator": {
                    "Name": "IGenerator",
                    "Source": "dHlwZSBJR2VuZXJhdG9yIGludGVyZmFjZSB7CglJbml0aWFsaXplKHN0cmluZykgZXJyb3IKCUZpbmFsaXplKCpGaWx0ZXIpIGVycm9yCglQdXNoKFtdYnl0ZSkKCVNldChbXWJ5dGUpCglQYXlsb2FkKCkgW11ieXRlCglXaXRoQ3JpdGVyaW9uKENyaXRlcmlvbikgZXJyb3IKCU9yQ3JpdGVyaW9uKENyaXRlcmlvbikgZXJyb3IKCVdpdGhGaWVsZChzdHJpbmcpIGVycm9yCglHcm91cEJ5RmllbGQoc3RyaW5nKSBlcnJvcgoJQWdncmVnYXRlQnlGaWVsZChBZ2dyZWdhdGlvbiwgc3RyaW5nKSBlcnJvcgoJU2V0T3B0aW9uKHN0cmluZywgaW50ZXJmYWNle30pIGVycm9yCglHZXRWYWx1ZXMoKSBbXWludGVyZmFjZXt9CglSZXNldCgpCn0="
                },
                "NormalizerFunc": {
                    "Name": "NormalizerFunc",
                    "Source": "dHlwZSBOb3JtYWxpemVyRnVuYyBmdW5jKGluIHN0cmluZykgc3RyaW5nIC8vIHt9Cg=="
                },
                "SortBy": {
                    "Name": "SortBy",
                    "MetaType": "struct",
                    "Fields": [
                        {
                            "Name": "Field",
                            "Type": "string"
                        },
                        {
                            "Name": "Descending",
                            "Type": "bool"
                        }
                    ],
                    "Source": "dHlwZSBTb3J0Qnkgc3RydWN0IHsKCUZpZWxkICAgICAgc3RyaW5nCglEZXNjZW5kaW5nIGJvb2wKfQ=="
                }
            },
            "Packages": [
                {
                    "Name": "generators",
                    "CanonicalImportPath": "github.com/ghetzel/pivot/filter/generators",
                    "ImportPath": "filter/generators",
                    "ParentPackage": "filter",
                    "URL": "https://github.com/ghetzel/pivot",
                    "Synopsis": "",
                    "MainFunction": false,
                    "CommentWordCount": 16,
                    "LineCount": 3239,
                    "SourceLineCount": 2737,
                    "FunctionCount": 43,
                    "TypeCount": 9,
                    "ConstantCount": 4,
                    "VariableCount": 15,
                    "Statistics": {
                        "Mean": 0.0129,
                        "StdDev": 0.1039,
                        "GeometricMean": 0,
                        "HarmonicMean": 0,
                        "Median": 0,
                        "Minimum": 0,
                        "Maximum": 1
                    },
                    "Files": [
                        {
                            "Name": "elasticsearch.go",
                            "Imports": [
                                {
                                    "PackageName": "encoding/json",
                                    "Alias": "json"
                                },
                                {
                                    "PackageName": "fmt",
                                    "Alias": "fmt"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/pivot/v3/filter",
                                    "Alias": "filter"
                                }
                            ],
                            "Size": 3807,
                            "LineCount": 176,
                            "SourceLineCount": 144,
                            "FunctionCount": 10,
                            "TypeCount": 1,
                            "ConstantCount": 0,
                            "VariableCount": 1
                        },
                        {
                            "Name": "elasticsearch_util.go",
                            "Imports": [
                                {
                                    "PackageName": "fmt",
                                    "Alias": "fmt"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                    "Alias": "typeutil"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/pivot/v3/filter",
                                    "Alias": "filter"
                                }
                            ],
                            "Size": 7050,
                            "LineCount": 295,
                            "SourceLineCount": 247,
                            "FunctionCount": 0,
                            "TypeCount": 0,
                            "ConstantCount": 0,
                            "VariableCount": 3
                        },
                        {
                            "Name": "mongodb-util.go",
                            "Imports": [
                                {
                                    "PackageName": "fmt",
                                    "Alias": "fmt"
                                },
                                {
                                    "PackageName": "regexp",
                                    "Alias": "regexp"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                    "Alias": "stringutil"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/pivot/v3/filter",
                                    "Alias": "filter"
                                }
                            ],
                            "Size": 4664,
                            "LineCount": 194,
                            "SourceLineCount": 162,
                            "FunctionCount": 0,
                            "TypeCount": 0,
                            "ConstantCount": 0,
                            "VariableCount": 0
                        },
                        {
                            "Name": "mongodb.go",
                            "Imports": [
                                {
                                    "PackageName": "encoding/json",
                                    "Alias": "json"
                                },
                                {
                                    "PackageName": "fmt",
                                    "Alias": "fmt"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                    "Alias": "stringutil"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/pivot/v3/filter",
                                    "Alias": "filter"
                                }
                            ],
                            "Size": 2982,
                            "LineCount": 145,
                            "SourceLineCount": 115,
                            "FunctionCount": 9,
                            "TypeCount": 1,
                            "ConstantCount": 0,
                            "VariableCount": 0
                        },
                        {
                            "Name": "mongodb_test.go",
                            "Imports": [
                                {
                                    "PackageName": "testing",
                                    "Alias": "testing"
                                },
                                {
                                    "PackageName": "encoding/json",
                                    "Alias": "json"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/pivot/v3/filter",
                                    "Alias": "filter"
                                },
                                {
                                    "PackageName": "github.com/stretchr/testify/require",
                                    "Alias": "require"
                                }
                            ],
                            "Size": 4531,
                            "LineCount": 217,
                            "SourceLineCount": 206,
                            "FunctionCount": 0,
                            "TypeCount": 0,
                            "ConstantCount": 0,
                            "VariableCount": 0
                        },
                        {
                            "Name": "sql.go",
                            "Imports": [
                                {
                                    "PackageName": "bytes",
                                    "Alias": "bytes"
                                },
                                {
                                    "PackageName": "encoding/json",
                                    "Alias": "json"
                                },
                                {
                                    "PackageName": "fmt",
                                    "Alias": "fmt"
                                },
                                {
                                    "PackageName": "reflect",
                                    "Alias": "reflect"
                                },
                                {
                                    "PackageName": "sort",
                                    "Alias": "sort"
                                },
                                {
                                    "PackageName": "strings",
                                    "Alias": "strings"
                                },
                                {
                                    "PackageName": "time",
                                    "Alias": "time"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                                    "Alias": "maputil"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/go-stockutil/rxutil",
                                    "Alias": "rxutil"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                                    "Alias": "sliceutil"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                                    "Alias": "stringutil"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                                    "Alias": "typeutil"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/pivot/v3/dal",
                                    "Alias": "dal"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/pivot/v3/filter",
                                    "Alias": "filter"
                                }
                            ],
                            "Size": 29970,
                            "LineCount": 1067,
                            "SourceLineCount": 865,
                            "FunctionCount": 24,
                            "TypeCount": 7,
                            "ConstantCount": 4,
                            "VariableCount": 11
                        },
                        {
                            "Name": "sql_test.go",
                            "Imports": [
                                {
                                    "PackageName": "fmt",
                                    "Alias": "fmt"
                                },
                                {
                                    "PackageName": "sort",
                                    "Alias": "sort"
                                },
                                {
                                    "PackageName": "strings",
                                    "Alias": "strings"
                                },
                                {
                                    "PackageName": "testing",
                                    "Alias": "testing"
                                },
                                {
                                    "PackageName": "time",
                                    "Alias": "time"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                                    "Alias": "maputil"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/pivot/v3/dal",
                                    "Alias": "dal"
                                },
                                {
                                    "PackageName": "github.com/ghetzel/pivot/v3/filter",
                                    "Alias": "filter"
                                },
                                {
                                    "PackageName": "github.com/stretchr/testify/require",
                                    "Alias": "require"
                                }
                            ],
                            "Size": 30405,
                            "LineCount": 1145,
                            "SourceLineCount": 998,
                            "FunctionCount": 0,
                            "TypeCount": 0,
                            "ConstantCount": 0,
                            "VariableCount": 0
                        }
                    ],
                    "Constants": [
                        {
                            "Name": "SqlDeleteStatement",
                            "Immutable": true
                        },
                        {
                            "Name": "SqlInsertStatement",
                            "Immutable": true
                        },
                        {
                            "Name": "SqlSelectStatement",
                            "Type": "SqlStatementType",
                            "Immutable": true,
                            "Expression": "iota"
                        },
                        {
                            "Name": "SqlUpdateStatement",
                            "Immutable": true
                        }
                    ],
                    "Variables": [
                        {
                            "Name": "CassandraTypeMapping"
                        },
                        {
                            "Name": "DefaultMinVersionCompat",
                            "Expression": "float64(6)",
                            "Comment": "Elasticsearch Generator"
                        },
                        {
                            "Name": "DefaultSqlTypeMapping",
                            "Expression": "GenericTypeMapping"
                        },
                        {
                            "Name": "ElasticsearchExactMatchQueryType",
                            "Expression": "`term`",
                            "Value": "term"
                        },
                        {
                            "Name": "ElasticsearchFulltextDefaultConjunctionAnd",
                            "Expression": "true"
                        },
                        {
                            "Name": "ElasticsearchFuzzyMatchQueryType",
                            "Expression": "`match`",
                            "Value": "match"
                        },
                        {
                            "Name": "GenericTypeMapping"
                        },
                        {
                            "Name": "MysqlTypeMapping"
                        },
                        {
                            "Name": "NoTypeMapping",
                            "Expression": "SqlTypeMapping{}"
                        },
                        {
                            "Name": "PostgresJsonTypeMapping"
                        },
                        {
                            "Name": "PostgresTypeMapping"
                        },
                        {
                            "Name": "SqlJsonTypeDecoder"
                        },
                        {
                            "Name": "SqlJsonTypeEncoder"
                        },
                        {
                            "Name": "SqlMaxPlaceholders",
                            "Expression": "16384"
                        },
                        {
                            "Name": "SqliteTypeMapping"
                        }
                    ],
                    "Tests": [
                        {
                            "Name": "TestMongodb",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestMongodb(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl0ZXN0cyA6PSBtYXBbc3RyaW5nXW1vbmdvUXZ7YGFsbGA6IHtxdWVyeTogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXt9LCB2YWx1ZXM6IFtdaW50ZXJmYWNle317fX0sIGBpZC8xYDoge3F1ZXJ5OiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BfaWRgOiBgMWB9LCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMSl9fSwgYGlkL25vdDoxYDoge3F1ZXJ5OiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BfaWRgOiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2AkbmVgOiBmbG9hdDY0KDEpfX0sIHZhbHVlczogW11pbnRlcmZhY2V7fXtpbnQ2NCgxKX19LCBgbmFtZS9Cb2IgSm9obnNvbmA6IHtxdWVyeTogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgbmFtZWA6IGBCb2IgSm9obnNvbmB9LCB2YWx1ZXM6IFtdaW50ZXJmYWNle317YEJvYiBKb2huc29uYH19LCBgYWdlLzIxYDoge3F1ZXJ5OiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BhZ2VgOiBmbG9hdDY0KDIxKX0sIHZhbHVlczogW11pbnRlcmZhY2V7fXtpbnQ2NCgyMSl9fSwgYGVuYWJsZWQvdHJ1ZWA6IHtxdWVyeTogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgZW5hYmxlZGA6IHRydWV9LCB2YWx1ZXM6IFtdaW50ZXJmYWNle317dHJ1ZX19LCBgZW5hYmxlZC9mYWxzZWA6IHtxdWVyeTogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgZW5hYmxlZGA6IGZhbHNlfSwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2ZhbHNlfX0sIGBlbmFibGVkL251bGxgOiB7cXVlcnk6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YCRvcmA6IFtdaW50ZXJmYWNle317bWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgZW5hYmxlZGA6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YCRleGlzdHNgOiBmYWxzZX19LCBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BlbmFibGVkYDogbmlsfX19LCB2YWx1ZXM6IFtdaW50ZXJmYWNle317bmlsfX0sIGBlbmFibGVkL25vdDpudWxsYDoge3F1ZXJ5OiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2AkYW5kYDogW11pbnRlcmZhY2V7fXttYXBbc3RyaW5nXWludGVyZmFjZXt9e2BlbmFibGVkYDogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgJGV4aXN0c2A6IHRydWV9fSwgbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgZW5hYmxlZGA6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YCRub3RgOiBuaWx9fX19LCB2YWx1ZXM6IFtdaW50ZXJmYWNle317bmlsfX0sIGBhZ2UvbHQ6MjFgOiB7cXVlcnk6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YGFnZWA6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YCRsdGA6IGZsb2F0NjQoMjEpfX0sIHZhbHVlczogW11pbnRlcmZhY2V7fXtpbnQ2NCgyMSl9fSwgYGFnZS9sdGU6MjFgOiB7cXVlcnk6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YGFnZWA6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YCRsdGVgOiBmbG9hdDY0KDIxKX19LCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMjEpfX0sIGBhZ2UvZ3Q6MjFgOiB7cXVlcnk6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YGFnZWA6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YCRndGA6IGZsb2F0NjQoMjEpfX0sIHZhbHVlczogW11pbnRlcmZhY2V7fXtpbnQ2NCgyMSl9fSwgYGFnZS9ndGU6MjFgOiB7cXVlcnk6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YGFnZWA6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YCRndGVgOiBmbG9hdDY0KDIxKX19LCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMjEpfX0sIGBmYWN0b3IvbHQ6My4xNDE1OTdgOiB7cXVlcnk6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YGZhY3RvcmA6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YCRsdGA6IGZsb2F0NjQoMy4xNDE1OTcpfX0sIHZhbHVlczogW11pbnRlcmZhY2V7fXtmbG9hdDY0KDMuMTQxNTk3KX19LCBgZmFjdG9yL2x0ZTozLjE0MTU5N2A6IHtxdWVyeTogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgZmFjdG9yYDogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgJGx0ZWA6IGZsb2F0NjQoMy4xNDE1OTcpfX0sIHZhbHVlczogW11pbnRlcmZhY2V7fXtmbG9hdDY0KDMuMTQxNTk3KX19LCBgZmFjdG9yL2d0OjMuMTQxNTk3YDoge3F1ZXJ5OiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BmYWN0b3JgOiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2AkZ3RgOiBmbG9hdDY0KDMuMTQxNTk3KX19LCB2YWx1ZXM6IFtdaW50ZXJmYWNle317ZmxvYXQ2NCgzLjE0MTU5Nyl9fSwgYGZhY3Rvci9ndGU6My4xNDE1OTdgOiB7cXVlcnk6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YGZhY3RvcmA6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YCRndGVgOiBmbG9hdDY0KDMuMTQxNTk3KX19LCB2YWx1ZXM6IFtdaW50ZXJmYWNle317ZmxvYXQ2NCgzLjE0MTU5Nyl9fSwgYG5hbWUvY29udGFpbnM6b2JgOiB7cXVlcnk6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YG5hbWVgOiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2AkcmVnZXhgOiBgLipvYi4qYCwgYCRvcHRpb25zYDogYHNpYH19LCB2YWx1ZXM6IFtdaW50ZXJmYWNle317YG9iYH19LCBgbmFtZS9wcmVmaXg6b2JgOiB7cXVlcnk6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YG5hbWVgOiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2AkcmVnZXhgOiBgXm9iLipgLCBgJG9wdGlvbnNgOiBgc2lgfX0sIHZhbHVlczogW11pbnRlcmZhY2V7fXtgb2JgfX0sIGBuYW1lL3N1ZmZpeDpvYmA6IHtxdWVyeTogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgbmFtZWA6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YCRyZWdleGA6IGAuKm9iJGAsIGAkb3B0aW9uc2A6IGBzaWB9fSwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2BvYmB9fSwgYGFnZS83L25hbWUvdGVkYDoge3F1ZXJ5OiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2AkYW5kYDogW11pbnRlcmZhY2V7fXttYXBbc3RyaW5nXWludGVyZmFjZXt9e2BhZ2VgOiBmbG9hdDY0KDcpfSwgbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgbmFtZWA6IGB0ZWRgfX19LCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoNyksIGB0ZWRgfX19Cglmb3Igc3BlYywgZXhwZWN0ZWQgOj0gcmFuZ2UgdGVzdHMgewoJCWYsIGVyciA6PSBmaWx0ZXIuUGFyc2Uoc3BlYykKCQlhc3NlcnQuTm9FcnJvcihlcnIpCgkJZ2VuIDo9IE5ld01vbmdvREJHZW5lcmF0b3IoKQoJCWFjdHVhbCwgZXJyIDo9IGZpbHRlci5SZW5kZXIoZ2VuLCBgZm9vYCwgZikKCQlhc3NlcnQuTm9FcnJvcihlcnIpCgkJdmFyIHF1ZXJ5IG1hcFtzdHJpbmddaW50ZXJmYWNle30KCQlhc3NlcnQuTm9FcnJvcihqc29uLlVubWFyc2hhbChhY3R1YWwsICZxdWVyeSkpCgkJYXNzZXJ0LkVxdWFsKGV4cGVjdGVkLnF1ZXJ5LCBxdWVyeSwgImZpbHRlcjogJXYiLCBzcGVjKQoJCWFzc2VydC5FcXVhbChleHBlY3RlZC52YWx1ZXMsIGdlbi5HZXRWYWx1ZXMoKSwgImZpbHRlcjogJXYiLCBzcGVjKQoJfQp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlBulkDelete",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlBulkDelete(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmLCBlcnIgOj0gZmlsdGVyLlBhcnNlKGBuYW1lL25vdDpCb2J8RnJhbmt8U3RldmVgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJZ2VuIDo9IE5ld1NxbEdlbmVyYXRvcigpCglnZW4uVHlwZSA9IFNxbERlbGV0ZVN0YXRlbWVudAoJc3FsLCBlcnIgOj0gZmlsdGVyLlJlbmRlcihnZW4sIGBmb29gLCBmKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBERUxFVEUgRlJPTSBmb28gV0hFUkUgKG5hbWUgTk9UIElOKD8sID8sID8pKWAsIHN0cmluZyhzcWxbOl0pKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317YEJvYmAsIGBGcmFua2AsIGBTdGV2ZWB9LCBnZW4uR2V0VmFsdWVzKCkpCn0=",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlBulkDeleteWithNormalizers",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlBulkDeleteWithNormalizers(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmLCBlcnIgOj0gZmlsdGVyLlBhcnNlKGBuYW1lL3VubGlrZTpCb2J8RnJhbmt8U3RldmVgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJZ2VuIDo9IE5ld1NxbEdlbmVyYXRvcigpCglnZW4uVHlwZSA9IFNxbERlbGV0ZVN0YXRlbWVudAoJZ2VuLk5vcm1hbGl6ZUZpZWxkcyA9IFtdc3RyaW5ne2BuYW1lYH0KCWdlbi5Ob3JtYWxpemVyRm9ybWF0ID0gYExPV0VSKCVzKWAKCXNxbCwgZXJyIDo9IGZpbHRlci5SZW5kZXIoZ2VuLCBgZm9vYCwgZikKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgREVMRVRFIEZST00gZm9vIFdIRVJFIChMT1dFUihuYW1lKSBOT1QgSU4oTE9XRVIoPyksIExPV0VSKD8pLCBMT1dFUig/KSkpYCwgc3RyaW5nKHNxbFs6XSkpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXtgQm9iYCwgYEZyYW5rYCwgYFN0ZXZlYH0sIGdlbi5HZXRWYWx1ZXMoKSkKfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlDeletes",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlDeletes(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl0ZXN0cyA6PSBtYXBbc3RyaW5nXXF2e2BhbGxgOiB7cXVlcnk6IGBERUxFVEUgRlJPTSBmb29gLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317fX0sIGBpZC8xYDoge3F1ZXJ5OiBgREVMRVRFIEZST00gZm9vIFdIRVJFIChpZCA9ID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2ludDY0KDEpfX0sIGBpZC9ub3Q6MWA6IHtxdWVyeTogYERFTEVURSBGUk9NIGZvbyBXSEVSRSAoaWQgPD4gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMSl9fSwgYG5hbWUvQm9iIEpvaG5zb25gOiB7cXVlcnk6IGBERUxFVEUgRlJPTSBmb28gV0hFUkUgKG5hbWUgPSA/KWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXtgQm9iIEpvaG5zb25gfX0sIGBhZ2UvMjFgOiB7cXVlcnk6IGBERUxFVEUgRlJPTSBmb28gV0hFUkUgKGFnZSA9ID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2ludDY0KDIxKX19LCBgZW5hYmxlZC90cnVlYDoge3F1ZXJ5OiBgREVMRVRFIEZST00gZm9vIFdIRVJFIChlbmFibGVkID0gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317dHJ1ZX19LCBgZW5hYmxlZC9mYWxzZWA6IHtxdWVyeTogYERFTEVURSBGUk9NIGZvbyBXSEVSRSAoZW5hYmxlZCA9ID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2ZhbHNlfX0sIGBlbmFibGVkL251bGxgOiB7cXVlcnk6IGBERUxFVEUgRlJPTSBmb28gV0hFUkUgKGVuYWJsZWQgSVMgTlVMTClgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317fX0sIGBlbmFibGVkL25vdDpudWxsYDoge3F1ZXJ5OiBgREVMRVRFIEZST00gZm9vIFdIRVJFIChlbmFibGVkIElTIE5PVCBOVUxMKWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXt9fSwgYGFnZS9sdDoyMWA6IHtxdWVyeTogYERFTEVURSBGUk9NIGZvbyBXSEVSRSAoYWdlIDwgPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMjEpfX0sIGBhZ2UvbHRlOjIxYDoge3F1ZXJ5OiBgREVMRVRFIEZST00gZm9vIFdIRVJFIChhZ2UgPD0gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMjEpfX0sIGBhZ2UvZ3Q6MjFgOiB7cXVlcnk6IGBERUxFVEUgRlJPTSBmb28gV0hFUkUgKGFnZSA+ID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2ludDY0KDIxKX19LCBgYWdlL2d0ZToyMWA6IHtxdWVyeTogYERFTEVURSBGUk9NIGZvbyBXSEVSRSAoYWdlID49ID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2ludDY0KDIxKX19LCBgZmFjdG9yL2x0OjMuMTQxNTk3YDoge3F1ZXJ5OiBgREVMRVRFIEZST00gZm9vIFdIRVJFIChmYWN0b3IgPCA/KWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXtmbG9hdDY0KDMuMTQxNTk3KX19LCBgZmFjdG9yL2x0ZTozLjE0MTU5N2A6IHtxdWVyeTogYERFTEVURSBGUk9NIGZvbyBXSEVSRSAoZmFjdG9yIDw9ID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2Zsb2F0NjQoMy4xNDE1OTcpfX0sIGBmYWN0b3IvZ3Q6My4xNDE1OTdgOiB7cXVlcnk6IGBERUxFVEUgRlJPTSBmb28gV0hFUkUgKGZhY3RvciA+ID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2Zsb2F0NjQoMy4xNDE1OTcpfX0sIGBmYWN0b3IvZ3RlOjMuMTQxNTk3YDoge3F1ZXJ5OiBgREVMRVRFIEZST00gZm9vIFdIRVJFIChmYWN0b3IgPj0gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317ZmxvYXQ2NCgzLjE0MTU5Nyl9fSwgYG5hbWUvY29udGFpbnM6b2JgOiB7cXVlcnk6IGBERUxFVEUgRlJPTSBmb28gV0hFUkUgKG5hbWUgTElLRSA/KWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXtgJSVvYiUlYH19LCBgbmFtZS9wcmVmaXg6b2JgOiB7cXVlcnk6IGBERUxFVEUgRlJPTSBmb28gV0hFUkUgKG5hbWUgTElLRSA/KWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXtgb2IlJWB9fSwgYG5hbWUvc3VmZml4Om9iYDoge3F1ZXJ5OiBgREVMRVRFIEZST00gZm9vIFdIRVJFIChuYW1lIExJS0UgPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317YCUlb2JgfX0sIGBhZ2UvNy9uYW1lL3RlZGA6IHtxdWVyeTogYERFTEVURSBGUk9NIGZvbyBXSEVSRSAoYWdlID0gPykgQU5EIChuYW1lID0gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoNyksIGB0ZWRgfX19Cglmb3Igc3BlYywgZXhwZWN0ZWQgOj0gcmFuZ2UgdGVzdHMgewoJCWYsIGVyciA6PSBmaWx0ZXIuUGFyc2Uoc3BlYykKCQlhc3NlcnQuTm9FcnJvcihlcnIpCgkJZ2VuIDo9IE5ld1NxbEdlbmVyYXRvcigpCgkJZ2VuLlR5cGUgPSBTcWxEZWxldGVTdGF0ZW1lbnQKCQlhY3R1YWwsIGVyciA6PSBmaWx0ZXIuUmVuZGVyKGdlbiwgYGZvb2AsIGYpCgkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCWFzc2VydC5FcXVhbChleHBlY3RlZC5xdWVyeSwgc3RyaW5nKGFjdHVhbFs6XSksIHNwZWMpCgkJYXNzZXJ0LkVxdWFsKGV4cGVjdGVkLnZhbHVlcywgZ2VuLkdldFZhbHVlcygpLCBzcGVjKQoJfQp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlFieldQuoting",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlFieldQuoting(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmLCBlcnIgOj0gZmlsdGVyLlBhcnNlKGBhZ2UvNy9uYW1lL3RlZC9tdWx0aSBmaWVsZC90cnVlYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWZvciBmb3JtYXQsIHF1b3RlY2hhciA6PSByYW5nZSBtYXBbc3RyaW5nXXN0cmluZ3tgYDogYGAsIGAlcWA6IGAiYCwgImAlc2AiOiAiYCJ9IHsKCQlnZW4gOj0gTmV3U3FsR2VuZXJhdG9yKCkKCQlpZiBmb3JtYXQgIT0gYGAgewoJCQlnZW4uVHlwZU1hcHBpbmcuRmllbGROYW1lRm9ybWF0ID0gZm9ybWF0CgkJfQoJCWFjdHVhbCwgZXJyIDo9IGZpbHRlci5SZW5kZXIoZ2VuLCBgZm9vYCwgZikKCQlhc3NlcnQuTm9FcnJvcihlcnIpCgkJYXNzZXJ0LkVxdWFsKGBTRUxFQ1QgKiBGUk9NIGZvbyBgK2BXSEVSRSAoYCtxdW90ZWNoYXIrYGFnZWArcXVvdGVjaGFyK2AgPSA/KSBgK2BBTkQgKGArcXVvdGVjaGFyK2BuYW1lYCtxdW90ZWNoYXIrYCA9ID8pIGArYEFORCAoYCtxdW90ZWNoYXIrYG11bHRpIGZpZWxkYCtxdW90ZWNoYXIrYCA9ID8pYCwgc3RyaW5nKGFjdHVhbFs6XSkpCgkJZ2VuID0gTmV3U3FsR2VuZXJhdG9yKCkKCQlpZiBmb3JtYXQgIT0gYGAgewoJCQlnZW4uVHlwZU1hcHBpbmcuRmllbGROYW1lRm9ybWF0ID0gZm9ybWF0CgkJfQoJCWdlbi5UeXBlID0gU3FsSW5zZXJ0U3RhdGVtZW50CgkJZ2VuLklucHV0RGF0YSA9IG1hcFtzdHJpbmddaW50ZXJmYWNle317YGFnZWA6IDcsIGBuYW1lYDogYHRlZGAsIGBtdWx0aSBmaWVsZGA6IHRydWV9CgkJYWN0dWFsLCBlcnIgPSBmaWx0ZXIuUmVuZGVyKGdlbiwgYGZvb2AsIGYpCgkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCWFzc2VydC5FcXVhbChgSU5TRVJUIElOVE8gZm9vIChgK3F1b3RlY2hhcitgYWdlYCtxdW90ZWNoYXIrYCwgYCtxdW90ZWNoYXIrYG11bHRpIGZpZWxkYCtxdW90ZWNoYXIrYCwgYCtxdW90ZWNoYXIrYG5hbWVgK3F1b3RlY2hhcitgKSBWQUxVRVMgKD8sID8sID8pYCwgc3RyaW5nKGFjdHVhbFs6XSkpCgkJZ2VuID0gTmV3U3FsR2VuZXJhdG9yKCkKCQlpZiBmb3JtYXQgIT0gYGAgewoJCQlnZW4uVHlwZU1hcHBpbmcuRmllbGROYW1lRm9ybWF0ID0gZm9ybWF0CgkJfQoJCWdlbi5UeXBlID0gU3FsVXBkYXRlU3RhdGVtZW50CgkJZ2VuLklucHV0RGF0YSA9IG1hcFtzdHJpbmddaW50ZXJmYWNle317YGFnZWA6IDcsIGBuYW1lYDogYHRlZGAsIGBtdWx0aSBmaWVsZGA6IHRydWV9CgkJYWN0dWFsLCBlcnIgPSBmaWx0ZXIuUmVuZGVyKGdlbiwgYGZvb2AsIGYpCgkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCWFzc2VydC5FcXVhbChgVVBEQVRFIGZvbyBTRVQgYCtxdW90ZWNoYXIrYGFnZWArcXVvdGVjaGFyK2AgPSA/LCBgK3F1b3RlY2hhcitgbXVsdGkgZmllbGRgK3F1b3RlY2hhcitgID0gPywgYCtxdW90ZWNoYXIrYG5hbWVgK3F1b3RlY2hhcitgID0gPyBgK2BXSEVSRSAoYCtxdW90ZWNoYXIrYGFnZWArcXVvdGVjaGFyK2AgPSA/KSBgK2BBTkQgKGArcXVvdGVjaGFyK2BuYW1lYCtxdW90ZWNoYXIrYCA9ID8pIGArYEFORCAoYCtxdW90ZWNoYXIrYG11bHRpIGZpZWxkYCtxdW90ZWNoYXIrYCA9ID8pYCwgc3RyaW5nKGFjdHVhbFs6XSkpCgl9Cn0=",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlInserts",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlInserts(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl0ZXN0cyA6PSBbXXF2e3txdWVyeTogYElOU0VSVCBJTlRPIGZvbyAoaWQpIFZBTFVFUyAoPylgLCB2YWx1ZXM6IG5pbCwgaW5wdXQ6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YGlkYDogMX0sIG1hcHBpbmc6IERlZmF1bHRTcWxUeXBlTWFwcGluZ30sIHtxdWVyeTogYElOU0VSVCBJTlRPIGZvbyAobmFtZSkgVkFMVUVTICg/KWAsIHZhbHVlczogbmlsLCBpbnB1dDogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgbmFtZWA6IGBCb2IgSm9obnNvbmB9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCB7cXVlcnk6IGBJTlNFUlQgSU5UTyBmb28gKGFnZSkgVkFMVUVTICg/KWAsIHZhbHVlczogbmlsLCBpbnB1dDogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgYWdlYDogMjF9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCB7cXVlcnk6IGBJTlNFUlQgSU5UTyBmb28gKGVuYWJsZWQpIFZBTFVFUyAoPylgLCB2YWx1ZXM6IG5pbCwgaW5wdXQ6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YGVuYWJsZWRgOiB0cnVlfSwgbWFwcGluZzogRGVmYXVsdFNxbFR5cGVNYXBwaW5nfSwge3F1ZXJ5OiBgSU5TRVJUIElOVE8gZm9vIChlbmFibGVkKSBWQUxVRVMgKD8pYCwgdmFsdWVzOiBuaWwsIGlucHV0OiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BlbmFibGVkYDogZmFsc2V9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCB7cXVlcnk6IGBJTlNFUlQgSU5UTyBmb28gKGVuYWJsZWQpIFZBTFVFUyAoPylgLCB2YWx1ZXM6IG5pbCwgaW5wdXQ6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YGVuYWJsZWRgOiBuaWx9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCB7cXVlcnk6IGBJTlNFUlQgSU5UTyBmb28gKGFnZSwgbmFtZSkgVkFMVUVTICg/LCA/KWAsIHZhbHVlczogbmlsLCBpbnB1dDogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgbmFtZWA6IGB0ZWRgLCBgYWdlYDogN30sIG1hcHBpbmc6IERlZmF1bHRTcWxUeXBlTWFwcGluZ319Cglmb3Igc3BlYywgZXhwZWN0ZWQgOj0gcmFuZ2UgdGVzdHMgewoJCWYgOj0gZmlsdGVyLk5ldygpCgkJZ2VuIDo9IE5ld1NxbEdlbmVyYXRvcigpCgkJZ2VuLlR5cGUgPSBTcWxJbnNlcnRTdGF0ZW1lbnQKCQlnZW4uSW5wdXREYXRhID0gZXhwZWN0ZWQuaW5wdXQKCQlhY3R1YWwsIGVyciA6PSBmaWx0ZXIuUmVuZGVyKGdlbiwgYGZvb2AsIGYpCgkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCWFzc2VydC5FcXVhbChleHBlY3RlZC5xdWVyeSwgc3RyaW5nKGFjdHVhbFs6XSkpCgkJa2V5cyA6PSBtYXB1dGlsLlN0cmluZ0tleXMoZXhwZWN0ZWQuaW5wdXQpCgkJc29ydC5TdHJpbmdzKGtleXMpCgkJdnYgOj0gbWFrZShbXWludGVyZmFjZXt9LCAwKQoJCWZvciBfLCBrZXkgOj0gcmFuZ2Uga2V5cyB7CgkJCXYsIF8gOj0gZXhwZWN0ZWQuaW5wdXRba2V5XQoJCQl2diA9IGFwcGVuZCh2diwgdikKCQl9CgkJYXNzZXJ0LkVxdWFsVmFsdWVzKHZ2LCBnZW4uR2V0VmFsdWVzKCksIHNwZWMpCgl9Cn0=",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlLimitOffset",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlLimitOffset(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmIDo9IGZpbHRlci5BbGwoKQoJZi5MaW1pdCA9IDQKCWdlbiA6PSBOZXdTcWxHZW5lcmF0b3IoKQoJc3FsLCBlcnIgOj0gZmlsdGVyLlJlbmRlcihnZW4sIGBmb29gLCBmKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBTRUxFQ1QgKiBGUk9NIGZvbyBMSU1JVCA0YCwgc3RyaW5nKHNxbFs6XSkpCglmID0gZmlsdGVyLkFsbCgpCglmLkxpbWl0ID0gNAoJZi5PZmZzZXQgPSAxMgoJZ2VuID0gTmV3U3FsR2VuZXJhdG9yKCkKCXNxbCwgZXJyID0gZmlsdGVyLlJlbmRlcihnZW4sIGBmb29gLCBmKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBTRUxFQ1QgKiBGUk9NIGZvbyBMSU1JVCA0IE9GRlNFVCAxMmAsIHN0cmluZyhzcWxbOl0pKQp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlMultipleValues",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlMultipleValues(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmbiA6PSBmdW5jKHRlc3RzIG1hcFtzdHJpbmddcXYsIHdpdGhJbiBib29sKSB7CgkJZm9yIHNwZWMsIGV4cGVjdGVkIDo9IHJhbmdlIHRlc3RzIHsKCQkJZiwgZXJyIDo9IGZpbHRlci5QYXJzZShzcGVjKQoJCQlhc3NlcnQuTm9FcnJvcihlcnIpCgkJCWdlbiA6PSBOZXdTcWxHZW5lcmF0b3IoKQoJCQlnZW4uVXNlSW5TdGF0ZW1lbnQgPSB3aXRoSW4KCQkJYWN0dWFsLCBlcnIgOj0gZmlsdGVyLlJlbmRlcihnZW4sIGBmb29gLCBmKQoJCQlhc3NlcnQuTm9FcnJvcihlcnIpCgkJCWFzc2VydC5FcXVhbChleHBlY3RlZC5xdWVyeSwgc3RyaW5nKGFjdHVhbFs6XSkpCgkJCWFzc2VydC5FcXVhbChleHBlY3RlZC52YWx1ZXMsIGdlbi5HZXRWYWx1ZXMoKSkKCQl9Cgl9CglmbihtYXBbc3RyaW5nXXF2e2BpZC8xYDoge3F1ZXJ5OiBgU0VMRUNUICogRlJPTSBmb28gV0hFUkUgKGlkID0gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMSl9fSwgYGlkLzF8MmA6IHtxdWVyeTogYFNFTEVDVCAqIEZST00gZm9vIFdIRVJFIChpZCBJTig/LCA/KSlgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMSksIGludDY0KDIpfX0sIGBpZC8xfDJ8M2A6IHtxdWVyeTogYFNFTEVDVCAqIEZST00gZm9vIFdIRVJFIChpZCBJTig/LCA/LCA/KSlgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMSksIGludDY0KDIpLCBpbnQ2NCgzKX19LCBgaWQvMXwyfDMvYWdlLzdgOiB7cXVlcnk6IGBTRUxFQ1QgKiBGUk9NIGZvbyBXSEVSRSAoaWQgSU4oPywgPywgPykpIEFORCAoYWdlID0gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMSksIGludDY0KDIpLCBpbnQ2NCgzKSwgaW50NjQoNyl9fX0sIHRydWUpCglmbihtYXBbc3RyaW5nXXF2e2BpZC8xYDoge3F1ZXJ5OiBgU0VMRUNUICogRlJPTSBmb28gV0hFUkUgKGlkID0gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMSl9fSwgYGlkLzF8MmA6IHtxdWVyeTogYFNFTEVDVCAqIEZST00gZm9vIFdIRVJFIChpZCA9ID8gT1IgaWQgPSA/KWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXtpbnQ2NCgxKSwgaW50NjQoMil9fSwgYGlkLzF8MnwzYDoge3F1ZXJ5OiBgU0VMRUNUICogRlJPTSBmb28gV0hFUkUgKGlkID0gPyBPUiBpZCA9ID8gT1IgaWQgPSA/KWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXtpbnQ2NCgxKSwgaW50NjQoMiksIGludDY0KDMpfX0sIGBpZC8xfDJ8My9hZ2UvN2A6IHtxdWVyeTogYFNFTEVDVCAqIEZST00gZm9vIFdIRVJFIChpZCA9ID8gT1IgaWQgPSA/IE9SIGlkID0gPykgQU5EIChhZ2UgPSA/KWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXtpbnQ2NCgxKSwgaW50NjQoMiksIGludDY0KDMpLCBpbnQ2NCg3KX19fSwgZmFsc2UpCn0=",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlMultipleValuesWithNormalizer",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlMultipleValuesWithNormalizer(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmbiA6PSBmdW5jKHRlc3RzIG1hcFtzdHJpbmddcXYsIHdpdGhJbiBib29sKSB7CgkJZm9yIHNwZWMsIGV4cGVjdGVkIDo9IHJhbmdlIHRlc3RzIHsKCQkJZiwgZXJyIDo9IGZpbHRlci5QYXJzZShzcGVjKQoJCQlhc3NlcnQuTm9FcnJvcihlcnIpCgkJCWdlbiA6PSBOZXdTcWxHZW5lcmF0b3IoKQoJCQlnZW4uVXNlSW5TdGF0ZW1lbnQgPSB3aXRoSW4KCQkJZ2VuLk5vcm1hbGl6ZUZpZWxkcyA9IFtdc3RyaW5ne2BpZGB9CgkJCWdlbi5Ob3JtYWxpemVyRm9ybWF0ID0gYExPV0VSKCV2KWAKCQkJYWN0dWFsLCBlcnIgOj0gZmlsdGVyLlJlbmRlcihnZW4sIGBmb29gLCBmKQoJCQlhc3NlcnQuTm9FcnJvcihlcnIpCgkJCWFzc2VydC5FcXVhbChleHBlY3RlZC5xdWVyeSwgc3RyaW5nKGFjdHVhbFs6XSkpCgkJCWFzc2VydC5FcXVhbChleHBlY3RlZC52YWx1ZXMsIGdlbi5HZXRWYWx1ZXMoKSkKCQl9Cgl9CglmbihtYXBbc3RyaW5nXXF2e2BpZC8xYDoge3F1ZXJ5OiBgU0VMRUNUICogRlJPTSBmb28gV0hFUkUgKGlkID0gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMSl9fSwgYGlkLzF8MmA6IHtxdWVyeTogYFNFTEVDVCAqIEZST00gZm9vIFdIRVJFIChpZCBJTig/LCA/KSlgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMSksIGludDY0KDIpfX0sIGBpZC8xfDJ8M2A6IHtxdWVyeTogYFNFTEVDVCAqIEZST00gZm9vIFdIRVJFIChpZCBJTig/LCA/LCA/KSlgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMSksIGludDY0KDIpLCBpbnQ2NCgzKX19LCBgaWQvMXwyfDMvYWdlLzdgOiB7cXVlcnk6IGBTRUxFQ1QgKiBGUk9NIGZvbyBXSEVSRSAoaWQgSU4oPywgPywgPykpIEFORCAoYWdlID0gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMSksIGludDY0KDIpLCBpbnQ2NCgzKSwgaW50NjQoNyl9fX0sIHRydWUpCn0=",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlPlaceholderStyles",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlPlaceholderStyles(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmLCBlcnIgOj0gZmlsdGVyLlBhcnNlKGBhZ2UvNy9uYW1lL3RlZC9lbmFibGVkL3RydWVgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJZ2VuIDo9IE5ld1NxbEdlbmVyYXRvcigpCglhY3R1YWwsIGVyciA6PSBmaWx0ZXIuUmVuZGVyKGdlbiwgYGZvb2AsIGYpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYFNFTEVDVCAqIEZST00gZm9vIFdIRVJFIChhZ2UgPSA/KSBBTkQgKG5hbWUgPSA/KSBBTkQgKGVuYWJsZWQgPSA/KWAsIHN0cmluZyhhY3R1YWxbOl0pKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317aW50NjQoNyksIGB0ZWRgLCB0cnVlfSwgZ2VuLkdldFZhbHVlcygpKQoJZ2VuID0gTmV3U3FsR2VuZXJhdG9yKCkKCWdlbi5UeXBlTWFwcGluZyA9IFBvc3RncmVzVHlwZU1hcHBpbmcKCWFjdHVhbCwgZXJyID0gZmlsdGVyLlJlbmRlcihnZW4sIGBmb29gLCBmKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBTRUxFQ1QgKiBGUk9NICJmb28iIFdIRVJFICgiYWdlIiA9ICQxKSBBTkQgKCJuYW1lIiA9ICQyKSBBTkQgKCJlbmFibGVkIiA9ICQzKWAsIHN0cmluZyhhY3R1YWxbOl0pKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317aW50NjQoNyksIGB0ZWRgLCB0cnVlfSwgZ2VuLkdldFZhbHVlcygpKQoJcGdnZW4gOj0gTmV3U3FsR2VuZXJhdG9yKCkKCXBnZ2VuLlR5cGVNYXBwaW5nID0gUG9zdGdyZXNUeXBlTWFwcGluZwoJcGdnZW4uVHlwZSA9IFNxbFVwZGF0ZVN0YXRlbWVudAoJcGdnZW4uSW5wdXREYXRhID0gbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgY3JlYXRlZF9hdGA6IHRpbWUuRGF0ZSgyMDA2LCAxLCAyLCAwLCAwLCAwLCAwLCB0aW1lLlVUQyksIGBuYW1lYDogYFRlc3RlcmB9CglwZ2ZpbHRlciA6PSBmaWx0ZXIuTXVzdFBhcnNlKGBpZC8xMjNgKQoJYWN0dWFsLCBlcnIgPSBmaWx0ZXIuUmVuZGVyKHBnZ2VuLCBgZm9vYCwgcGdmaWx0ZXIpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYFVQREFURSAiZm9vIiBTRVQgImNyZWF0ZWRfYXQiID0gJDEsICJuYW1lIiA9ICQyIFdIRVJFICgiaWQiID0gJDMpYCwgc3RyaW5nKGFjdHVhbFs6XSkpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXt0aW1lLkRhdGUoMjAwNiwgMSwgMiwgMCwgMCwgMCwgMCwgdGltZS5VVEMpLCBgVGVzdGVyYCwgaW50NjQoMTIzKX0sIHBnZ2VuLkdldFZhbHVlcygpKQoJZ2VuID0gTmV3U3FsR2VuZXJhdG9yKCkKCWdlbi5UeXBlTWFwcGluZy5QbGFjZWhvbGRlckZvcm1hdCA9IGA6JXNgCglnZW4uVHlwZU1hcHBpbmcuUGxhY2Vob2xkZXJBcmd1bWVudCA9IGBmaWVsZGAKCWFjdHVhbCwgZXJyID0gZmlsdGVyLlJlbmRlcihnZW4sIGBmb29gLCBmKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBTRUxFQ1QgKiBGUk9NIGZvbyBXSEVSRSAoYWdlID0gOmFnZSkgQU5EIChuYW1lID0gOm5hbWUpIEFORCAoZW5hYmxlZCA9IDplbmFibGVkKWAsIHN0cmluZyhhY3R1YWxbOl0pKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317aW50NjQoNyksIGB0ZWRgLCB0cnVlfSwgZ2VuLkdldFZhbHVlcygpKQoJZ2VuID0gTmV3U3FsR2VuZXJhdG9yKCkKCWdlbi5UeXBlTWFwcGluZy5QbGFjZWhvbGRlckZvcm1hdCA9IGA8YXJnJWQ+YAoJZ2VuLlR5cGVNYXBwaW5nLlBsYWNlaG9sZGVyQXJndW1lbnQgPSBgaW5kZXhgCglhY3R1YWwsIGVyciA9IGZpbHRlci5SZW5kZXIoZ2VuLCBgZm9vYCwgZikKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgU0VMRUNUICogRlJPTSBmb28gV0hFUkUgKGFnZSA9IDxhcmcwPikgQU5EIChuYW1lID0gPGFyZzE+KSBBTkQgKGVuYWJsZWQgPSA8YXJnMj4pYCwgc3RyaW5nKGFjdHVhbFs6XSkpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXtpbnQ2NCg3KSwgYHRlZGAsIHRydWV9LCBnZW4uR2V0VmFsdWVzKCkpCn0=",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlSelectAggregateFunctions",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlSelectAggregateFunctions(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmLCBlcnIgOj0gZmlsdGVyLlBhcnNlKGArbmFtZS9wcmVmaXg6dGVkL2NpdHkvc3VmZml4OmJlcmcvc3RhdGUvY29udGFpbnM6bmV3YCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWYuTGltaXQgPSA0CglmLk9mZnNldCA9IDEyCglmLkZpZWxkcyA9IFtdc3RyaW5ne2BhZ2VgfQoJZ2VuIDo9IE5ld1NxbEdlbmVyYXRvcigpCglnZW4uRmllbGRXcmFwcGVycyA9IG1hcFtzdHJpbmddc3RyaW5ne2BhZ2VgOiAiU1VNKCVzKSJ9CglzcWwsIGVyciA6PSBmaWx0ZXIuUmVuZGVyKGdlbiwgYGZvb2AsIGYpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYFNFTEVDVCBTVU0oYWdlKSBGUk9NIGZvbyBgK2BXSEVSRSAobmFtZSBMSUtFID8pIGArYEFORCAoY2l0eSBMSUtFID8pIGArYEFORCAoc3RhdGUgTElLRSA/KSBgK2BPUkRFUiBCWSBuYW1lIEFTQyBgK2BMSU1JVCA0IE9GRlNFVCAxMmAsIHN0cmluZyhzcWxbOl0pKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317YHRlZCUlYCwgYCUlYmVyZ2AsIGAlJW5ldyUlYH0sIGdlbi5HZXRWYWx1ZXMoKSkKfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlSelectFull",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlSelectFull(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmLCBlcnIgOj0gZmlsdGVyLlBhcnNlKGArbmFtZS9wcmVmaXg6dGVkLy1hZ2UvZ3Q6Ny9jaXR5L3N1ZmZpeDpiZXJnL3N0YXRlL2NvbnRhaW5zOm5ld2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglmLkxpbWl0ID0gNAoJZi5PZmZzZXQgPSAxMgoJZi5GaWVsZHMgPSBbXXN0cmluZ3tgaWRgLCBgYWdlYH0KCWdlbiA6PSBOZXdTcWxHZW5lcmF0b3IoKQoJc3FsLCBlcnIgOj0gZmlsdGVyLlJlbmRlcihnZW4sIGBmb29gLCBmKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBTRUxFQ1QgaWQsIGFnZSBGUk9NIGZvbyBgK2BXSEVSRSAobmFtZSBMSUtFID8pIGArYEFORCAoYWdlID4gPykgYCtgQU5EIChjaXR5IExJS0UgPykgYCtgQU5EIChzdGF0ZSBMSUtFID8pIGArYE9SREVSIEJZIG5hbWUgQVNDLCBhZ2UgREVTQyBgK2BMSU1JVCA0IE9GRlNFVCAxMmAsIHN0cmluZyhzcWxbOl0pKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317YHRlZCUlYCwgaW50NjQoNyksIGAlJWJlcmdgLCBgJSVuZXclJWB9LCBnZW4uR2V0VmFsdWVzKCkpCn0=",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlSelectGroupBy",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlSelectGroupBy(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmLCBlcnIgOj0gZmlsdGVyLlBhcnNlKGBhbGxgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJZi5GaWVsZHMgPSBbXXN0cmluZ3tgc3RhdGVgLCBgY2l0eWB9CglnZW4gOj0gTmV3U3FsR2VuZXJhdG9yKCkKCWdlbi5Hcm91cEJ5RmllbGQoYHN0YXRlYCkKCWdlbi5Hcm91cEJ5RmllbGQoYGNpdHlgKQoJZ2VuLkFnZ3JlZ2F0ZUJ5RmllbGQoZmlsdGVyLkF2ZXJhZ2UsIGBhZ2VgKQoJc3FsLCBlcnIgOj0gZmlsdGVyLlJlbmRlcihnZW4sIGBmb29gLCBmKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBTRUxFQ1Qgc3RhdGUsIGNpdHksIEFWRyhhZ2UpIEFTIGFnZSBGUk9NIGZvbyBHUk9VUCBCWSBzdGF0ZSwgY2l0eWAsIHN0cmluZyhzcWxbOl0pKQp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlSelectWithNormalizerAndPlaceholders",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlSelectWithNormalizerAndPlaceholders(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmLCBlcnIgOj0gZmlsdGVyLlBhcnNlKGArbmFtZS9wcmVmaXg6dGVkLy1hZ2UvZ3Q6Ny9jaXR5L3N1ZmZpeDpiZXJnL3N0YXRlL2NvbnRhaW5zOm5ld2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglmLkxpbWl0ID0gNAoJZi5PZmZzZXQgPSAxMgoJZi5GaWVsZHMgPSBbXXN0cmluZ3tgaWRgLCBgYWdlYH0KCWdlbiA6PSBOZXdTcWxHZW5lcmF0b3IoKQoJZ2VuLk5vcm1hbGl6ZUZpZWxkcyA9IFtdc3RyaW5ne2BuYW1lYCwgYGNpdHlgfQoJZ2VuLk5vcm1hbGl6ZXJGb3JtYXQgPSBgTE9XRVIoJXMpYAoJc3FsLCBlcnIgOj0gZmlsdGVyLlJlbmRlcihnZW4sIGBmb29gLCBmKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBTRUxFQ1QgaWQsIGFnZSBGUk9NIGZvbyBgK2BXSEVSRSAoTE9XRVIobmFtZSkgTElLRSBMT1dFUig/KSkgYCtgQU5EIChhZ2UgPiA/KSBgK2BBTkQgKExPV0VSKGNpdHkpIExJS0UgTE9XRVIoPykpIGArYEFORCAoc3RhdGUgTElLRSA/KSBgK2BPUkRFUiBCWSBuYW1lIEFTQywgYWdlIERFU0MgYCtgTElNSVQgNCBPRkZTRVQgMTJgLCBzdHJpbmcoc3FsWzpdKSkKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2B0ZWQlJWAsIGludDY0KDcpLCBgJSViZXJnYCwgYCUlbmV3JSVgfSwgZ2VuLkdldFZhbHVlcygpKQp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlSelects",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlSelects(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmaWVsZHNldHMgOj0gW11zdHJpbmd7YCpgLCBgaWRgLCBgaWQsbmFtZWB9Cglmb3IgXywgZmllbGQgOj0gcmFuZ2UgZmllbGRzZXRzIHsKCQl0ZXN0cyA6PSBtYXBbc3RyaW5nXXF2e2BhbGxgOiB7cXVlcnk6IGBTRUxFQ1QgYCArIGZpZWxkICsgYCBGUk9NIGZvb2AsIHZhbHVlczogW11pbnRlcmZhY2V7fXt9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCBgaWQvMWA6IHtxdWVyeTogYFNFTEVDVCBgICsgZmllbGQgKyBgIEZST00gZm9vIFdIRVJFIChpZCA9ID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2ludDY0KDEpfSwgbWFwcGluZzogRGVmYXVsdFNxbFR5cGVNYXBwaW5nfSwgYGlkL25vdDoxYDoge3F1ZXJ5OiBgU0VMRUNUIGAgKyBmaWVsZCArIGAgRlJPTSBmb28gV0hFUkUgKGlkIDw+ID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2ludDY0KDEpfSwgbWFwcGluZzogRGVmYXVsdFNxbFR5cGVNYXBwaW5nfSwgYG5hbWUvQm9iIEpvaG5zb25gOiB7cXVlcnk6IGBTRUxFQ1QgYCArIGZpZWxkICsgYCBGUk9NIGZvbyBXSEVSRSAobmFtZSA9ID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2BCb2IgSm9obnNvbmB9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCBgYWdlLzIxYDoge3F1ZXJ5OiBgU0VMRUNUIGAgKyBmaWVsZCArIGAgRlJPTSBmb28gV0hFUkUgKGFnZSA9ID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2ludDY0KDIxKX0sIG1hcHBpbmc6IERlZmF1bHRTcWxUeXBlTWFwcGluZ30sIGBlbmFibGVkL3RydWVgOiB7cXVlcnk6IGBTRUxFQ1QgYCArIGZpZWxkICsgYCBGUk9NIGZvbyBXSEVSRSAoZW5hYmxlZCA9ID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e3RydWV9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCBgZW5hYmxlZC9mYWxzZWA6IHtxdWVyeTogYFNFTEVDVCBgICsgZmllbGQgKyBgIEZST00gZm9vIFdIRVJFIChlbmFibGVkID0gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317ZmFsc2V9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCBgZW5hYmxlZC9udWxsYDoge3F1ZXJ5OiBgU0VMRUNUIGAgKyBmaWVsZCArIGAgRlJPTSBmb28gV0hFUkUgKGVuYWJsZWQgSVMgTlVMTClgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317fSwgbWFwcGluZzogRGVmYXVsdFNxbFR5cGVNYXBwaW5nfSwgYGVuYWJsZWQvbm90Om51bGxgOiB7cXVlcnk6IGBTRUxFQ1QgYCArIGZpZWxkICsgYCBGUk9NIGZvbyBXSEVSRSAoZW5hYmxlZCBJUyBOT1QgTlVMTClgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317fSwgbWFwcGluZzogRGVmYXVsdFNxbFR5cGVNYXBwaW5nfSwgYGFnZS9sdDoyMWA6IHtxdWVyeTogYFNFTEVDVCBgICsgZmllbGQgKyBgIEZST00gZm9vIFdIRVJFIChhZ2UgPCA/KWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXtpbnQ2NCgyMSl9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCBgYWdlL2x0ZToyMWA6IHtxdWVyeTogYFNFTEVDVCBgICsgZmllbGQgKyBgIEZST00gZm9vIFdIRVJFIChhZ2UgPD0gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMjEpfSwgbWFwcGluZzogRGVmYXVsdFNxbFR5cGVNYXBwaW5nfSwgYGFnZS9ndDoyMWA6IHtxdWVyeTogYFNFTEVDVCBgICsgZmllbGQgKyBgIEZST00gZm9vIFdIRVJFIChhZ2UgPiA/KWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXtpbnQ2NCgyMSl9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCBgYWdlL2d0ZToyMWA6IHtxdWVyeTogYFNFTEVDVCBgICsgZmllbGQgKyBgIEZST00gZm9vIFdIRVJFIChhZ2UgPj0gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoMjEpfSwgbWFwcGluZzogRGVmYXVsdFNxbFR5cGVNYXBwaW5nfSwgYGZhY3Rvci9sdDozLjE0MTU5N2A6IHtxdWVyeTogYFNFTEVDVCBgICsgZmllbGQgKyBgIEZST00gZm9vIFdIRVJFIChmYWN0b3IgPCA/KWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXtmbG9hdDY0KDMuMTQxNTk3KX0sIG1hcHBpbmc6IERlZmF1bHRTcWxUeXBlTWFwcGluZ30sIGBmYWN0b3IvbHRlOjMuMTQxNTk3YDoge3F1ZXJ5OiBgU0VMRUNUIGAgKyBmaWVsZCArIGAgRlJPTSBmb28gV0hFUkUgKGZhY3RvciA8PSA/KWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXtmbG9hdDY0KDMuMTQxNTk3KX0sIG1hcHBpbmc6IERlZmF1bHRTcWxUeXBlTWFwcGluZ30sIGBmYWN0b3IvZ3Q6My4xNDE1OTdgOiB7cXVlcnk6IGBTRUxFQ1QgYCArIGZpZWxkICsgYCBGUk9NIGZvbyBXSEVSRSAoZmFjdG9yID4gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317ZmxvYXQ2NCgzLjE0MTU5Nyl9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCBgZmFjdG9yL2d0ZTozLjE0MTU5N2A6IHtxdWVyeTogYFNFTEVDVCBgICsgZmllbGQgKyBgIEZST00gZm9vIFdIRVJFIChmYWN0b3IgPj0gPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317ZmxvYXQ2NCgzLjE0MTU5Nyl9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCBgbmFtZS9jb250YWluczpvYmA6IHtxdWVyeTogYFNFTEVDVCBgICsgZmllbGQgKyBgIEZST00gZm9vIFdIRVJFIChuYW1lIExJS0UgPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317YCUlb2IlJWB9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCBgbmFtZS9wcmVmaXg6b2JgOiB7cXVlcnk6IGBTRUxFQ1QgYCArIGZpZWxkICsgYCBGUk9NIGZvbyBXSEVSRSAobmFtZSBMSUtFID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2BvYiUlYH0sIG1hcHBpbmc6IERlZmF1bHRTcWxUeXBlTWFwcGluZ30sIGBuYW1lL3N1ZmZpeDpvYmA6IHtxdWVyeTogYFNFTEVDVCBgICsgZmllbGQgKyBgIEZST00gZm9vIFdIRVJFIChuYW1lIExJS0UgPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317YCUlb2JgfSwgbWFwcGluZzogRGVmYXVsdFNxbFR5cGVNYXBwaW5nfSwgYGFnZS83L25hbWUvdGVkYDoge3F1ZXJ5OiBgU0VMRUNUIGAgKyBmaWVsZCArIGAgRlJPTSBmb28gV0hFUkUgKGFnZSA9ID8pIEFORCAobmFtZSA9ID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e2ludDY0KDcpLCBgdGVkYH0sIG1hcHBpbmc6IERlZmF1bHRTcWxUeXBlTWFwcGluZ30sIGBmYWN0b3IvcmFuZ2U6NDJ8NTVgOiB7cXVlcnk6IGBTRUxFQ1QgYCArIGZpZWxkICsgYCBGUk9NIGZvbyBXSEVSRSAoZmFjdG9yIEJFVFdFRU4gPyBBTkQgPylgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317aW50NjQoNDIpLCBpbnQ2NCg1NSl9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCBgZmFjdG9yL3JhbmdlOjIwMDYtMDEtMDJUMDA6MDA6MDBafDIwMDYtMDEtMTNUMDA6MDA6MDBaYDoge3F1ZXJ5OiBgU0VMRUNUIGAgKyBmaWVsZCArIGAgRlJPTSBmb28gV0hFUkUgKGZhY3RvciBCRVRXRUVOID8gQU5EID8pYCwgdmFsdWVzOiBbXWludGVyZmFjZXt9e3RpbWUuRGF0ZSgyMDA2LCAxLCAyLCAwLCAwLCAwLCAwLCB0aW1lLlVUQyksIHRpbWUuRGF0ZSgyMDA2LCAxLCAxMywgMCwgMCwgMCwgMCwgdGltZS5VVEMpfSwgbWFwcGluZzogRGVmYXVsdFNxbFR5cGVNYXBwaW5nfSwgYG5hbWUvYm9ifGFsaWNlfG1hcnlgOiB7cXVlcnk6IGBTRUxFQ1QgYCArIGZpZWxkICsgYCBGUk9NIGZvbyBXSEVSRSAobmFtZSBJTig/LCA/LCA/KSlgLCB2YWx1ZXM6IFtdaW50ZXJmYWNle317YGJvYmAsIGBhbGljZWAsIGBtYXJ5YH0sIG1hcHBpbmc6IERlZmF1bHRTcWxUeXBlTWFwcGluZ30sIGBuYW1lL251bGx8YWxpY2V8bWFyeWA6IHtxdWVyeTogYFNFTEVDVCBgICsgZmllbGQgKyBgIEZST00gZm9vIFdIRVJFIChuYW1lIElOKE5VTEwsID8sID8pKWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXtgYWxpY2VgLCBgbWFyeWB9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9LCBgbmFtZS9ub3Q6bnVsbHxhbGljZXxtYXJ5YDoge3F1ZXJ5OiBgU0VMRUNUIGAgKyBmaWVsZCArIGAgRlJPTSBmb28gV0hFUkUgKG5hbWUgTk9UIElOKE5VTEwsID8sID8pKWAsIHZhbHVlczogW11pbnRlcmZhY2V7fXtgYWxpY2VgLCBgbWFyeWB9LCBtYXBwaW5nOiBEZWZhdWx0U3FsVHlwZU1hcHBpbmd9fQoJCWZvciBzcGVjLCBleHBlY3RlZCA6PSByYW5nZSB0ZXN0cyB7CgkJCWYsIGVyciA6PSBmaWx0ZXIuUGFyc2Uoc3BlYykKCQkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCQlpZiBmaWVsZCAhPSBgKmAgewoJCQkJZi5GaWVsZHMgPSBzdHJpbmdzLlNwbGl0KGZpZWxkLCBgLCBgKQoJCQl9CgkJCWdlbiA6PSBOZXdTcWxHZW5lcmF0b3IoKQoJCQlnZW4uVHlwZU1hcHBpbmcgPSBleHBlY3RlZC5tYXBwaW5nCgkJCWFjdHVhbCwgZXJyIDo9IGZpbHRlci5SZW5kZXIoZ2VuLCBgZm9vYCwgZikKCQkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCQlhc3NlcnQuRXF1YWwoZXhwZWN0ZWQucXVlcnksIHN0cmluZyhhY3R1YWxbOl0pLCBzcGVjKQoJCQlhc3NlcnQuRXF1YWxWYWx1ZXMoZXhwZWN0ZWQudmFsdWVzLCBnZW4uR2V0VmFsdWVzKCksIHNwZWMpCgkJfQoJfQp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlSorting",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlSorting(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmIDo9IGZpbHRlci5BbGwoKQoJZi5Tb3J0ID0gW11zdHJpbmd7YCtuYW1lYCwgYC1hZ2VgfQoJZ2VuIDo9IE5ld1NxbEdlbmVyYXRvcigpCglzcWwsIGVyciA6PSBmaWx0ZXIuUmVuZGVyKGdlbiwgYGZvb2AsIGYpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYFNFTEVDVCAqIEZST00gZm9vIE9SREVSIEJZIG5hbWUgQVNDLCBhZ2UgREVTQ2AsIHN0cmluZyhzcWxbOl0pKQp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlSplitTypeLength",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlSplitTypeLength(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglnZW4gOj0gTmV3U3FsR2VuZXJhdG9yKCkKCXR5cGVOYW1lLCBsZW5ndGgsIHByZWNpc2lvbiA6PSBnZW4uU3BsaXRUeXBlTGVuZ3RoKGBpbnRlZ2VyYCkKCWFzc2VydC5FcXVhbChgSU5URUdFUmAsIHR5cGVOYW1lKQoJYXNzZXJ0LkVxdWFsKDAsIGxlbmd0aCkKCWFzc2VydC5FcXVhbCgwLCBwcmVjaXNpb24pCgl0eXBlTmFtZSwgbGVuZ3RoLCBwcmVjaXNpb24gPSBnZW4uU3BsaXRUeXBlTGVuZ3RoKGBpbnRlZ2VyKDEpYCkKCWFzc2VydC5FcXVhbChgSU5URUdFUmAsIHR5cGVOYW1lKQoJYXNzZXJ0LkVxdWFsKDEsIGxlbmd0aCkKCWFzc2VydC5FcXVhbCgwLCBwcmVjaXNpb24pCgl0eXBlTmFtZSwgbGVuZ3RoLCBwcmVjaXNpb24gPSBnZW4uU3BsaXRUeXBlTGVuZ3RoKGBmbG9hdCgyNTUsMTIpYCkKCWFzc2VydC5FcXVhbChgRkxPQVRgLCB0eXBlTmFtZSkKCWFzc2VydC5FcXVhbCgyNTUsIGxlbmd0aCkKCWFzc2VydC5FcXVhbCgxMiwgcHJlY2lzaW9uKQoJdHlwZU5hbWUsIGxlbmd0aCwgcHJlY2lzaW9uID0gZ2VuLlNwbGl0VHlwZUxlbmd0aChgSU5URUdFUmApCglhc3NlcnQuRXF1YWwoYElOVEVHRVJgLCB0eXBlTmFtZSkKCWFzc2VydC5FcXVhbCgwLCBsZW5ndGgpCglhc3NlcnQuRXF1YWwoMCwgcHJlY2lzaW9uKQoJdHlwZU5hbWUsIGxlbmd0aCwgcHJlY2lzaW9uID0gZ2VuLlNwbGl0VHlwZUxlbmd0aChgSU5URUdFUigxKWApCglhc3NlcnQuRXF1YWwoYElOVEVHRVJgLCB0eXBlTmFtZSkKCWFzc2VydC5FcXVhbCgxLCBsZW5ndGgpCglhc3NlcnQuRXF1YWwoMCwgcHJlY2lzaW9uKQoJdHlwZU5hbWUsIGxlbmd0aCwgcHJlY2lzaW9uID0gZ2VuLlNwbGl0VHlwZUxlbmd0aChgRkxPQVQoMjU1LDEyKWApCglhc3NlcnQuRXF1YWwoYEZMT0FUYCwgdHlwZU5hbWUpCglhc3NlcnQuRXF1YWwoMjU1LCBsZW5ndGgpCglhc3NlcnQuRXF1YWwoMTIsIHByZWNpc2lvbikKfQ==",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlToNativeType",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlToNativeType(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl0eXBlIHRlc3RzIHN0cnVjdCB7CgkJTWFwcGluZyAgU3FsVHlwZU1hcHBpbmcKCQlUeXBlICAgICBkYWwuVHlwZQoJCVN1YnR5cGVzIFtdZGFsLlR5cGUKCQlMZW5ndGggICBpbnQKCQlFeHBlY3RlZCBzdHJpbmcKCX0KCWZvciBpLCB0Y2FzZSA6PSByYW5nZSBbXXRlc3Rze3tTcWxpdGVUeXBlTWFwcGluZywgZGFsLlN0cmluZ1R5cGUsIG5pbCwgMCwgYFRFWFRgfSwge1NxbGl0ZVR5cGVNYXBwaW5nLCBkYWwuU3RyaW5nVHlwZSwgbmlsLCA0MiwgYFRFWFQoNDIpYH0sIHtTcWxpdGVUeXBlTWFwcGluZywgZGFsLkludFR5cGUsIG5pbCwgMCwgYElOVEVHRVJgfSwge1NxbGl0ZVR5cGVNYXBwaW5nLCBkYWwuSW50VHlwZSwgbmlsLCAxNCwgYElOVEVHRVIoMTQpYH0sIHtTcWxpdGVUeXBlTWFwcGluZywgZGFsLkZsb2F0VHlwZSwgbmlsLCAwLCBgUkVBTGB9LCB7U3FsaXRlVHlwZU1hcHBpbmcsIGRhbC5GbG9hdFR5cGUsIG5pbCwgNSwgYFJFQUwoNSlgfSwge1NxbGl0ZVR5cGVNYXBwaW5nLCBkYWwuQm9vbGVhblR5cGUsIG5pbCwgMCwgYElOVEVHRVIoMSlgfSwge1NxbGl0ZVR5cGVNYXBwaW5nLCBkYWwuQm9vbGVhblR5cGUsIG5pbCwgNCwgYElOVEVHRVIoMSlgfSwge1NxbGl0ZVR5cGVNYXBwaW5nLCBkYWwuVGltZVR5cGUsIG5pbCwgMCwgYElOVEVHRVJgfSwge1NxbGl0ZVR5cGVNYXBwaW5nLCBkYWwuT2JqZWN0VHlwZSwgW11kYWwuVHlwZXtkYWwuU3RyaW5nVHlwZSwgZGFsLkF1dG9UeXBlfSwgMCwgYEJMT0JgfSwge1NxbGl0ZVR5cGVNYXBwaW5nLCBkYWwuT2JqZWN0VHlwZSwgW11kYWwuVHlwZXtkYWwuU3RyaW5nVHlwZSwgZGFsLkF1dG9UeXBlfSwgMTIzNDU2LCBgQkxPQigxMjM0NTYpYH0sIHtTcWxpdGVUeXBlTWFwcGluZywgZGFsLkFycmF5VHlwZSwgW11kYWwuVHlwZXtkYWwuSW50VHlwZX0sIDAsIGBCTE9CYH0sIHtTcWxpdGVUeXBlTWFwcGluZywgZGFsLkFycmF5VHlwZSwgW11kYWwuVHlwZXtkYWwuSW50VHlwZX0sIDQzMjEsIGBCTE9CKDQzMjEpYH0sIHtTcWxpdGVUeXBlTWFwcGluZywgZGFsLlJhd1R5cGUsIG5pbCwgMCwgYEJMT0JgfSwge1NxbGl0ZVR5cGVNYXBwaW5nLCBkYWwuUmF3VHlwZSwgbmlsLCAyNTYsIGBCTE9CKDI1NilgfSwge015c3FsVHlwZU1hcHBpbmcsIGRhbC5TdHJpbmdUeXBlLCBuaWwsIDAsIGBWQVJDSEFSKDI1NSlgfSwge015c3FsVHlwZU1hcHBpbmcsIGRhbC5TdHJpbmdUeXBlLCBuaWwsIDQyLCBgVkFSQ0hBUig0MilgfSwge015c3FsVHlwZU1hcHBpbmcsIGRhbC5JbnRUeXBlLCBuaWwsIDAsIGBCSUdJTlRgfSwge015c3FsVHlwZU1hcHBpbmcsIGRhbC5JbnRUeXBlLCBuaWwsIDE0LCBgQklHSU5UKDE0KWB9LCB7TXlzcWxUeXBlTWFwcGluZywgZGFsLkZsb2F0VHlwZSwgbmlsLCAwLCBgREVDSU1BTCgxMCw4KWB9LCB7TXlzcWxUeXBlTWFwcGluZywgZGFsLkZsb2F0VHlwZSwgbmlsLCA1LCBgREVDSU1BTCg1LDgpYH0sIHtNeXNxbFR5cGVNYXBwaW5nLCBkYWwuQm9vbGVhblR5cGUsIG5pbCwgMCwgYEJPT0xgfSwge015c3FsVHlwZU1hcHBpbmcsIGRhbC5UaW1lVHlwZSwgbmlsLCAwLCBgREFURVRJTUVgfSwge015c3FsVHlwZU1hcHBpbmcsIGRhbC5PYmplY3RUeXBlLCBbXWRhbC5UeXBle2RhbC5TdHJpbmdUeXBlLCBkYWwuQXV0b1R5cGV9LCAwLCBgTUVESVVNQkxPQmB9LCB7TXlzcWxUeXBlTWFwcGluZywgZGFsLk9iamVjdFR5cGUsIFtdZGFsLlR5cGV7ZGFsLlN0cmluZ1R5cGUsIGRhbC5BdXRvVHlwZX0sIDEyMzQ1NiwgYE1FRElVTUJMT0IoMTIzNDU2KWB9LCB7TXlzcWxUeXBlTWFwcGluZywgZGFsLkFycmF5VHlwZSwgW11kYWwuVHlwZXtkYWwuSW50VHlwZX0sIDAsIGBNRURJVU1CTE9CYH0sIHtNeXNxbFR5cGVNYXBwaW5nLCBkYWwuQXJyYXlUeXBlLCBbXWRhbC5UeXBle2RhbC5JbnRUeXBlfSwgNDMyMSwgYE1FRElVTUJMT0IoNDMyMSlgfSwge015c3FsVHlwZU1hcHBpbmcsIGRhbC5SYXdUeXBlLCBuaWwsIDAsIGBNRURJVU1CTE9CYH0sIHtNeXNxbFR5cGVNYXBwaW5nLCBkYWwuUmF3VHlwZSwgbmlsLCAyNTYsIGBNRURJVU1CTE9CKDI1NilgfSwge1Bvc3RncmVzVHlwZU1hcHBpbmcsIGRhbC5TdHJpbmdUeXBlLCBuaWwsIDAsIGBURVhUYH0sIHtQb3N0Z3Jlc1R5cGVNYXBwaW5nLCBkYWwuU3RyaW5nVHlwZSwgbmlsLCA0MiwgYFRFWFQoNDIpYH0sIHtQb3N0Z3Jlc1R5cGVNYXBwaW5nLCBkYWwuSW50VHlwZSwgbmlsLCAwLCBgQklHSU5UYH0sIHtQb3N0Z3Jlc1R5cGVNYXBwaW5nLCBkYWwuSW50VHlwZSwgbmlsLCAxNCwgYEJJR0lOVCgxNClgfSwge1Bvc3RncmVzVHlwZU1hcHBpbmcsIGRhbC5GbG9hdFR5cGUsIG5pbCwgMCwgYE5VTUVSSUNgfSwge1Bvc3RncmVzVHlwZU1hcHBpbmcsIGRhbC5GbG9hdFR5cGUsIG5pbCwgNSwgYE5VTUVSSUMoNSlgfSwge1Bvc3RncmVzVHlwZU1hcHBpbmcsIGRhbC5Cb29sZWFuVHlwZSwgbmlsLCAwLCBgQk9PTEVBTmB9LCB7UG9zdGdyZXNUeXBlTWFwcGluZywgZGFsLlRpbWVUeXBlLCBuaWwsIDAsIGBUSU1FU1RBTVBgfSwge1Bvc3RncmVzVHlwZU1hcHBpbmcsIGRhbC5PYmplY3RUeXBlLCBbXWRhbC5UeXBle2RhbC5TdHJpbmdUeXBlLCBkYWwuQXV0b1R5cGV9LCAwLCBgVkFSQ0hBUmB9LCB7UG9zdGdyZXNUeXBlTWFwcGluZywgZGFsLk9iamVjdFR5cGUsIFtdZGFsLlR5cGV7ZGFsLlN0cmluZ1R5cGUsIGRhbC5BdXRvVHlwZX0sIDEyMzQ1NiwgYFZBUkNIQVIoMTIzNDU2KWB9LCB7UG9zdGdyZXNUeXBlTWFwcGluZywgZGFsLkFycmF5VHlwZSwgW11kYWwuVHlwZXtkYWwuSW50VHlwZX0sIDAsIGBWQVJDSEFSYH0sIHtQb3N0Z3Jlc1R5cGVNYXBwaW5nLCBkYWwuQXJyYXlUeXBlLCBbXWRhbC5UeXBle2RhbC5JbnRUeXBlfSwgNDMyMSwgYFZBUkNIQVIoNDMyMSlgfSwge1Bvc3RncmVzVHlwZU1hcHBpbmcsIGRhbC5SYXdUeXBlLCBuaWwsIDAsIGBCWVRFQWB9LCB7UG9zdGdyZXNUeXBlTWFwcGluZywgZGFsLlJhd1R5cGUsIG5pbCwgMjU2LCBgQllURUEoMjU2KWB9LCB7Q2Fzc2FuZHJhVHlwZU1hcHBpbmcsIGRhbC5TdHJpbmdUeXBlLCBuaWwsIDAsIGBWQVJDSEFSYH0sIHtDYXNzYW5kcmFUeXBlTWFwcGluZywgZGFsLlN0cmluZ1R5cGUsIG5pbCwgNDIsIGBWQVJDSEFSKDQyKWB9LCB7Q2Fzc2FuZHJhVHlwZU1hcHBpbmcsIGRhbC5JbnRUeXBlLCBuaWwsIDAsIGBJTlRgfSwge0Nhc3NhbmRyYVR5cGVNYXBwaW5nLCBkYWwuSW50VHlwZSwgbmlsLCAxNCwgYElOVCgxNClgfSwge0Nhc3NhbmRyYVR5cGVNYXBwaW5nLCBkYWwuRmxvYXRUeXBlLCBuaWwsIDAsIGBGTE9BVGB9LCB7Q2Fzc2FuZHJhVHlwZU1hcHBpbmcsIGRhbC5GbG9hdFR5cGUsIG5pbCwgNSwgYEZMT0FUKDUpYH0sIHtDYXNzYW5kcmFUeXBlTWFwcGluZywgZGFsLkJvb2xlYW5UeXBlLCBuaWwsIDAsIGBUSU5ZSU5UKDEpYH0sIHtDYXNzYW5kcmFUeXBlTWFwcGluZywgZGFsLlRpbWVUeXBlLCBuaWwsIDAsIGBEQVRFVElNRWB9LCB7Q2Fzc2FuZHJhVHlwZU1hcHBpbmcsIGRhbC5PYmplY3RUeXBlLCBbXWRhbC5UeXBle2RhbC5TdHJpbmdUeXBlLCBkYWwuSW50VHlwZX0sIDAsIGBNQVA8VkFSQ0hBUixJTlQ+YH0sIHtDYXNzYW5kcmFUeXBlTWFwcGluZywgZGFsLk9iamVjdFR5cGUsIFtdZGFsLlR5cGV7ZGFsLlN0cmluZ1R5cGUsIGRhbC5Cb29sZWFuVHlwZX0sIDAsIGBNQVA8VkFSQ0hBUixUSU5ZSU5UKDEpPmB9LCB7Q2Fzc2FuZHJhVHlwZU1hcHBpbmcsIGRhbC5BcnJheVR5cGUsIFtdZGFsLlR5cGV7ZGFsLkludFR5cGV9LCAwLCBgTElTVDxJTlQ+YH0sIHtDYXNzYW5kcmFUeXBlTWFwcGluZywgZGFsLlJhd1R5cGUsIG5pbCwgMCwgYEJMT0JgfSwge0Nhc3NhbmRyYVR5cGVNYXBwaW5nLCBkYWwuUmF3VHlwZSwgbmlsLCAyNTYsIGBCTE9CKDI1NilgfX0gewoJCWhlbHAgOj0gZm10LlNwcmludGYoIkNhc2UgJWQ6ICV2ICV2KCV2KSIsIGksIHRjYXNlLk1hcHBpbmcsIHRjYXNlLlR5cGUsIHRjYXNlLlN1YnR5cGVzKQoJCWdlbiA6PSBOZXdTcWxHZW5lcmF0b3IoKQoJCWdlbi5UeXBlTWFwcGluZyA9IHRjYXNlLk1hcHBpbmcKCQl0eXAsIGVyciA6PSBnZW4uVG9OYXRpdmVUeXBlKHRjYXNlLlR5cGUsIHRjYXNlLlN1YnR5cGVzLCB0Y2FzZS5MZW5ndGgpCgkJYXNzZXJ0Lk5vRXJyb3IoZXJyLCBoZWxwKQoJCWFzc2VydC5FcXVhbCh0Y2FzZS5FeHBlY3RlZCwgdHlwLCBoZWxwKQoJfQp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlTypeMapping",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlTypeMapping(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmLCBlcnIgOj0gZmlsdGVyLlBhcnNlKGBpbnQ6YWdlLzcvc3RyOm5hbWUvdGVkL2Jvb2w6ZW5hYmxlZC90cnVlL2Zsb2F0OnJhdGluZy80LjUvZGF0ZTpjcmVhdGVkX2F0L2x0Om5vd2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglnZW4gOj0gTmV3U3FsR2VuZXJhdG9yKCkKCWFjdHVhbCwgZXJyIDo9IGZpbHRlci5SZW5kZXIoZ2VuLCBgZm9vYCwgZikKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgU0VMRUNUICogRlJPTSBmb28gYCtgV0hFUkUgKGFnZSA9ID8pIGArYEFORCAobmFtZSA9ID8pIGArYEFORCAoZW5hYmxlZCA9ID8pIGArYEFORCAocmF0aW5nID0gPykgYCtgQU5EIChjcmVhdGVkX2F0IDwgPylgLCBzdHJpbmcoYWN0dWFsWzpdKSkKCWdlbiA9IE5ld1NxbEdlbmVyYXRvcigpCglnZW4uVHlwZU1hcHBpbmcgPSBEZWZhdWx0U3FsVHlwZU1hcHBpbmcKCWFjdHVhbCwgZXJyID0gZmlsdGVyLlJlbmRlcihnZW4sIGBmb29gLCBmKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBTRUxFQ1QgKiBGUk9NIGZvbyBgK2BXSEVSRSAoYWdlID0gPykgYCtgQU5EIChuYW1lID0gPykgYCtgQU5EIChlbmFibGVkID0gPykgYCtgQU5EIChyYXRpbmcgPSA/KSBgK2BBTkQgKGNyZWF0ZWRfYXQgPCA/KWAsIHN0cmluZyhhY3R1YWxbOl0pKQoJZ2VuID0gTmV3U3FsR2VuZXJhdG9yKCkKCWdlbi5UeXBlTWFwcGluZyA9IFBvc3RncmVzVHlwZU1hcHBpbmcKCWFjdHVhbCwgZXJyID0gZmlsdGVyLlJlbmRlcihnZW4sIGBmb29gLCBmKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBTRUxFQ1QgKiBGUk9NICJmb28iIGArYFdIRVJFICgiYWdlIiA9ICQxKSBgK2BBTkQgKCJuYW1lIiA9ICQyKSBgK2BBTkQgKCJlbmFibGVkIiA9ICQzKSBgK2BBTkQgKCJyYXRpbmciID0gJDQpIGArYEFORCAoImNyZWF0ZWRfYXQiIDwgJDUpYCwgc3RyaW5nKGFjdHVhbFs6XSkpCglnZW4gPSBOZXdTcWxHZW5lcmF0b3IoKQoJZ2VuLlR5cGVNYXBwaW5nID0gU3FsaXRlVHlwZU1hcHBpbmcKCWFjdHVhbCwgZXJyID0gZmlsdGVyLlJlbmRlcihnZW4sIGBmb29gLCBmKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBTRUxFQ1QgKiBGUk9NICJmb28iIGArYFdIRVJFICgiYWdlIiA9ID8pIGArYEFORCAoIm5hbWUiID0gPykgYCtgQU5EICgiZW5hYmxlZCIgPSA/KSBgK2BBTkQgKCJyYXRpbmciID0gPykgYCtgQU5EICgiY3JlYXRlZF9hdCIgPCA/KWAsIHN0cmluZyhhY3R1YWxbOl0pKQp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "TestSqlUpdates",
                            "Arguments": [
                                {
                                    "Name": "t",
                                    "Type": "*testing.T"
                                }
                            ],
                            "Signature": "TestSqlUpdates(t *testing.T)",
                            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl0ZXN0cyA6PSBtYXBbc3RyaW5nXXVwZGF0ZVRlc3REYXRhe2BVUERBVEUgZm9vIFNFVCBpZCA9ID9gOiB1cGRhdGVUZXN0RGF0YXtJbnB1dDogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgaWRgOiAxfX0sIGBVUERBVEUgZm9vIFNFVCBuYW1lID0gPyBXSEVSRSAoaWQgPSA/KWA6IHVwZGF0ZVRlc3REYXRhe0lucHV0OiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BuYW1lYDogYEJvYiBKb2huc29uYH0sIEZpbHRlcjogYGlkLzFgfSwgYFVQREFURSBmb28gU0VUIGFnZSA9ID8gV0hFUkUgKGFnZSA8ID8pYDogdXBkYXRlVGVzdERhdGF7SW5wdXQ6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YGFnZWA6IDIxfSwgRmlsdGVyOiBgYWdlL2x0OjIxYH0sIGBVUERBVEUgZm9vIFNFVCBlbmFibGVkID0gPyBXSEVSRSAoZW5hYmxlZCBJUyBOVUxMKWA6IHVwZGF0ZVRlc3REYXRhe0lucHV0OiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BlbmFibGVkYDogdHJ1ZX0sIEZpbHRlcjogYGVuYWJsZWQvbnVsbGB9LCBgVVBEQVRFIGZvbyBTRVQgZW5hYmxlZCA9ID9gOiB1cGRhdGVUZXN0RGF0YXtJbnB1dDogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgZW5hYmxlZGA6IG5pbH19LCBgVVBEQVRFIGZvbyBTRVQgYWdlID0gPywgbmFtZSA9ID8gV0hFUkUgKGlkID0gPylgOiB1cGRhdGVUZXN0RGF0YXtJbnB1dDogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgbmFtZWA6IGB0ZWRgLCBgYWdlYDogN30sIEZpbHRlcjogYGlkLzQyYH0sIGBVUERBVEUgZm9vIFNFVCBhZ2UgPSA/LCBuYW1lID0gPyBXSEVSRSAoYWdlIDwgPykgQU5EIChuYW1lIDw+ID8pYDogdXBkYXRlVGVzdERhdGF7SW5wdXQ6IG1hcFtzdHJpbmddaW50ZXJmYWNle317YG5hbWVgOiBgdGVkYCwgYGFnZWA6IDd9LCBGaWx0ZXI6IGBhZ2UvbHQ6Ny9uYW1lL25vdDp0ZWRgfX0KCWZvciBleHBlY3RlZCwgdGVzdERhdGEgOj0gcmFuZ2UgdGVzdHMgewoJCWYsIGVyciA6PSBmaWx0ZXIuUGFyc2UodGVzdERhdGEuRmlsdGVyKQoJCWFzc2VydC5Ob0Vycm9yKGVycikKCQlnZW4gOj0gTmV3U3FsR2VuZXJhdG9yKCkKCQlnZW4uVHlwZSA9IFNxbFVwZGF0ZVN0YXRlbWVudAoJCWdlbi5JbnB1dERhdGEgPSB0ZXN0RGF0YS5JbnB1dAoJCWFjdHVhbCwgZXJyIDo9IGZpbHRlci5SZW5kZXIoZ2VuLCBgZm9vYCwgZikKCQlhc3NlcnQuTm9FcnJvcihlcnIpCgkJYXNzZXJ0LkVxdWFsKGV4cGVjdGVkLCBzdHJpbmcoYWN0dWFsWzpdKSwgZXhwZWN0ZWQpCgl9Cn0=",
                            "IsPackageLevel": true
                        }
                    ],
                    "Types": {
                        "Elasticsearch": {
                            "Name": "Elasticsearch",
                            "MetaType": "struct",
                            "Methods": [
                                {
                                    "Name": "AggregateByField",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "agg",
                                            "Type": "filter.Aggregation"
                                        },
                                        {
                                            "Name": "field",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "AggregateByField(agg filter.Aggregation, field string) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "Finalize",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "flt",
                                            "Type": "*filter.Filter"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "Finalize(flt *filter.Filter) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "GetValues",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Returns": [
                                        {
                                            "Type": "[]interface{}"
                                        }
                                    ],
                                    "Signature": "GetValues() []interface{}",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "GroupByField",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "field",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "GroupByField(field string) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "Initialize",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "collectionName",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "Initialize(collectionName string) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "NewElasticsearchGenerator",
                                    "Returns": [
                                        {
                                            "Type": "*Elasticsearch"
                                        }
                                    ],
                                    "Signature": "NewElasticsearchGenerator() *Elasticsearch",
                                    "Source": "ewoJcmV0dXJuICZFbGFzdGljc2VhcmNoe0dlbmVyYXRvcjogZmlsdGVyLkdlbmVyYXRvcnt9LCBjb21wYXQ6IERlZmF1bHRNaW5WZXJzaW9uQ29tcGF0fQp9",
                                    "IsPackageLevel": true
                                },
                                {
                                    "Name": "SetMinimumVersion",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "v",
                                            "Type": "float64"
                                        }
                                    ],
                                    "Signature": "SetMinimumVersion(v float64)",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "SetOption",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "key",
                                            "Type": "string"
                                        },
                                        {
                                            "Name": "value",
                                            "Type": "interface{}"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "SetOption(key string, value interface{}) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "WithCriterion",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "criterion",
                                            "Type": "filter.Criterion"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "WithCriterion(criterion filter.Criterion) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "WithField",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "field",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "WithField(field string) error",
                                    "IsPackageLevel": false
                                }
                            ],
                            "Source": "dHlwZSBFbGFzdGljc2VhcmNoIHN0cnVjdCB7CglmaWx0ZXIuR2VuZXJhdG9yCgp9Cg==",
                            "HasUnexportedFields": true
                        },
                        "MongoDB": {
                            "Name": "MongoDB",
                            "MetaType": "struct",
                            "Methods": [
                                {
                                    "Name": "AggregateByField",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "agg",
                                            "Type": "filter.Aggregation"
                                        },
                                        {
                                            "Name": "field",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "AggregateByField(agg filter.Aggregation, field string) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "Finalize",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "f",
                                            "Type": "*filter.Filter"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "Finalize(f *filter.Filter) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "GetValues",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Returns": [
                                        {
                                            "Type": "[]interface{}"
                                        }
                                    ],
                                    "Signature": "GetValues() []interface{}",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "GroupByField",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "field",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "GroupByField(field string) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "Initialize",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "collectionName",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "Initialize(collectionName string) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "NewMongoDBGenerator",
                                    "Returns": [
                                        {
                                            "Type": "*MongoDB"
                                        }
                                    ],
                                    "Signature": "NewMongoDBGenerator() *MongoDB",
                                    "Source": "ewoJcmV0dXJuICZNb25nb0RCe0dlbmVyYXRvcjogZmlsdGVyLkdlbmVyYXRvcnt9fQp9",
                                    "IsPackageLevel": true
                                },
                                {
                                    "Name": "SetOption",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "key",
                                            "Type": "string"
                                        },
                                        {
                                            "Name": "value",
                                            "Type": "interface{}"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "SetOption(key string, value interface{}) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "WithCriterion",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "criterion",
                                            "Type": "filter.Criterion"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "WithCriterion(criterion filter.Criterion) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "WithField",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "field",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "WithField(field string) error",
                                    "IsPackageLevel": false
                                }
                            ],
                            "Source": "dHlwZSBNb25nb0RCIHN0cnVjdCB7CglmaWx0ZXIuR2VuZXJhdG9yCgp9Cg==",
                            "HasUnexportedFields": true
                        },
                        "Sql": {
                            "Name": "Sql",
                            "MetaType": "struct",
                            "Methods": [
                                {
                                    "Name": "AggregateByField",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "agg",
                                            "Type": "filter.Aggregation"
                                        },
                                        {
                                            "Name": "field",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "AggregateByField(agg filter.Aggregation, field string) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "ApplyNormalizer",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "fieldName",
                                            "Type": "string"
                                        },
                                        {
                                            "Name": "in",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "string"
                                        }
                                    ],
                                    "Signature": "ApplyNormalizer(fieldName string, in string) string",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "ArrayTypeDecode",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "in",
                                            "Type": "[]byte"
                                        },
                                        {
                                            "Name": "out",
                                            "Type": "interface{}"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "ArrayTypeDecode(in []byte, out interface{}) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "ArrayTypeEncode",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "in",
                                            "Type": "interface{}"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "[]byte"
                                        },
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "ArrayTypeEncode(in interface{}) ([]byte, error)",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "Finalize",
                                    "Comment": "Takes all the information collected so far and generates a SQL statement from it",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "f",
                                            "Type": "*filter.Filter"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "Finalize(f *filter.Filter) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "GetPlaceholder",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "fieldName",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "string"
                                        }
                                    ],
                                    "Signature": "GetPlaceholder(fieldName string) string",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "GetValues",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Returns": [
                                        {
                                            "Type": "[]interface{}"
                                        }
                                    ],
                                    "Signature": "GetValues() []interface{}",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "GroupByField",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "field",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "GroupByField(field string) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "Initialize",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "collectionName",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "Initialize(collectionName string) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "NewSqlGenerator",
                                    "Returns": [
                                        {
                                            "Type": "*Sql"
                                        }
                                    ],
                                    "Signature": "NewSqlGenerator() *Sql",
                                    "Source": "ewoJcmV0dXJuICZTcWx7R2VuZXJhdG9yOiBmaWx0ZXIuR2VuZXJhdG9ye30sIE5vcm1hbGl6ZUZpZWxkczogbWFrZShbXXN0cmluZywgMCksIE5vcm1hbGl6ZXJGb3JtYXQ6ICIlcyIsIEZpZWxkV3JhcHBlcnM6IG1ha2UobWFwW3N0cmluZ11zdHJpbmcpLCBVc2VJblN0YXRlbWVudDogdHJ1ZSwgVHlwZU1hcHBpbmc6IERlZmF1bHRTcWxUeXBlTWFwcGluZywgVHlwZTogU3FsU2VsZWN0U3RhdGVtZW50LCBJbnB1dERhdGE6IG1ha2UobWFwW3N0cmluZ11pbnRlcmZhY2V7fSl9Cn0=",
                                    "IsPackageLevel": true
                                },
                                {
                                    "Name": "ObjectTypeDecode",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "in",
                                            "Type": "[]byte"
                                        },
                                        {
                                            "Name": "out",
                                            "Type": "interface{}"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "ObjectTypeDecode(in []byte, out interface{}) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "ObjectTypeEncode",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "in",
                                            "Type": "interface{}"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "[]byte"
                                        },
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "ObjectTypeEncode(in interface{}) ([]byte, error)",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "PrepareInputValue",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "f",
                                            "Type": "string"
                                        },
                                        {
                                            "Name": "value",
                                            "Type": "interface{}"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "interface{}"
                                        },
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "PrepareInputValue(f string, value interface{}) (interface{}, error)",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "SetOption",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "_",
                                            "Type": "string"
                                        },
                                        {
                                            "Name": "_",
                                            "Type": "interface{}"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "SetOption(_ string, _ interface{}) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "SplitTypeLength",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "in",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "string"
                                        },
                                        {
                                            "Type": "int"
                                        },
                                        {
                                            "Type": "int"
                                        }
                                    ],
                                    "Signature": "SplitTypeLength(in string) (string, int, int)",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "ToAggregatedFieldName",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "agg",
                                            "Type": "filter.Aggregation"
                                        },
                                        {
                                            "Name": "field",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "string"
                                        }
                                    ],
                                    "Signature": "ToAggregatedFieldName(agg filter.Aggregation, field string) string",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "ToFieldName",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "field",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "string"
                                        }
                                    ],
                                    "Signature": "ToFieldName(field string) string",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "ToNativeType",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "in",
                                            "Type": "dal.Type"
                                        },
                                        {
                                            "Name": "subtypes",
                                            "Type": "[]dal.Type"
                                        },
                                        {
                                            "Name": "length",
                                            "Type": "int"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "string"
                                        },
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "ToNativeType(in dal.Type, subtypes []dal.Type, length int) (string, error)",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "ToNativeValue",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "t",
                                            "Type": "dal.Type"
                                        },
                                        {
                                            "Name": "subtypes",
                                            "Type": "[]dal.Type"
                                        },
                                        {
                                            "Name": "in",
                                            "Type": "interface{}"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "string"
                                        }
                                    ],
                                    "Signature": "ToNativeValue(t dal.Type, subtypes []dal.Type, in interface{}) string",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "ToTableName",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "table",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "string"
                                        }
                                    ],
                                    "Signature": "ToTableName(table string) string",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "WithCriterion",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "criterion",
                                            "Type": "filter.Criterion"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "WithCriterion(criterion filter.Criterion) error",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "WithField",
                                    "PointerReceiver": true,
                                    "ReceiverName": "self",
                                    "Arguments": [
                                        {
                                            "Name": "field",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "WithField(field string) error",
                                    "IsPackageLevel": false
                                }
                            ],
                            "Fields": [
                                {
                                    "Name": "FieldWrappers",
                                    "Type": "map[string]string"
                                },
                                {
                                    "Name": "NormalizeFields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "NormalizerFormat",
                                    "Type": "string"
                                },
                                {
                                    "Name": "UseInStatement",
                                    "Type": "bool"
                                },
                                {
                                    "Name": "Distinct",
                                    "Type": "bool"
                                },
                                {
                                    "Name": "Count",
                                    "Type": "bool"
                                },
                                {
                                    "Name": "TypeMapping",
                                    "Type": "SqlTypeMapping"
                                },
                                {
                                    "Name": "Type",
                                    "Type": "SqlStatementType"
                                },
                                {
                                    "Name": "InputData",
                                    "Type": "map[string]interface{}"
                                }
                            ],
                            "Source": "dHlwZSBTcWwgc3RydWN0IHsKCWZpbHRlci5HZW5lcmF0b3IKCUZpZWxkV3JhcHBlcnMgICBtYXBbc3RyaW5nXXN0cmluZwoJTm9ybWFsaXplRmllbGRzIFsgLy8gbWFwIG9mIGZpZWxkIG5hbWUtZm9ybWF0IHN0cmluZ3MgdG8gd3JhcCBzcGVjaWZpYyBmaWVsZHMgaW4gYWZ0ZXIgRmllbGROYW1lRm9ybWF0IGlzIGFwcGxpZWQKCV1zdHJpbmcKCU5vcm1hbGl6ZXJGb3JtYXQgc3RyaW5nCglVc2VJblN0YXRlbWVudCAgIGJvb2wKCURpc3RpbmN0ICAgICAgICAgYm9vbAoJQ291bnQgICAgICAgICAgICBib29sCglUeXBlTWFwcGluZyAgICAgIFNxbFR5cGVNYXBwaW5nCglUeXBlICAgICAgICAgICAgIFNxbFN0YXRlbWVudFR5cGUKCUlucHV0RGF0YSAgICAgICAgbWFwIC8vIGEgbGlzdCBvZiBmaWVsZCBuYW1lcyB0aGF0IHNob3VsZCBoYXZlIHRoZSBOb3JtYWxpemVyRm9ybWF0IGFwcGxpZWQgdG8gdGhlbSBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyB2YWx1ZXMKCS8vIHdoYXQgdHlwZSBvZiBTUUwgc3RhdGVtZW50IGlzIGJlaW5nIGdlbmVyYXRlZAoJW3N0cmluZ11pbnRlcmZhY2V7fQoKfS8vIGtleS12YWx1ZSBkYXRhIGZvciBzdGF0ZW1lbnQgdHlwZXMgdGhhdCByZXF1aXJlIGlucHV0IGRhdGEgKGUuZy46IGluc2VydHMsIHVwZGF0ZXMpCgo=",
                            "HasUnexportedFields": true
                        },
                        "SqlArrayTypeDecodeFunc": {
                            "Name": "SqlArrayTypeDecodeFunc",
                            "Source": "dHlwZSBTcWxBcnJheVR5cGVEZWNvZGVGdW5jIGZ1bmMoaW4gW11ieXRlLCBvdXQgaW50ZXJmYWNle30pIGVycm9y"
                        },
                        "SqlArrayTypeEncodeFunc": {
                            "Name": "SqlArrayTypeEncodeFunc",
                            "Source": "dHlwZSBTcWxBcnJheVR5cGVFbmNvZGVGdW5jIGZ1bmMoaW4gaW50ZXJmYWNle30pIChbXWJ5dGUsIGVycm9yKQ=="
                        },
                        "SqlObjectTypeDecodeFunc": {
                            "Name": "SqlObjectTypeDecodeFunc",
                            "Source": "dHlwZSBTcWxPYmplY3RUeXBlRGVjb2RlRnVuYyBmdW5jKGluIFtdYnl0ZSwgb3V0IGludGVyZmFjZXt9KSBlcnJvcg=="
                        },
                        "SqlObjectTypeEncodeFunc": {
                            "Name": "SqlObjectTypeEncodeFunc",
                            "Source": "dHlwZSBTcWxPYmplY3RUeXBlRW5jb2RlRnVuYyBmdW5jKGluIGludGVyZmFjZXt9KSAoW11ieXRlLCBlcnJvcik="
                        },
                        "SqlStatementType": {
                            "Name": "SqlStatementType",
                            "MetaType": "int",
                            "Source": "dHlwZSBTcWxTdGF0ZW1lbnRUeXBlIGludA=="
                        },
                        "SqlTypeMapping": {
                            "Name": "SqlTypeMapping",
                            "MetaType": "struct",
                            "Methods": [
                                {
                                    "Name": "String",
                                    "ReceiverName": "self",
                                    "Returns": [
                                        {
                                            "Type": "string"
                                        }
                                    ],
                                    "Signature": "String() string",
                                    "IsPackageLevel": false
                                },
                                {
                                    "Name": "GetSqlTypeMapping",
                                    "Arguments": [
                                        {
                                            "Name": "name",
                                            "Type": "string"
                                        }
                                    ],
                                    "Returns": [
                                        {
                                            "Type": "SqlTypeMapping"
                                        },
                                        {
                                            "Type": "error"
                                        }
                                    ],
                                    "Signature": "GetSqlTypeMapping(name string) (SqlTypeMapping, error)",
                                    "Source": "ewoJc3dpdGNoIG5hbWUgewoJY2FzZSBgcG9zdGdyZXNxbGAsIGBwZ3NxbGA6CgkJcmV0dXJuIFBvc3RncmVzVHlwZU1hcHBpbmcsIG5pbAoJY2FzZSBgcG9zdGdyZXNxbC1qc29uYCwgYHBnc3FsLWpzb25gOgoJCXJldHVybiBQb3N0Z3Jlc0pzb25UeXBlTWFwcGluZywgbmlsCgljYXNlIGBzcWxpdGVgOgoJCXJldHVybiBTcWxpdGVUeXBlTWFwcGluZywgbmlsCgljYXNlIGBteXNxbGA6CgkJcmV0dXJuIE15c3FsVHlwZU1hcHBpbmcsIG5pbAoJY2FzZSBgY2Fzc2FuZHJhYDoKCQlyZXR1cm4gQ2Fzc2FuZHJhVHlwZU1hcHBpbmcsIG5pbAoJY2FzZSBgYDoKCQlyZXR1cm4gRGVmYXVsdFNxbFR5cGVNYXBwaW5nLCBuaWwKCWRlZmF1bHQ6CgkJcmV0dXJuIFNxbFR5cGVNYXBwaW5ne30sIGZtdC5FcnJvcmYoInVucmVjb2duaXplZCBTUUwgbWFwcGluZyB0eXBlICVxIiwgbmFtZSkKCX0KfQ==",
                                    "IsPackageLevel": true
                                }
                            ],
                            "Fields": [
                                {
                                    "Name": "Name",
                                    "Type": "string"
                                },
                                {
                                    "Name": "StringType",
                                    "Type": "string"
                                },
                                {
                                    "Name": "StringTypeLength",
                                    "Type": "int"
                                },
                                {
                                    "Name": "IntegerType",
                                    "Type": "string"
                                },
                                {
                                    "Name": "FloatType",
                                    "Type": "string"
                                },
                                {
                                    "Name": "FloatTypeLength",
                                    "Type": "int"
                                },
                                {
                                    "Name": "FloatTypePrecision",
                                    "Type": "int"
                                },
                                {
                                    "Name": "BooleanType",
                                    "Type": "string"
                                },
                                {
                                    "Name": "BooleanTypeLength",
                                    "Type": "int"
                                },
                                {
                                    "Name": "DateTimeType",
                                    "Type": "string"
                                },
                                {
                                    "Name": "ObjectType",
                                    "Type": "string"
                                },
                                {
                                    "Name": "ArrayType",
                                    "Type": "string"
                                },
                                {
                                    "Name": "RawType",
                                    "Type": "string"
                                },
                                {
                                    "Name": "SubtypeFormat",
                                    "Type": "string"
                                },
                                {
                                    "Name": "MultiSubtypeFormat",
                                    "Type": "string"
                                },
                                {
                                    "Name": "PlaceholderFormat",
                                    "Type": "string"
                                },
                                {
                                    "Name": "PlaceholderArgument",
                                    "Type": "string"
                                },
                                {
                                    "Name": "TableNameFormat",
                                    "Type": "string"
                                },
                                {
                                    "Name": "FieldNameFormat",
                                    "Type": "string"
                                },
                                {
                                    "Name": "NestedFieldNameFormat",
                                    "Type": "string"
                                },
                                {
                                    "Name": "NestedFieldSeparator",
                                    "Type": "string"
                                },
                                {
                                    "Name": "NestedFieldJoiner",
                                    "Type": "string"
                                },
                                {
                                    "Name": "ObjectTypeEncodeFunc",
                                    "Type": "SqlObjectTypeEncodeFunc"
                                },
                                {
                                    "Name": "ObjectTypeDecodeFunc",
                                    "Type": "SqlObjectTypeDecodeFunc"
                                },
                                {
                                    "Name": "ArrayTypeEncodeFunc",
                                    "Type": "SqlArrayTypeEncodeFunc"
                                },
                                {
                                    "Name": "ArrayTypeDecodeFunc",
                                    "Type": "SqlArrayTypeDecodeFunc"
                                }
                            ],
                            "Source": "dHlwZSBTcWxUeXBlTWFwcGluZyBzdHJ1Y3QgewoJTmFtZSAgICAgICAgICAgICAgICAgIHN0cmluZwoJU3RyaW5nVHlwZSAgICAgICAgICAgIHN0cmluZwoJU3RyaW5nVHlwZUxlbmd0aCAgICAgIGludAoJSW50ZWdlclR5cGUgICAgICAgICAgIHN0cmluZwoJRmxvYXRUeXBlICAgICAgICAgICAgIHN0cmluZwoJRmxvYXRUeXBlTGVuZ3RoICAgICAgIGludAoJRmxvYXRUeXBlUHJlY2lzaW9uICAgIGludAoJQm9vbGVhblR5cGUgICAgICAgICAgIHN0cmluZwoJQm9vbGVhblR5cGVMZW5ndGggICAgIGludAoJRGF0ZVRpbWVUeXBlICAgICAgICAgIHN0cmluZwoJT2JqZWN0VHlwZSAgICAgICAgICAgIHN0cmluZwoJQXJyYXlUeXBlICAgICAgICAgICAgIHN0cmluZwoJUmF3VHlwZSAgICAgICAgICAgICAgIHN0cmluZwoJU3VidHlwZUZvcm1hdCAgICAgICAgIHN0cmluZwoJTXVsdGlTdWJ0eXBlRm9ybWF0ICAgIHN0cmluZwoJUGxhY2Vob2xkZXJGb3JtYXQgICAgIHN0cmluZwoJUGxhY2Vob2xkZXJBcmd1bWVudCAgIHN0cmluZwoJVGFibGVOYW1lRm9ybWF0ICAgICAgIHN0cmluZwoJRmllbGROYW1lRm9ybWF0ICAgICAgIHN0cmluZwoJTmVzdGVkRmllbGROYW1lRm9ybWF0IHN0cmluZwoJTmVzdGVkRmllbGRTZXBhcmF0b3IgIHN0cmluZwoJTmVzdGVkRmllbGRKb2luZXIgICAgIHN0cmluZwoJT2JqZWN0VHlwZUVuY29kZUZ1bmMgIFNxbE9iamVjdFR5cGVFbmNvZGVGdW5jCglPYmplY3RUeXBlRGVjb2RlRnVuYyAgU3FsT2JqZWN0VHlwZURlY29kZUZ1bmMKCUFycmF5VHlwZUVuY29kZUZ1bmMgICBTcWxBcnJheVR5cGVFbmNvZGVGdW5jCglBcnJheVR5cGVEZWNvZGVGdW5jICAgU3FsQXJyYXlUeXBlRGVjb2RlRnVuYwp9Ly8gaWYgdXNpbmcgcGxhY2Vob2xkZXJzLCB0aGUgZm9ybWF0IHN0cmluZyB1c2VkIHRvIGluc2VydCB0aGVtCi8vIGZ1bmN0aW9uIHVzZWQgZm9yIGRlY29kaW5nIGFycmF5cyBmcm9tIG5hdGl2ZSBpbnRvIGEgZGVzdGluYXRpb24gbWFwCg=="
                        }
                    }
                }
            ]
        },
        {
            "Name": "mapper",
            "CanonicalImportPath": "github.com/ghetzel/pivot/mapper",
            "ImportPath": "mapper",
            "ParentPackage": "pivot",
            "URL": "https://github.com/ghetzel/pivot",
            "Synopsis": "",
            "MainFunction": false,
            "CommentWordCount": 177,
            "LineCount": 388,
            "SourceLineCount": 295,
            "FunctionCount": 25,
            "TypeCount": 3,
            "ConstantCount": 0,
            "VariableCount": 0,
            "Statistics": {
                "Mean": 0.3385,
                "StdDev": 0.4666,
                "GeometricMean": 1,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 1
            },
            "Files": [
                {
                    "Name": "model.go",
                    "Imports": [
                        {
                            "PackageName": "fmt",
                            "Alias": "fmt"
                        },
                        {
                            "PackageName": "reflect",
                            "Alias": "reflect"
                        },
                        {
                            "PackageName": "sort",
                            "Alias": "sort"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/log",
                            "Alias": "log"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                            "Alias": "sliceutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                            "Alias": "typeutil"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/backends",
                            "Alias": "backends"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/dal",
                            "Alias": "dal"
                        },
                        {
                            "PackageName": "github.com/ghetzel/pivot/v3/filter",
                            "Alias": "filter"
                        }
                    ],
                    "Size": 10982,
                    "LineCount": 388,
                    "SourceLineCount": 295,
                    "FunctionCount": 25,
                    "TypeCount": 3,
                    "ConstantCount": 0,
                    "VariableCount": 0
                }
            ],
            "Types": {
                "Mapper": {
                    "Name": "Mapper",
                    "Source": "dHlwZSBNYXBwZXIgPSBiYWNrZW5kcy5NYXBwZXI="
                },
                "Model": {
                    "Name": "Model",
                    "MetaType": "struct",
                    "Methods": [
                        {
                            "Name": "All",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "into",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "All(into interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Average",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Average(field string, flt interface{}) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Count",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "flt",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "uint64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Count(flt interface{}) (uint64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Create",
                            "Comment": "Creates and saves a new instance of the model from the given struct or dal.Record.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "from",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Create(from interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "CreateOrUpdate",
                            "Comment": "Creates or updates an instance of the model depending on whether it exists or not.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "from",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "CreateOrUpdate(id interface{}, from interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Delete",
                            "Comment": "Delete instances of the model identified by the given IDs",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "ids",
                                    "Type": "...interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Delete(ids ...interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "DeleteQuery",
                            "Comment": "Delete all records matching the given query.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "flt",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "DeleteQuery(flt interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Drop",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Drop() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Each",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "destZeroValue",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "ResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Each(destZeroValue interface{}, resultFn ResultFunc) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Exists",
                            "Comment": "Tests whether a record exists for the given ID.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "bool"
                                }
                            ],
                            "Signature": "Exists(id interface{}) bool",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Find",
                            "Comment": "Perform a query for instances of the model that match the given filter.Filter.\nResults will be returned in the slice or array pointed to by the into parameter, or\nif into points to a dal.RecordSet, the RecordSet resulting from the query will be returned\nas-is.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "flt",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "into",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Find(flt interface{}, into interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "FindFunc",
                            "Comment": "Perform a query for instances of the model that match the given filter.Filter.\nThe given callback function will be called once per result.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "flt",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "destZeroValue",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "resultFn",
                                    "Type": "ResultFunc"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "FindFunc(flt interface{}, destZeroValue interface{}, resultFn ResultFunc) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Get",
                            "Comment": "Retrieves an instance of the model identified by the given ID and populates the value pointed to\nby the into parameter.  Structs and dal.Record instances can be populated.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "id",
                                    "Type": "interface{}"
                                },
                                {
                                    "Name": "into",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Get(id interface{}, into interface{}) error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetBackend",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "backends.Backend"
                                }
                            ],
                            "Signature": "GetBackend() backends.Backend",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GetCollection",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Signature": "GetCollection() *dal.Collection",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "GroupBy",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "aggregates",
                                    "Type": "[]filter.Aggregate"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*dal.RecordSet"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "GroupBy(fields []string, aggregates []filter.Aggregate, flt interface{}) (*dal.RecordSet, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "List",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string][]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "List(fields []string) (map[string][]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "ListWithFilter",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "fields",
                                    "Type": "[]string"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "map[string][]interface{}"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "ListWithFilter(fields []string, flt interface{}) (map[string][]interface{}, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Maximum",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Maximum(field string, flt interface{}) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Migrate",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Migrate() error",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Minimum",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Minimum(field string, flt interface{}) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "NewModel",
                            "Arguments": [
                                {
                                    "Name": "db",
                                    "Type": "backends.Backend"
                                },
                                {
                                    "Name": "collection",
                                    "Type": "*dal.Collection"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "*Model"
                                }
                            ],
                            "Signature": "NewModel(db backends.Backend, collection *dal.Collection) *Model",
                            "Source": "ewoJbW9kZWwgOj0gbmV3KE1vZGVsKQoJbW9kZWwuZGIgPSBkYgoJbW9kZWwuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb24KCWlmIG1vZGVsLmNvbGxlY3Rpb24uRmllbGRzID09IG5pbCB7CgkJbW9kZWwuY29sbGVjdGlvbi5GaWVsZHMgPSBtYWtlKFtdZGFsLkZpZWxkLCAwKQoJfQoJaWYgdiA6PSBjb2xsZWN0aW9uLklkZW50aXR5RmllbGQ7IHYgPT0gYGAgewoJCW1vZGVsLmNvbGxlY3Rpb24uSWRlbnRpdHlGaWVsZCA9IGRhbC5EZWZhdWx0SWRlbnRpdHlGaWVsZAoJfSBlbHNlIHsKCQltb2RlbC5jb2xsZWN0aW9uLklkZW50aXR5RmllbGQgPSB2Cgl9CglpZiB2IDo9IGNvbGxlY3Rpb24uSWRlbnRpdHlGaWVsZFR5cGU7IHYgPT0gYGAgewoJCW1vZGVsLmNvbGxlY3Rpb24uSWRlbnRpdHlGaWVsZFR5cGUgPSBkYWwuRGVmYXVsdElkZW50aXR5RmllbGRUeXBlCgl9IGVsc2UgewoJCW1vZGVsLmNvbGxlY3Rpb24uSWRlbnRpdHlGaWVsZFR5cGUgPSB2Cgl9CglkYi5SZWdpc3RlckNvbGxlY3Rpb24oY29sbGVjdGlvbikKCWNvbGxlY3Rpb24uU2V0QmFja2VuZChkYikKCXJldHVybiBtb2RlbAp9",
                            "IsPackageLevel": true
                        },
                        {
                            "Name": "String",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Returns": [
                                {
                                    "Type": "string"
                                }
                            ],
                            "Signature": "String() string",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Sum",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "field",
                                    "Type": "string"
                                },
                                {
                                    "Name": "flt",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "float64"
                                },
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Sum(field string, flt interface{}) (float64, error)",
                            "IsPackageLevel": false
                        },
                        {
                            "Name": "Update",
                            "Comment": "Updates and saves an existing instance of the model from the given struct or dal.Record.",
                            "PointerReceiver": true,
                            "ReceiverName": "self",
                            "Arguments": [
                                {
                                    "Name": "from",
                                    "Type": "interface{}"
                                }
                            ],
                            "Returns": [
                                {
                                    "Type": "error"
                                }
                            ],
                            "Signature": "Update(from interface{}) error",
                            "IsPackageLevel": false
                        }
                    ],
                    "Source": "dHlwZSBNb2RlbCBzdHJ1Y3QgewoJTWFwcGVyCgp9Cg==",
                    "HasUnexportedFields": true
                },
                "ResultFunc": {
                    "Name": "ResultFunc",
                    "Source": "dHlwZSBSZXN1bHRGdW5jID0gYmFja2VuZHMuUmVzdWx0RnVuYw=="
                }
            }
        },
        {
            "Name": "util",
            "CanonicalImportPath": "github.com/ghetzel/pivot/util",
            "ImportPath": "util",
            "ParentPackage": "pivot",
            "URL": "https://github.com/ghetzel/pivot",
            "Synopsis": "",
            "MainFunction": false,
            "CommentWordCount": 0,
            "LineCount": 63,
            "SourceLineCount": 46,
            "FunctionCount": 4,
            "TypeCount": 3,
            "ConstantCount": 1,
            "VariableCount": 1,
            "Statistics": {
                "Mean": 0,
                "StdDev": 0,
                "GeometricMean": 0,
                "HarmonicMean": 0,
                "Median": 0,
                "Minimum": 0,
                "Maximum": 0
            },
            "Files": [
                {
                    "Name": "features.go",
                    "Size": 474,
                    "LineCount": 32,
                    "SourceLineCount": 24,
                    "FunctionCount": 4,
                    "TypeCount": 0,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "http.go",
                    "Imports": [
                        {
                            "PackageName": "net/http",
                            "Alias": "http"
                        }
                    ],
                    "Size": 249,
                    "LineCount": 15,
                    "SourceLineCount": 11,
                    "FunctionCount": 0,
                    "TypeCount": 2,
                    "ConstantCount": 0,
                    "VariableCount": 0
                },
                {
                    "Name": "types.go",
                    "Size": 272,
                    "LineCount": 12,
                    "SourceLineCount": 9,
                    "FunctionCount": 0,
                    "TypeCount": 1,
                    "ConstantCount": 0,
                    "VariableCount": 1
                },
                {
                    "Name": "version.go",
                    "Size": 38,
                    "LineCount": 4,
                    "SourceLineCount": 2,
                    "FunctionCount": 0,
                    "TypeCount": 0,
                    "ConstantCount": 1,
                    "VariableCount": 0
                }
            ],
            "Constants": [
                {
                    "Name": "Version",
                    "Immutable": true,
                    "Expression": "`3.4.0`",
                    "Value": "3.4.0"
                }
            ],
            "Variables": [
                {
                    "Name": "RecordStructTag",
                    "Expression": "`pivot`",
                    "Value": "pivot"
                }
            ],
            "Functions": [
                {
                    "Name": "AnyFeatures",
                    "Arguments": [
                        {
                            "Name": "names",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "AnyFeatures(names ...string) bool",
                    "Source": "ewoJZm9yIF8sIG5hbWUgOj0gcmFuZ2UgbmFtZXMgewoJCWlmIHYsIG9rIDo9IGZlYXR1cmVzW25hbWVdOyBvayAmJiB2IHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9CglyZXR1cm4gZmFsc2UKfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "DisableFeature",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        }
                    ],
                    "Signature": "DisableFeature(name string)",
                    "Source": "ewoJZmVhdHVyZXNbbmFtZV0gPSBmYWxzZQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "EnableFeature",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        }
                    ],
                    "Signature": "EnableFeature(name string)",
                    "Source": "ewoJZmVhdHVyZXNbbmFtZV0gPSB0cnVlCn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "Features",
                    "Arguments": [
                        {
                            "Name": "names",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "Features(names ...string) bool",
                    "Source": "ewoJZm9yIF8sIG5hbWUgOj0gcmFuZ2UgbmFtZXMgewoJCWlmIHYsIG9rIDo9IGZlYXR1cmVzW25hbWVdOyAhb2sgfHwgIXYgewoJCQlyZXR1cm4gZmFsc2UKCQl9Cgl9CglyZXR1cm4gdHJ1ZQp9",
                    "IsPackageLevel": true
                }
            ],
            "Types": {
                "Endpoint": {
                    "Name": "Endpoint",
                    "MetaType": "struct",
                    "Fields": [
                        {
                            "Name": "BackendName",
                            "Type": "string"
                        },
                        {
                            "Name": "Method",
                            "Type": "string"
                        },
                        {
                            "Name": "Path",
                            "Type": "string"
                        },
                        {
                            "Name": "Handler",
                            "Type": "EndpointResponseFunc"
                        }
                    ],
                    "Source": "dHlwZSBFbmRwb2ludCBzdHJ1Y3QgewoJQmFja2VuZE5hbWUgc3RyaW5nCglNZXRob2QgICAgICBzdHJpbmcKCVBhdGggICAgICAgIHN0cmluZwoJSGFuZGxlciAgICAgRW5kcG9pbnRSZXNwb25zZUZ1bmMKfQ=="
                },
                "EndpointResponseFunc": {
                    "Name": "EndpointResponseFunc",
                    "Source": "dHlwZSBFbmRwb2ludFJlc3BvbnNlRnVuYyBmdW5jKCpodHRwLlJlcXVlc3QsIG1hcFtzdHJpbmddc3RyaW5nKSAoaW50LCBpbnRlcmZhY2V7fSwgZXJyb3Ip"
                },
                "Status": {
                    "Name": "Status",
                    "MetaType": "struct",
                    "Fields": [
                        {
                            "Name": "OK",
                            "Type": "bool"
                        },
                        {
                            "Name": "Application",
                            "Type": "string"
                        },
                        {
                            "Name": "Version",
                            "Type": "string"
                        },
                        {
                            "Name": "Backend",
                            "Type": "string"
                        },
                        {
                            "Name": "Indexer",
                            "Type": "string"
                        }
                    ],
                    "Source": "dHlwZSBTdGF0dXMgc3RydWN0IHsKCU9LICAgICAgICAgIGJvb2wgICBganNvbjoib2siYAoJQXBwbGljYXRpb24gc3RyaW5nIGBqc29uOiJhcHBsaWNhdGlvbiJgCglWZXJzaW9uICAgICBzdHJpbmcgYGpzb246InZlcnNpb24iYAoJQmFja2VuZCAgICAgc3RyaW5nIGBqc29uOiJiYWNrZW5kLG9taXRlbXB0eSJgCglJbmRleGVyICAgICBzdHJpbmcgYGpzb246ImluZGV4ZXIsb21pdGVtcHR5ImAKfQ=="
                }
            }
        }
    ]
}
