{
    "Name": "dal",
    "CanonicalImportPath": "github.com/ghetzel/pivot/dal",
    "ImportPath": "dal",
    "ParentPackage": "pivot",
    "URL": "https://github.com/ghetzel/pivot",
    "Synopsis": "",
    "MainFunction": false,
    "CommentWordCount": 2188,
    "LineCount": 4663,
    "SourceLineCount": 3503,
    "FunctionCount": 126,
    "TypeCount": 24,
    "ConstantCount": 27,
    "VariableCount": 13,
    "Statistics": {
        "Mean": 0.4558,
        "StdDev": 0.4846,
        "GeometricMean": 0,
        "HarmonicMean": 0,
        "Median": 0,
        "Minimum": 0,
        "Maximum": 1
    },
    "Files": [
        {
            "Name": "collection.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "reflect",
                    "Alias": "reflect"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/log",
                    "Alias": "log"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/structutil",
                    "Alias": "structutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                }
            ],
            "Size": 25587,
            "LineCount": 863,
            "SourceLineCount": 590,
            "FunctionCount": 33,
            "TypeCount": 3,
            "ConstantCount": 5,
            "VariableCount": 2
        },
        {
            "Name": "collection_test.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/stretchr/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 7006,
            "LineCount": 302,
            "SourceLineCount": 245,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "connection.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "net/url",
                    "Alias": "url"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/fileutil",
                    "Alias": "fileutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/log",
                    "Alias": "log"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/jdxcode/netrc",
                    "Alias": "netrc"
                }
            ],
            "Size": 6844,
            "LineCount": 299,
            "SourceLineCount": 239,
            "FunctionCount": 22,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "constraint.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "reflect",
                    "Alias": "reflect"
                }
            ],
            "Size": 1346,
            "LineCount": 55,
            "SourceLineCount": 35,
            "FunctionCount": 2,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "errors.go",
            "Imports": [
                {
                    "PackageName": "errors",
                    "Alias": "errors"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                }
            ],
            "Size": 587,
            "LineCount": 34,
            "SourceLineCount": 25,
            "FunctionCount": 4,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 2
        },
        {
            "Name": "field.go",
            "Imports": [
                {
                    "PackageName": "encoding/json",
                    "Alias": "json"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "reflect",
                    "Alias": "reflect"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/fatih/structs",
                    "Alias": "structs"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                }
            ],
            "Size": 13668,
            "LineCount": 491,
            "SourceLineCount": 360,
            "FunctionCount": 9,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 2
        },
        {
            "Name": "field_test.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/utils",
                    "Alias": "utils"
                },
                {
                    "PackageName": "github.com/stretchr/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 12523,
            "LineCount": 546,
            "SourceLineCount": 406,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "formatters.go",
            "Imports": [
                {
                    "PackageName": "encoding/base32",
                    "Alias": "base32"
                },
                {
                    "PackageName": "encoding/base64",
                    "Alias": "base64"
                },
                {
                    "PackageName": "encoding/hex",
                    "Alias": "hex"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "regexp",
                    "Alias": "regexp"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/jbenet/go-base58",
                    "Alias": "go-base58"
                }
            ],
            "Size": 7043,
            "LineCount": 288,
            "SourceLineCount": 225,
            "FunctionCount": 13,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 4
        },
        {
            "Name": "record.go",
            "Imports": [
                {
                    "PackageName": "encoding/json",
                    "Alias": "json"
                },
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "reflect",
                    "Alias": "reflect"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/log",
                    "Alias": "log"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                    "Alias": "maputil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                }
            ],
            "Size": 12862,
            "LineCount": 495,
            "SourceLineCount": 379,
            "FunctionCount": 18,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 1
        },
        {
            "Name": "record_loader.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "reflect",
                    "Alias": "reflect"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/structutil",
                    "Alias": "structutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                },
                {
                    "PackageName": "github.com/ghetzel/pivot/v3/util",
                    "Alias": "util"
                }
            ],
            "Size": 5460,
            "LineCount": 213,
            "SourceLineCount": 166,
            "FunctionCount": 0,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 2
        },
        {
            "Name": "record_loader_test.go",
            "Imports": [
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/stretchr/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 1412,
            "LineCount": 73,
            "SourceLineCount": 57,
            "FunctionCount": 0,
            "TypeCount": 4,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "record_test.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/stretchr/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 10479,
            "LineCount": 443,
            "SourceLineCount": 344,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "recordset.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "reflect",
                    "Alias": "reflect"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                }
            ],
            "Size": 3615,
            "LineCount": 142,
            "SourceLineCount": 102,
            "FunctionCount": 9,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "recordset_test.go",
            "Imports": [
                {
                    "PackageName": "testing",
                    "Alias": "testing"
                },
                {
                    "PackageName": "time",
                    "Alias": "time"
                },
                {
                    "PackageName": "github.com/stretchr/testify/require",
                    "Alias": "require"
                }
            ],
            "Size": 1820,
            "LineCount": 81,
            "SourceLineCount": 69,
            "FunctionCount": 0,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "relationship.go",
            "Size": 450,
            "LineCount": 18,
            "SourceLineCount": 15,
            "FunctionCount": 1,
            "TypeCount": 1,
            "ConstantCount": 0,
            "VariableCount": 0
        },
        {
            "Name": "types.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "strings",
                    "Alias": "strings"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/log",
                    "Alias": "log"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/maputil",
                    "Alias": "maputil"
                }
            ],
            "Size": 2338,
            "LineCount": 127,
            "SourceLineCount": 102,
            "FunctionCount": 4,
            "TypeCount": 9,
            "ConstantCount": 22,
            "VariableCount": 0
        },
        {
            "Name": "validators.go",
            "Imports": [
                {
                    "PackageName": "fmt",
                    "Alias": "fmt"
                },
                {
                    "PackageName": "net/url",
                    "Alias": "url"
                },
                {
                    "PackageName": "regexp",
                    "Alias": "regexp"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/sliceutil",
                    "Alias": "sliceutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/stringutil",
                    "Alias": "stringutil"
                },
                {
                    "PackageName": "github.com/ghetzel/go-stockutil/typeutil",
                    "Alias": "typeutil"
                }
            ],
            "Size": 4905,
            "LineCount": 193,
            "SourceLineCount": 144,
            "FunctionCount": 11,
            "TypeCount": 0,
            "ConstantCount": 0,
            "VariableCount": 0
        }
    ],
    "Constants": [
        {
            "Name": "ArrayType",
            "Immutable": true,
            "Expression": "`array`",
            "Value": "array"
        },
        {
            "Name": "AutoType",
            "Immutable": true,
            "Expression": "`auto`",
            "Value": "auto"
        },
        {
            "Name": "BooleanType",
            "Immutable": true,
            "Expression": "`bool`",
            "Value": "bool"
        },
        {
            "Name": "CollectionDelta",
            "Type": "DeltaType",
            "Immutable": true,
            "Expression": "`collection`",
            "Value": "collection"
        },
        {
            "Name": "CollectionKeyNameIssue",
            "Immutable": true
        },
        {
            "Name": "CollectionKeyTypeIssue",
            "Immutable": true
        },
        {
            "Name": "CollectionNameIssue",
            "Immutable": true
        },
        {
            "Name": "FieldDelta",
            "Immutable": true,
            "Expression": "`field`",
            "Value": "field"
        },
        {
            "Name": "FieldLengthIssue",
            "Immutable": true
        },
        {
            "Name": "FieldMissingIssue",
            "Immutable": true
        },
        {
            "Name": "FieldNameIssue",
            "Immutable": true
        },
        {
            "Name": "FieldPropertyIssue",
            "Immutable": true
        },
        {
            "Name": "FieldTypeIssue",
            "Immutable": true
        },
        {
            "Name": "FloatType",
            "Immutable": true,
            "Expression": "`float`",
            "Value": "float"
        },
        {
            "Name": "IntType",
            "Immutable": true,
            "Expression": "`int`",
            "Value": "int"
        },
        {
            "Name": "ObjectType",
            "Immutable": true,
            "Expression": "`object`",
            "Value": "object"
        },
        {
            "Name": "PersistOperation",
            "Type": "FieldOperation",
            "Immutable": true,
            "Expression": "iota"
        },
        {
            "Name": "RawType",
            "Immutable": true,
            "Expression": "`raw`",
            "Value": "raw"
        },
        {
            "Name": "RetrieveOperation",
            "Immutable": true
        },
        {
            "Name": "SchemaCreate",
            "Immutable": true
        },
        {
            "Name": "SchemaEnforce",
            "Immutable": true
        },
        {
            "Name": "SchemaExpand",
            "Immutable": true
        },
        {
            "Name": "SchemaRemove",
            "Immutable": true
        },
        {
            "Name": "SchemaVerify",
            "Type": "CollectionAction",
            "Immutable": true,
            "Expression": "iota"
        },
        {
            "Name": "StringType",
            "Type": "Type",
            "Immutable": true,
            "Expression": "`str`",
            "Value": "str"
        },
        {
            "Name": "TimeType",
            "Immutable": true,
            "Expression": "`time`",
            "Value": "time"
        },
        {
            "Name": "UnknownIssue",
            "Type": "DeltaIssue",
            "Immutable": true,
            "Expression": "iota"
        }
    ],
    "Variables": [
        {
            "Name": "Base32Encoder"
        },
        {
            "Name": "Base58Encoder"
        },
        {
            "Name": "Base64Encoder"
        },
        {
            "Name": "CollectionNotFound",
            "Expression": "errors.New(`Collection not found`)"
        },
        {
            "Name": "DefaultFieldCodec",
            "Expression": "`json`",
            "Value": "json"
        },
        {
            "Name": "DefaultIdentityField",
            "Expression": "`id`",
            "Value": "id"
        },
        {
            "Name": "DefaultIdentityFieldType",
            "Type": "Type",
            "Expression": "IntType"
        },
        {
            "Name": "DefaultStructIdentityFieldName",
            "Expression": "`ID`",
            "Value": "ID"
        },
        {
            "Name": "FieldNestingSeparator",
            "Type": "string",
            "Expression": "`.`",
            "Value": "."
        },
        {
            "Name": "FieldNotFound",
            "Expression": "errors.New(`Field not found`)"
        },
        {
            "Name": "HexEncoder"
        },
        {
            "Name": "IntIsProbablyUnixEpochSeconds",
            "Type": "int64",
            "Expression": "4294967296"
        },
        {
            "Name": "RecordStructTag",
            "Expression": "util.RecordStructTag"
        }
    ],
    "Functions": [
        {
            "Name": "AddConnectionSchemeAlias",
            "Arguments": [
                {
                    "Name": "from",
                    "Type": "string"
                },
                {
                    "Name": "to",
                    "Type": "string"
                }
            ],
            "Signature": "AddConnectionSchemeAlias(from string, to string)",
            "Source": "ewoJc2NoZW1lQWxpYXNNYXBbZnJvbV0gPSB0bwp9",
            "IsPackageLevel": true
        },
        {
            "Name": "CurrentTime",
            "Comment": "Returns the current time every time the field is persisted.",
            "Arguments": [
                {
                    "Name": "value",
                    "Type": "interface{}"
                },
                {
                    "Name": "op",
                    "Type": "FieldOperation"
                }
            ],
            "Returns": [
                {
                    "Type": "interface{}"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "CurrentTime(value interface{}, op FieldOperation) (interface{}, error)",
            "Source": "ewoJaWYgb3AgPT0gUGVyc2lzdE9wZXJhdGlvbiB7CgkJcmV0dXJuIHRpbWUuTm93KCksIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gdmFsdWUsIG5pbAoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "CurrentTimeIfUnset",
            "Comment": "Returns the current time when the field is persisted if the current value is empty.",
            "Arguments": [
                {
                    "Name": "value",
                    "Type": "interface{}"
                },
                {
                    "Name": "op",
                    "Type": "FieldOperation"
                }
            ],
            "Returns": [
                {
                    "Type": "interface{}"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "CurrentTimeIfUnset(value interface{}, op FieldOperation) (interface{}, error)",
            "Source": "ewoJcmV0dXJuIElmVW5zZXQoZnVuYyh2IGludGVyZmFjZXt9LCBvIEZpZWxkT3BlcmF0aW9uKSAoaW50ZXJmYWNle30sIGVycm9yKSB7CgkJaWYgbyA9PSBQZXJzaXN0T3BlcmF0aW9uIHsKCQkJcmV0dXJuIHRpbWUuTm93KCksIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiB2LCBuaWwKCQl9Cgl9KSh2YWx1ZSwgb3ApCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "GenerateUUID",
            "Comment": "Generates a V4 UUID value if the existing value is empty.",
            "Arguments": [
                {
                    "Name": "value",
                    "Type": "interface{}"
                },
                {
                    "Name": "_",
                    "Type": "FieldOperation"
                }
            ],
            "Returns": [
                {
                    "Type": "interface{}"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "GenerateUUID(value interface{}, _ FieldOperation) (interface{}, error)",
            "Source": "ewoJaWYgcmVjb3JkLCBvayA6PSB2YWx1ZS4oKlJlY29yZCk7IG9rIHsKCQl2YWx1ZSA9IHJlY29yZC5JRAoJfQoJaWYgdHlwZXV0aWwuSXNaZXJvKHZhbHVlKSB7CgkJdmFsdWUgPSBzdHJpbmd1dGlsLlVVSUQoKS5TdHJpbmcoKQoJfQoJcmV0dXJuIHZhbHVlLCBuaWwKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "GetValidator",
            "Comment": "Retrieve a validator by name.  Used by the ValidatorConfig configuration on Field.",
            "Arguments": [
                {
                    "Name": "name",
                    "Type": "string"
                },
                {
                    "Name": "args",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "FieldValidatorFunc"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "GetValidator(name string, args interface{}) (FieldValidatorFunc, error)",
            "Source": "ewoJc3dpdGNoIG5hbWUgewoJY2FzZSBgb25lLW9mYDoKCQlpZiB0eXBldXRpbC5Jc0FycmF5KGFyZ3MpIHsKCQkJcmV0dXJuIFZhbGlkYXRlSXNPbmVPZihzbGljZXV0aWwuU2xpY2VpZnkoYXJncykuLi4pLCBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJNdXN0IHNwZWNpZnkgYW4gYXJyYXkgb2YgdmFsdWVzIGZvciB2YWxpZGF0b3IgJ29uZS1vZiciKQoJCX0KCWNhc2UgYG5vdC16ZXJvYDoKCQlyZXR1cm4gVmFsaWRhdGVOb25aZXJvLCBuaWwKCWNhc2UgYG5vdC1lbXB0eWA6CgkJcmV0dXJuIFZhbGlkYXRlTm90RW1wdHksIG5pbAoJY2FzZSBgcG9zaXRpdmUtaW50ZWdlcmA6CgkJcmV0dXJuIFZhbGlkYXRlUG9zaXRpdmVJbnRlZ2VyLCBuaWwKCWNhc2UgYHBvc2l0aXZlLW9yLXplcm8taW50ZWdlcmA6CgkJcmV0dXJuIFZhbGlkYXRlUG9zaXRpdmVPclplcm9JbnRlZ2VyLCBuaWwKCWNhc2UgYHVybGA6CgkJcmV0dXJuIFZhbGlkYXRlSXNVUkwsIG5pbAoJY2FzZSBgbWF0Y2hgLCBgbWF0Y2gtYWxsYDoKCQlpZiB0eXBldXRpbC5Jc0FycmF5KGFyZ3MpIHsKCQkJcmV0dXJuIFZhbGlkYXRlTWF0Y2hBbGwoc2xpY2V1dGlsLlN0cmluZ2lmeShhcmdzKS4uLiksIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIk11c3Qgc3BlY2lmeSBhbiBhcnJheSBvZiB2YWx1ZXMgZm9yIHZhbGlkYXRvciAnbWF0Y2gnIikKCQl9CgljYXNlIGBtYXRjaC1hbnlgOgoJCWlmIHR5cGV1dGlsLklzQXJyYXkoYXJncykgewoJCQlyZXR1cm4gVmFsaWRhdGVNYXRjaEFueShzbGljZXV0aWwuU3RyaW5naWZ5KGFyZ3MpLi4uKSwgbmlsCgkJfSBlbHNlIHsKCQkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiTXVzdCBzcGVjaWZ5IGFuIGFycmF5IG9mIHZhbHVlcyBmb3IgdmFsaWRhdG9yICdtYXRjaC1hbnknIikKCQl9CglkZWZhdWx0OgoJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIlVua25vd24gdmFsaWRhdG9yICVxIiwgbmFtZSkKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "IsCollectionNotFoundErr",
            "Arguments": [
                {
                    "Name": "err",
                    "Type": "error"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "IsCollectionNotFoundErr(err error) bool",
            "Source": "ewoJcmV0dXJuIChlcnIgPT0gQ29sbGVjdGlvbk5vdEZvdW5kKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "IsExistError",
            "Arguments": [
                {
                    "Name": "err",
                    "Type": "error"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "IsExistError(err error) bool",
            "Source": "ewoJaWYgZXJyID09IG5pbCB7CgkJcmV0dXJuIGZhbHNlCgl9CglyZXR1cm4gc3RyaW5ncy5IYXNTdWZmaXgoZXJyLkVycm9yKCksIGAgYWxyZWFkeSBleGlzdHNgKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "IsFieldNotFoundErr",
            "Arguments": [
                {
                    "Name": "err",
                    "Type": "error"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "IsFieldNotFoundErr(err error) bool",
            "Source": "ewoJcmV0dXJuIChlcnIgPT0gRmllbGROb3RGb3VuZCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "IsNotExistError",
            "Arguments": [
                {
                    "Name": "err",
                    "Type": "error"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "IsNotExistError(err error) bool",
            "Source": "ewoJaWYgZXJyID09IG5pbCB7CgkJcmV0dXJuIGZhbHNlCgl9CglyZXR1cm4gc3RyaW5ncy5IYXNTdWZmaXgoZXJyLkVycm9yKCksIGAgZG9lcyBub3QgZXhpc3RgKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ShouldCreateCollection",
            "Comment": "Takes a collection definition and any errors encountered while retrieving it, and determines\nwhether a CreateCollection() call should be made.",
            "Arguments": [
                {
                    "Name": "collection",
                    "Type": "*Collection"
                },
                {
                    "Name": "errs",
                    "Type": "...error"
                }
            ],
            "Returns": [
                {
                    "Type": "bool"
                }
            ],
            "Signature": "ShouldCreateCollection(collection *Collection, errs ...error) bool",
            "Source": "ewoJaWYgY29sbGVjdGlvbiAhPSBuaWwgewoJCWlmIGNvbGxlY3Rpb24uQWx3YXlzQ3JlYXRlIHsKCQkJcmV0dXJuIHRydWUKCQl9Cgl9Cglmb3IgXywgZXJyIDo9IHJhbmdlIGVycnMgewoJCWlmIElzQ29sbGVjdGlvbk5vdEZvdW5kRXJyKGVycikgewoJCQlyZXR1cm4gdHJ1ZQoJCX0KCX0KCXJldHVybiBmYWxzZQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TrimSpace",
            "Arguments": [
                {
                    "Name": "value",
                    "Type": "interface{}"
                },
                {
                    "Name": "_",
                    "Type": "FieldOperation"
                }
            ],
            "Returns": [
                {
                    "Type": "interface{}"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "TrimSpace(value interface{}, _ FieldOperation) (interface{}, error)",
            "Source": "ewoJaWYgcmVjb3JkLCBvayA6PSB2YWx1ZS4oKlJlY29yZCk7IG9rIHsKCQl2YWx1ZSA9IHJlY29yZC5JRAoJfQoJaWYgdlN0ciwgZXJyIDo9IHN0cmluZ3V0aWwuVG9TdHJpbmcodmFsdWUpOyBlcnIgPT0gbmlsIHsKCQlyZXR1cm4gc3RyaW5ncy5UcmltU3BhY2UodlN0ciksIG5pbAoJfSBlbHNlIHsKCQlyZXR1cm4gdmFsdWUsIGVycgoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ValidateAll",
            "Comment": "Validate that all of the given validator functions pass.",
            "Arguments": [
                {
                    "Name": "validators",
                    "Type": "...FieldValidatorFunc"
                }
            ],
            "Returns": [
                {
                    "Type": "FieldValidatorFunc"
                }
            ],
            "Signature": "ValidateAll(validators ...FieldValidatorFunc) FieldValidatorFunc",
            "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30pIGVycm9yIHsKCQlmb3IgXywgdmFsaWRhdG9yIDo9IHJhbmdlIHZhbGlkYXRvcnMgewoJCQlpZiBlcnIgOj0gdmFsaWRhdG9yKHZhbHVlKTsgZXJyICE9IG5pbCB7CgkJCQlyZXR1cm4gZXJyCgkJCX0KCQl9CgkJcmV0dXJuIG5pbAoJfQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ValidateIsOneOf",
            "Comment": "Validate that the given value is among the given choices.",
            "Arguments": [
                {
                    "Name": "choices",
                    "Type": "...interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "FieldValidatorFunc"
                }
            ],
            "Signature": "ValidateIsOneOf(choices ...interface{}) FieldValidatorFunc",
            "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30pIGVycm9yIHsKCQlmb3IgXywgY2hvaWNlIDo9IHJhbmdlIGNob2ljZXMgewoJCQlpZiBvaywgZXJyIDo9IHN0cmluZ3V0aWwuUmVsYXhlZEVxdWFsKGNob2ljZSwgdmFsdWUpOyBlcnIgPT0gbmlsICYmIG9rIHsKCQkJCXJldHVybiBuaWwKCQkJfQoJCX0KCQlyZXR1cm4gZm10LkVycm9yZigidmFsdWUgbXVzdCBiZSBvbmUgb2Y6ICUrdiIsIGNob2ljZXMpCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ValidateIsURL",
            "Comment": "Validate that the value is a URL with a non-empty scheme and host component.",
            "Arguments": [
                {
                    "Name": "value",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "ValidateIsURL(value interface{}) error",
            "Source": "ewoJaWYgdSwgZXJyIDo9IHVybC5QYXJzZSh0eXBldXRpbC5TdHJpbmcodmFsdWUpKTsgZXJyID09IG5pbCB7CgkJaWYgdS5TY2hlbWUgPT0gYGAgfHwgdS5Ib3N0ID09IGBgIHx8IHUuUGF0aCA9PSBgYCB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJJbnZhbGlkIFVSTCIpCgkJfQoJfSBlbHNlIHsKCQlyZXR1cm4gZXJyCgl9CglyZXR1cm4gbmlsCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ValidateMatchAll",
            "Comment": "Validate that the given value matches all of the given regular expressions.",
            "Arguments": [
                {
                    "Name": "patterns",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "FieldValidatorFunc"
                }
            ],
            "Signature": "ValidateMatchAll(patterns ...string) FieldValidatorFunc",
            "Source": "ewoJcHJ4IDo9IG1ha2UoW10qcmVnZXhwLlJlZ2V4cCwgbGVuKHBhdHRlcm5zKSkKCWZvciBpLCByeHMgOj0gcmFuZ2UgcGF0dGVybnMgewoJCXByeFtpXSA9IHJlZ2V4cC5NdXN0Q29tcGlsZShyeHMpCgl9CglyZXR1cm4gZnVuYyh2YWx1ZSBpbnRlcmZhY2V7fSkgZXJyb3IgewoJCWZvciBfLCByeCA6PSByYW5nZSBwcnggewoJCQlpZiAhcnguTWF0Y2hTdHJpbmcodHlwZXV0aWwuU3RyaW5nKHZhbHVlKSkgewoJCQkJcmV0dXJuIGZtdC5FcnJvcmYoIlZhbHVlIGRvZXMgbm90IG1hdGNoIHBhdHRlcm4gJXEiLCByeC5TdHJpbmcoKSkKCQkJfQoJCX0KCQlyZXR1cm4gbmlsCgl9Cn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ValidateMatchAny",
            "Comment": "Validate that the given value matches at least one of the given regular expressions.",
            "Arguments": [
                {
                    "Name": "patterns",
                    "Type": "...string"
                }
            ],
            "Returns": [
                {
                    "Type": "FieldValidatorFunc"
                }
            ],
            "Signature": "ValidateMatchAny(patterns ...string) FieldValidatorFunc",
            "Source": "ewoJcHJ4IDo9IG1ha2UoW10qcmVnZXhwLlJlZ2V4cCwgbGVuKHBhdHRlcm5zKSkKCWZvciBpLCByeHMgOj0gcmFuZ2UgcGF0dGVybnMgewoJCXByeFtpXSA9IHJlZ2V4cC5NdXN0Q29tcGlsZShyeHMpCgl9CglyZXR1cm4gZnVuYyh2YWx1ZSBpbnRlcmZhY2V7fSkgZXJyb3IgewoJCWZvciBfLCByeCA6PSByYW5nZSBwcnggewoJCQlpZiByeC5NYXRjaFN0cmluZyh0eXBldXRpbC5TdHJpbmcodmFsdWUpKSB7CgkJCQlyZXR1cm4gbmlsCgkJCX0KCQl9CgkJcmV0dXJuIGZtdC5FcnJvcmYoIlZhbHVlIGRvZXMgbm90IG1hdGNoIGFueSB2YWxpZCBwYXR0ZXJuIikKCX0KfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "ValidateNonZero",
            "Comment": "Validate that the given value is not a zero value (false, 0, 0.0, \"\", null).",
            "Arguments": [
                {
                    "Name": "value",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "ValidateNonZero(value interface{}) error",
            "Source": "ewoJaWYgdHlwZXV0aWwuSXNaZXJvKHZhbHVlKSB7CgkJcmV0dXJuIGZtdC5FcnJvcmYoImV4cGVjdGVkIG5vbi16ZXJvIHZhbHVlLCBnb3Q6ICV2IiwgdmFsdWUpCgl9CglyZXR1cm4gbmlsCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "ValidateNotEmpty",
            "Comment": "Validate that the given value is not a zero value, and if it's a string, that the string\ndoes not contain only whitespace.",
            "Arguments": [
                {
                    "Name": "value",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "ValidateNotEmpty(value interface{}) error",
            "Source": "ewoJaWYgdHlwZXV0aWwuSXNFbXB0eSh2YWx1ZSkgewoJCXJldHVybiBmbXQuRXJyb3JmKCJleHBlY3RlZCBub24tZW1wdHkgdmFsdWUsIGdvdDogJXYiLCB2YWx1ZSkKCX0KCXJldHVybiBuaWwKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "ValidatePositiveInteger",
            "Comment": "Validate that the given value is an integer \u003e 0.",
            "Arguments": [
                {
                    "Name": "value",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "ValidatePositiveInteger(value interface{}) error",
            "Source": "ewoJaWYgdiwgZXJyIDo9IHN0cmluZ3V0aWwuQ29udmVydFRvSW50ZWdlcih2YWx1ZSk7IGVyciA9PSBuaWwgewoJCWlmIHYgPD0gMCB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJleHBlY3RlZCB2YWx1ZSA+IDAsIGdvdDogJXYiLCB2KQoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIGVycgoJfQoJcmV0dXJuIG5pbAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ValidatePositiveOrZeroInteger",
            "Comment": "Validate that the given value is an integer \u003e= 0.",
            "Arguments": [
                {
                    "Name": "value",
                    "Type": "interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "error"
                }
            ],
            "Signature": "ValidatePositiveOrZeroInteger(value interface{}) error",
            "Source": "ewoJaWYgdiwgZXJyIDo9IHN0cmluZ3V0aWwuQ29udmVydFRvSW50ZWdlcih2YWx1ZSk7IGVyciA9PSBuaWwgewoJCWlmIHYgPCAwIHsKCQkJcmV0dXJuIGZtdC5FcnJvcmYoImV4cGVjdGVkIHZhbHVlID49IDAsIGdvdDogJXYiLCB2KQoJCX0KCX0gZWxzZSB7CgkJcmV0dXJuIGVycgoJfQoJcmV0dXJuIG5pbAp9",
            "IsPackageLevel": true
        },
        {
            "Name": "ValidatorFromMap",
            "Comment": "Retrieve a validator by name.  Used by the ValidatorConfig configuration on Field.",
            "Arguments": [
                {
                    "Name": "in",
                    "Type": "map[string]interface{}"
                }
            ],
            "Returns": [
                {
                    "Type": "FieldValidatorFunc"
                },
                {
                    "Type": "error"
                }
            ],
            "Signature": "ValidatorFromMap(in map[string]interface{}) (FieldValidatorFunc, error)",
            "Source": "ewoJdmFsaWRhdG9ycyA6PSBtYWtlKFtdRmllbGRWYWxpZGF0b3JGdW5jLCAwKQoJZm9yIG5hbWUsIGRlZm4gOj0gcmFuZ2UgaW4gewoJCWlmIHZhbGlkYXRvciwgZXJyIDo9IEdldFZhbGlkYXRvcihuYW1lLCBkZWZuKTsgZXJyID09IG5pbCB7CgkJCXZhbGlkYXRvcnMgPSBhcHBlbmQodmFsaWRhdG9ycywgdmFsaWRhdG9yKQoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkludmFsaWQgdmFsaWRhdG9yIGNvbmZpZ3VyYXRpb24gJXY6ICV2IiwgbmFtZSwgZXJyKQoJCX0KCX0KCXJldHVybiBWYWxpZGF0ZUFsbCh2YWxpZGF0b3JzLi4uKSwgbmlsCn0=",
            "IsPackageLevel": true
        }
    ],
    "Tests": [
        {
            "Name": "TestCollectionExtractValueFromRelationship",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCollectionExtractValueFromRelationship(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglncm91cHMgOj0gTmV3Q29sbGVjdGlvbihgVGVzdENvbGxlY3Rpb25FeHRyYWN0VmFsdWVGcm9tUmVsYXRpb25zaGlwR3JvdXBzYCwgRmllbGR7TmFtZTogYG5hbWVgLCBUeXBlOiBTdHJpbmdUeXBlfSkKCXVzZXJzIDo9IE5ld0NvbGxlY3Rpb24oYFRlc3RDb2xsZWN0aW9uRXh0cmFjdFZhbHVlRnJvbVJlbGF0aW9uc2hpcFVzZXJzYCwgRmllbGR7TmFtZTogYG5hbWVgLCBUeXBlOiBTdHJpbmdUeXBlfSwgRmllbGR7TmFtZTogYGdyb3VwX2lkYCwgVHlwZTogSW50VHlwZSwgQmVsb25nc1RvOiBncm91cHN9LCBGaWVsZHtOYW1lOiBgYWdlYCwgVHlwZTogSW50VHlwZX0pCgliYWNrZW5kIDo9IG5ldyhudWxsQmFja2VuZCkKCWJhY2tlbmQuUmVnaXN0ZXJDb2xsZWN0aW9uKHVzZXJzKQoJYmFja2VuZC5SZWdpc3RlckNvbGxlY3Rpb24oZ3JvdXBzKQoJZiwgb2sgOj0gdXNlcnMuR2V0RmllbGQoYGdyb3VwX2lkYCkKCWFzc2VydC5UcnVlKG9rKQoJa2V5cywgZXJyIDo9IHVzZXJzLmV4dHJhY3RWYWx1ZUZyb21SZWxhdGlvbnNoaXAoJmYsICZ0ZXN0R3JvdXB7SUQ6IDU0MzJ9LCBQZXJzaXN0T3BlcmF0aW9uKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDU0MzIsIGtleXMpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCollectionIsExpired",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCollectionIsExpired(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0Q29sbGVjdGlvbklzRXhwaXJlZGAsIElkZW50aXR5RmllbGRUeXBlOiBTdHJpbmdUeXBlLCBUaW1lVG9MaXZlRmllbGQ6IGB0dGxgfQoJYXNzZXJ0LkZhbHNlKGNvbGxlY3Rpb24uSXNFeHBpcmVkKE5ld1JlY29yZChgdGVzdDFgKSkpCglhc3NlcnQuRmFsc2UoY29sbGVjdGlvbi5Jc0V4cGlyZWQoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgbmlsKSkpCglhc3NlcnQuRmFsc2UoY29sbGVjdGlvbi5Jc0V4cGlyZWQoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgMCkpKQoJYXNzZXJ0LkZhbHNlKGNvbGxlY3Rpb24uSXNFeHBpcmVkKE5ld1JlY29yZChgdGVzdDFgKS5TZXQoYHR0bGAsIGBgKSkpCglhc3NlcnQuRmFsc2UoY29sbGVjdGlvbi5Jc0V4cGlyZWQoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgZmFsc2UpKSkKCWFzc2VydC5GYWxzZShjb2xsZWN0aW9uLklzRXhwaXJlZChOZXdSZWNvcmQoYHRlc3QxYCkuU2V0KGB0dGxgLCB0aW1lLk5vdygpLkFkZCh0aW1lLlNlY29uZCkpKSkKCWFzc2VydC5GYWxzZShjb2xsZWN0aW9uLklzRXhwaXJlZChOZXdSZWNvcmQoYHRlc3QxYCkuU2V0KGB0dGxgLCB0aW1lLk5vdygpLlVuaXgoKSs2MCkpKQoJYXNzZXJ0LlRydWUoY29sbGVjdGlvbi5Jc0V4cGlyZWQoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgdGltZS5Ob3coKS5BZGQoLTEqdGltZS5OYW5vc2Vjb25kKSkpKQoJYXNzZXJ0LlRydWUoY29sbGVjdGlvbi5Jc0V4cGlyZWQoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgdGltZS5Ob3coKS5Vbml4KCktNjApKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCollectionMapFromRecord",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCollectionMapFromRecord(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9IE5ld0NvbGxlY3Rpb24oYFRlc3RDb2xsZWN0aW9uU3RydWN0VG9SZWNvcmRgKQoJY29sbGVjdGlvbi5JZGVudGl0eUZpZWxkRm9ybWF0dGVyID0gZnVuYyhpZCBpbnRlcmZhY2V7fSwgb3AgRmllbGRPcGVyYXRpb24pIChpbnRlcmZhY2V7fSwgZXJyb3IpIHsKCQlpZiByZWNvcmQsIG9rIDo9IGlkLigqUmVjb3JkKTsgb2sgewoJCQlpZCA9IHJlY29yZC5JRAoJCX0KCQlyZXR1cm4gZm10LlNwcmludGYoIklEPCV2PiIsIGlkKSwgbmlsCgl9Cgljb2xsZWN0aW9uLkFkZEZpZWxkcyhbXUZpZWxke3tOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGV9LCB7TmFtZTogYGVuYWJsZWRgLCBUeXBlOiBCb29sZWFuVHlwZSwgRGVmYXVsdFZhbHVlOiB0cnVlfSwge05hbWU6IGBhZ2VgLCBUeXBlOiBJbnRUeXBlfX0uLi4pCglydiwgZXJyIDo9IGNvbGxlY3Rpb24uTWFwRnJvbVJlY29yZChOZXdSZWNvcmQoYHRlc3RgKS5TZXQoYG5hbWVgLCBgdGVzdGVyYCkuU2V0KGBhZ2VgLCA0MikpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWxWYWx1ZXMobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgaWRgOiBgSUQ8dGVzdD5gLCBgbmFtZWA6IGB0ZXN0ZXJgLCBgZW5hYmxlZGA6IHRydWUsIGBhZ2VgOiA0Mn0sIHJ2KQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCollectionStructToRecord",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCollectionStructToRecord(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9IE5ld0NvbGxlY3Rpb24oYFRlc3RDb2xsZWN0aW9uU3RydWN0VG9SZWNvcmRgKQoJY29sbGVjdGlvbi5BZGRGaWVsZHMoW11GaWVsZHt7TmFtZTogYG5hbWVgLCBUeXBlOiBTdHJpbmdUeXBlfSwge05hbWU6IGBlbmFibGVkYCwgVHlwZTogQm9vbGVhblR5cGV9LCB7TmFtZTogYGFnZWAsIFR5cGU6IEludFR5cGV9fS4uLikKCXR5cGUgVGVzdFJlY29yZCBzdHJ1Y3QgewoJCU5hbWUgICAgICBzdHJpbmcgYHBpdm90OiJuYW1lImAKCQlFbmFibGVkICAgYm9vbCAgIGBwaXZvdDoiZW5hYmxlZCxvbWl0ZW1wdHkiYAoJCUFjdHVhbEFnZSBpbnQgICAgYHBpdm90OiJhZ2UiYAoJCUFnZSAgICAgICBpbnQKCX0KCXRlc3RSZWNvcmQgOj0gVGVzdFJlY29yZHtOYW1lOiBgdGVzdGVyYCwgQWN0dWFsQWdlOiA0Mn0KCXJlY29yZCwgZXJyIDo9IGNvbGxlY3Rpb24uU3RydWN0VG9SZWNvcmQoJnRlc3RSZWNvcmQpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuTm90TmlsKHJlY29yZCkKCWFzc2VydC5OaWwocmVjb3JkLklEKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKGB0ZXN0ZXJgLCByZWNvcmQuR2V0KGBuYW1lYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoNDIsIHJlY29yZC5HZXQoYGFnZWApKQoJdHlwZSBUZXN0UmVjb3JkMiBzdHJ1Y3QgewoJCUlEICAgICAgICBpbnQKCQlOYW1lICAgICAgc3RyaW5nIGBwaXZvdDoibmFtZSJgCgkJRW5hYmxlZCAgIGJvb2wgICBgcGl2b3Q6ImVuYWJsZWQsb21pdGVtcHR5ImAKCQlBY3R1YWxBZ2UgaW50ICAgIGBwaXZvdDoiYWdlImAKCQlBZ2UgICAgICAgaW50Cgl9Cgl0ZXN0UmVjb3JkMiA6PSBUZXN0UmVjb3JkMntJRDogMTEsIE5hbWU6IGB0ZXN0ZXJgfQoJcmVjb3JkLCBlcnIgPSBjb2xsZWN0aW9uLlN0cnVjdFRvUmVjb3JkKCZ0ZXN0UmVjb3JkMikKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5Ob3ROaWwocmVjb3JkKQoJYXNzZXJ0LkVxdWFsKDMsIGxlbihyZWNvcmQuRmllbGRzKSkKCWFzc2VydC5FcXVhbCgxMSwgcmVjb3JkLklEKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0ZXJgLCByZWNvcmQuR2V0KGBuYW1lYCkpCglhc3NlcnQuRXF1YWwoZmFsc2UsIHJlY29yZC5HZXQoYGVuYWJsZWRgKSkKCWFzc2VydC5FcXVhbFZhbHVlcygwLCByZWNvcmQuR2V0KGBhZ2VgKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCollectionStructToRecordRelated",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCollectionStructToRecordRelated(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglncm91cHMgOj0gTmV3Q29sbGVjdGlvbihgVGVzdENvbGxlY3Rpb25TdHJ1Y3RUb1JlY29yZEdyb3Vwc2AsIEZpZWxke05hbWU6IGBuYW1lYCwgVHlwZTogU3RyaW5nVHlwZX0pCgl1c2VycyA6PSBOZXdDb2xsZWN0aW9uKGBUZXN0Q29sbGVjdGlvblN0cnVjdFRvUmVjb3JkVXNlcnNgLCBGaWVsZHtOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGV9LCBGaWVsZHtOYW1lOiBgZ3JvdXBfaWRgLCBUeXBlOiBJbnRUeXBlLCBCZWxvbmdzVG86IGdyb3Vwc30sIEZpZWxke05hbWU6IGBhZ2VgLCBUeXBlOiBJbnRUeXBlfSkKCWJhY2tlbmQgOj0gbmV3KG51bGxCYWNrZW5kKQoJYmFja2VuZC5SZWdpc3RlckNvbGxlY3Rpb24odXNlcnMpCgliYWNrZW5kLlJlZ2lzdGVyQ29sbGVjdGlvbihncm91cHMpCglyZWNvcmQsIGVyciA6PSB1c2Vycy5TdHJ1Y3RUb1JlY29yZCgmdGVzdFVzZXJ7TmFtZTogYHRlc3RlcmAsIEdyb3VwOiAmdGVzdEdyb3Vwe0lEOiA1NDMyfSwgQWdlOiA0Mn0pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuTm90TmlsKHJlY29yZCkKCWFzc2VydC5aZXJvKHJlY29yZC5JRCkKCWFzc2VydC5FcXVhbChgdGVzdGVyYCwgcmVjb3JkLkdldChgbmFtZWApKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDU0MzIsIHJlY29yZC5HZXQoYGdyb3VwX2lkYCkpCglhc3NlcnQuRXF1YWxWYWx1ZXMoNDIsIHJlY29yZC5HZXQoYGFnZWApKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCollectionTTLField",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCollectionTTLField(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0Q29sbGVjdGlvblRUTEZpZWxkYCwgSWRlbnRpdHlGaWVsZFR5cGU6IFN0cmluZ1R5cGUsIFRpbWVUb0xpdmVGaWVsZDogYHR0bGB9Cglhc3NlcnQuWmVybyhjb2xsZWN0aW9uLlRUTChOZXdSZWNvcmQoYHRlc3QxYCkpKQoJYXNzZXJ0Llplcm8oY29sbGVjdGlvbi5UVEwoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgbmlsKSkpCglhc3NlcnQuWmVybyhjb2xsZWN0aW9uLlRUTChOZXdSZWNvcmQoYHRlc3QxYCkuU2V0KGB0dGxgLCAwKSkpCglhc3NlcnQuWmVybyhjb2xsZWN0aW9uLlRUTChOZXdSZWNvcmQoYHRlc3QxYCkuU2V0KGB0dGxgLCBgYCkpKQoJYXNzZXJ0Llplcm8oY29sbGVjdGlvbi5UVEwoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgZmFsc2UpKSkKCWFzc2VydC5Ob3RaZXJvKGNvbGxlY3Rpb24uVFRMKE5ld1JlY29yZChgdGVzdDFgKS5TZXQoYHR0bGAsIHRpbWUuTm93KCkuQWRkKHRpbWUuU2Vjb25kKSkpKQoJYXNzZXJ0Lk5vdFplcm8oY29sbGVjdGlvbi5UVEwoTmV3UmVjb3JkKGB0ZXN0MWApLlNldChgdHRsYCwgdGltZS5Ob3coKS5Vbml4KCkrNjApKSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestCollectionValidator",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestCollectionValidator(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0Q29sbGVjdGlvblZhbGlkYXRvcmAsIElkZW50aXR5RmllbGRUeXBlOiBTdHJpbmdUeXBlLCBQcmVTYXZlVmFsaWRhdG9yOiBmdW5jKHJlY29yZCAqUmVjb3JkKSBlcnJvciB7CgkJaWYgZm10LlNwcmludGYoIiV2IiwgcmVjb3JkLklEKSA9PSBgdHdvYCB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJJRCBjYW5ub3QgYmUgJ3R3bycgZm9yIHJlYXNvbnMiKQoJCX0KCQlyZXR1cm4gbmlsCgl9fQoJYXNzZXJ0Lk5vRXJyb3IoY29sbGVjdGlvbi5WYWxpZGF0ZVJlY29yZChOZXdSZWNvcmQoYG9uZWApLCBQZXJzaXN0T3BlcmF0aW9uKSkKCWFzc2VydC5FcnJvcihjb2xsZWN0aW9uLlZhbGlkYXRlUmVjb3JkKE5ld1JlY29yZChgdHdvYCksIFBlcnNpc3RPcGVyYXRpb24pKQoJYXNzZXJ0Lk5vRXJyb3IoY29sbGVjdGlvbi5WYWxpZGF0ZVJlY29yZChOZXdSZWNvcmQoYHRocmVlYCksIFBlcnNpc3RPcGVyYXRpb24pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFieldConvertValueArray",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFieldConvertValueArray(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IEFycmF5VHlwZX0KCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoW11pbnRlcmZhY2V7fXt9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKG1ha2UoW11pbnRlcmZhY2V7fSwgMCksIHZhbHVlKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuTmlsKHZhbHVlKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShbXWludGVyZmFjZXt9ezEsIDIsIDN9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317MSwgMiwgM30sIHZhbHVlKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShbXXN0cmluZ3tgMWAsIGAyYCwgYDNgfSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2AxYCwgYDJgLCBgM2B9LCB2YWx1ZSkKCWZpZWxkLlJlcXVpcmVkID0gdHJ1ZQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShbXWludGVyZmFjZXt9e30pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwobWFrZShbXWludGVyZmFjZXt9LCAwKSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYWtlKFtdaW50ZXJmYWNle30sIDApLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoW11ib29se3RydWUsIHRydWUsIGZhbHNlfSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e3RydWUsIHRydWUsIGZhbHNlfSwgdmFsdWUpCglmaWVsZC5EZWZhdWx0VmFsdWUgPSBbXXN0cmluZ3tgYWAsIGBiYCwgYGNgfQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXtgYWAsIGBiYCwgYGNgfSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2BhYCwgYGJgLCBgY2B9LCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoW11pbnQ2NHs5LCA4LCA3fSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2ludDY0KDkpLCBpbnQ2NCg4KSwgaW50NjQoNyl9LCB2YWx1ZSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFieldConvertValueBool",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFieldConvertValueBool(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IEJvb2xlYW5UeXBlfQoJZm9yIF8sIHYgOj0gcmFuZ2UgW11pbnRlcmZhY2V7fXt0cnVlLCBgdHJ1ZWAsIGBUcnVlYCwgYFRSVUVgLCBgeWVzYCwgYG9uYCwgYFlFU2AsIGBPTmAsIDEsIC00LCAzLjE0LCA0MiwgYGRlbm5pc2B9IHsKCQl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKHYpCgkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCWFzc2VydC5FcXVhbCh0cnVlLCB2YWx1ZSwgZm10LlNwcmludGYoIm91dHB1dDogJVQoJXYpIC0+ICVUKCV2KSIsIHYsIHYsIHZhbHVlLCB2YWx1ZSkpCgl9Cglmb3IgXywgdiA6PSByYW5nZSBbXWludGVyZmFjZXt9e2ZhbHNlLCBgZmFsc2VgLCBgRmFsc2VgLCBgRkFMU0VgLCBgbm9gLCBgb2ZmYCwgYE5PYCwgYE9GRmAsIDB9IHsKCQl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKHYpCgkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCWFzc2VydC5FcXVhbChmYWxzZSwgdmFsdWUsIGZtdC5TcHJpbnRmKCJvdXRwdXQ6ICVUKCV2KSAtPiAlVCgldikiLCB2LCB2LCB2YWx1ZSwgdmFsdWUpKQoJfQoJZmllbGQuUmVxdWlyZWQgPSB0cnVlCglmb3IgXywgdiA6PSByYW5nZSBbXWludGVyZmFjZXt9e3RydWUsIGB0cnVlYCwgYFRydWVgLCBgVFJVRWAsIGB5ZXNgLCBgb25gLCBgWUVTYCwgYE9OYCwgMSwgLTQsIDMuMTQsIDQyLCBgZGVubmlzYH0gewoJCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUodikKCQlhc3NlcnQuTm9FcnJvcihlcnIpCgkJYXNzZXJ0LkVxdWFsKHRydWUsIHZhbHVlLCBmbXQuU3ByaW50Zigib3V0cHV0OiAlVCgldikgLT4gJVQoJXYpIiwgdiwgdiwgdmFsdWUsIHZhbHVlKSkKCX0KCWZvciBfLCB2IDo9IHJhbmdlIFtdaW50ZXJmYWNle317ZmFsc2UsIGBmYWxzZWAsIGBGYWxzZWAsIGBGQUxTRWAsIGBub2AsIGBvZmZgLCBgTk9gLCBgT0ZGYCwgbmlsLCAwfSB7CgkJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZSh2KQoJCWFzc2VydC5Ob0Vycm9yKGVycikKCQlhc3NlcnQuRXF1YWwoZmFsc2UsIHZhbHVlLCBmbXQuU3ByaW50Zigib3V0cHV0OiAlVCgldikgLT4gJVQoJXYpIiwgdiwgdiwgdmFsdWUsIHZhbHVlKSkKCX0KCWZpZWxkLkRlZmF1bHRWYWx1ZSA9IHRydWUKCWZvciBfLCB2IDo9IHJhbmdlIFtdaW50ZXJmYWNle317dHJ1ZSwgYHRydWVgLCBgVHJ1ZWAsIGBUUlVFYCwgYHllc2AsIGBvbmAsIGBZRVNgLCBgT05gLCAxLCAtNCwgMy4xNCwgNDIsIGBkZW5uaXNgfSB7CgkJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZSh2KQoJCWFzc2VydC5Ob0Vycm9yKGVycikKCQlhc3NlcnQuRXF1YWwodHJ1ZSwgdmFsdWUsIGZtdC5TcHJpbnRmKCJvdXRwdXQ6ICVUKCV2KSAtPiAlVCgldikiLCB2LCB2LCB2YWx1ZSwgdmFsdWUpKQoJfQoJZm9yIF8sIHYgOj0gcmFuZ2UgW11pbnRlcmZhY2V7fXtmYWxzZSwgYGZhbHNlYCwgYEZhbHNlYCwgYEZBTFNFYCwgYG5vYCwgYG9mZmAsIGBOT2AsIGBPRkZgLCBuaWwsIDB9IHsKCQl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKHYpCgkJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJCWFzc2VydC5FcXVhbCh0cnVlLCB2YWx1ZSwgZm10LlNwcmludGYoIm91dHB1dDogJVQoJXYpIC0+ICVUKCV2KSIsIHYsIHYsIHZhbHVlLCB2YWx1ZSkpCgl9Cgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbCh0cnVlLCB2YWx1ZSwgZm10LlNwcmludGYoIm91dHB1dDogbmlsIC0+ICVUKCV2KSIsIHZhbHVlLCB2YWx1ZSkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFieldConvertValueFloat",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFieldConvertValueFloat(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IEZsb2F0VHlwZX0KCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYGApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWxWYWx1ZXMoZmxvYXQ2NCgwKSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChmbG9hdDY0KDApLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYDMuMTQxNTk3YCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChmbG9hdDY0KDMuMTQxNTk3KSwgdmFsdWUpCglmaWVsZC5SZXF1aXJlZCA9IHRydWUKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYGApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgwKSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChmbG9hdDY0KDApLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYDIuNzE4MjhgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoMi43MTgyOCksIHZhbHVlKQoJZmllbGQuRGVmYXVsdFZhbHVlID0gaW50MzIoNjkpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKGBgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoNjkpLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGZsb2F0NjQoNjkpLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoMC4wMDAwMDAwMDAwMDEpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoZmxvYXQ2NCgwLjAwMDAwMDAwMDAwMSksIHZhbHVlKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFieldConvertValueInteger",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFieldConvertValueInteger(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IEludFR5cGV9Cgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKGBgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKGludDY0KDApLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGludDY0KDApLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYDEyMzRgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGludDY0KDEyMzQpLCB2YWx1ZSkKCWZpZWxkLlJlcXVpcmVkID0gdHJ1ZQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShgYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChpbnQ2NCgwKSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChpbnQ2NCgwKSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKGA5ODc2YCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChpbnQ2NCg5ODc2KSwgdmFsdWUpCglmaWVsZC5EZWZhdWx0VmFsdWUgPSBpbnQzMig2OSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYGApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoaW50NjQoNjkpLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGludDY0KDY5KSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKDQyKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGludDY0KDQyKSwgdmFsdWUpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFieldConvertValueObject",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFieldConvertValueObject(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IE9iamVjdFR5cGV9Cgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG1hcFtzdHJpbmddaW50ZXJmYWNle317fSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbFZhbHVlcyhtYWtlKG1hcFtzdHJpbmddaW50ZXJmYWNle30pLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0Lk5pbCh2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgdmFsdWVgOiAxMjN9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddaW50ZXJmYWNle317YHZhbHVlYDogMTIzfSwgdmFsdWUpCgl0eXBlIGZpZWxkQ29udmVydFN0cnVjdCBzdHJ1Y3QgewoJCU5hbWUgIHN0cmluZwoJCVZhbHVlIGludAoJfQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShmaWVsZENvbnZlcnRTdHJ1Y3R7TmFtZTogYHRlc3RgLCBWYWx1ZTogMTIzfSkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BOYW1lYDogYHRlc3RgLCBgVmFsdWVgOiBmbG9hdDY0KDEyMyl9LCB2YWx1ZSkKCWZpZWxkLlJlcXVpcmVkID0gdHJ1ZQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShtYXBbc3RyaW5nXWludGVyZmFjZXt9e30pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwobWFrZShtYXBbc3RyaW5nXWludGVyZmFjZXt9KSwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYWtlKG1hcFtzdHJpbmddaW50ZXJmYWNle30pLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgdmFsdWVgOiA0NTZ9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddaW50ZXJmYWNle317YHZhbHVlYDogNDU2fSwgdmFsdWUpCglmaWVsZC5EZWZhdWx0VmFsdWUgPSBtYXBbc3RyaW5nXXN0cmluZ3tgdmFsdWVgOiBgeWF5YCwgYG90aGVyYDogYDEyMzQuNWB9Cgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWludGVyZmFjZXt9e2B2YWx1ZWA6IGB5YXlgLCBgb3RoZXJgOiBgMTIzNC41YH0sIHZhbHVlKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgdmFsdWVgOiBgeWF5YCwgYG90aGVyYDogYDEyMzQuNWB9LCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgdmFsdWVgOiBgb2hoaGB9KQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKG1hcFtzdHJpbmddaW50ZXJmYWNle317YHZhbHVlYDogYG9oaGhgfSwgdmFsdWUpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFieldConvertValueString",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFieldConvertValueString(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IFN0cmluZ1R5cGV9Cgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKGBgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0Lk5pbCh2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0Lk5pbCh2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYHRoaW5nc2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYHRoaW5nc2AsIHZhbHVlKQoJZmllbGQuUmVxdWlyZWQgPSB0cnVlCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKGBgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBgLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGBgLCB2YWx1ZSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYHRoaW5nc2ApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYHRoaW5nc2AsIHZhbHVlKQoJZmllbGQuRGVmYXVsdFZhbHVlID0gYHRlc3RgCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKGBgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0YCwgdmFsdWUpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgdGVzdGAsIHZhbHVlKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShgdGhpbmdzYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgdGhpbmdzYCwgdmFsdWUpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFieldConvertValueTime",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFieldConvertValueTime(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgZmllbGQgKkZpZWxkCgl2YXIgdmFsdWUgaW50ZXJmYWNle30KCXZhciBlcnIgZXJyb3IKCWZpZWxkID0gJkZpZWxke1R5cGU6IFRpbWVUeXBlfQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShgYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKHZhbHVlLih0aW1lLlRpbWUpLklzWmVybygpKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZSh2YWx1ZS4odGltZS5UaW1lKS5Jc1plcm8oKSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYDIwMDYtMDEtMDJUMTU6MDQ6MDUtMDc6MDBgKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LlRydWUodXRpbHMuUmVmZXJlbmNlVGltZS5FcXVhbCh2YWx1ZS4odGltZS5UaW1lKSkpCglmaWVsZC5SZXF1aXJlZCA9IHRydWUKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoYGApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZSh2YWx1ZS4odGltZS5UaW1lKS5Jc1plcm8oKSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUobmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LlRydWUodmFsdWUuKHRpbWUuVGltZSkuSXNaZXJvKCkpCgl2YWx1ZSwgZXJyID0gZmllbGQuQ29udmVydFZhbHVlKDExMzYyMzk0NDUpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZSh1dGlscy5SZWZlcmVuY2VUaW1lLkVxdWFsKHZhbHVlLih0aW1lLlRpbWUpKSkKCWZpZWxkLkRlZmF1bHRWYWx1ZSA9IHRpbWUuVW5peCgxMTM2MjM5NDQ1LCAwKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShgYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKHV0aWxzLlJlZmVyZW5jZVRpbWUuRXF1YWwodmFsdWUuKHRpbWUuVGltZSkpKQoJdmFsdWUsIGVyciA9IGZpZWxkLkNvbnZlcnRWYWx1ZShuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuVHJ1ZSh1dGlscy5SZWZlcmVuY2VUaW1lLkVxdWFsKHZhbHVlLih0aW1lLlRpbWUpKSkKCXZhbHVlLCBlcnIgPSBmaWVsZC5Db252ZXJ0VmFsdWUoMTUwMDAwMDAwMCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5UcnVlKHRpbWUuRGF0ZSgyMDE3LCA3LCAxNCwgMiwgNDAsIDAsIDAsIHRpbWUuVVRDKS5FcXVhbCh2YWx1ZS4odGltZS5UaW1lKSkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestFieldValidators",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestFieldValidators(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmaWVsZDEgOj0gRmllbGR7TmFtZTogYGZpZWxkMWAsIFZhbGlkYXRvcjogZnVuYyh2IGludGVyZmFjZXt9KSBlcnJvciB7CgkJaWYgZm10LlNwcmludGYoIiV2IiwgdikgPT0gYHRlc3RgIHsKCQkJcmV0dXJuIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBmbXQuRXJyb3JmKCJWYWx1ZSBpcyBub3QgJ3Rlc3QnIikKCQl9Cgl9fQoJYXNzZXJ0Lk5pbChmaWVsZDEuVmFsaWRhdGUoYHRlc3RgKSkKCWFzc2VydC5FcnJvcihmaWVsZDEuVmFsaWRhdGUoYG5vdC10ZXN0YCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestGetIdentityFieldNameFromStruct",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestGetIdentityFieldNameFromStruct(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglmIDo9IFRlc3RSZWNvcmR7SUQ6IDEyMzR9CglmaWVsZCwga2V5LCBlcnIgOj0gZ2V0SWRlbnRpdHlGaWVsZE5hbWVGcm9tU3RydWN0KCZmLCBgYCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgSURgLCBrZXkpCglhc3NlcnQuRXF1YWwoYElEYCwga2V5KQoJZiA9IFRlc3RSZWNvcmR7fQoJZmllbGQsIGtleSwgZXJyID0gZ2V0SWRlbnRpdHlGaWVsZE5hbWVGcm9tU3RydWN0KCZmLCBgU2l6ZWApCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYFNpemVgLCBmaWVsZCkKCWFzc2VydC5FcXVhbChgU2l6ZWAsIGtleSkKCWYyIDo9IFRlc3RSZWNvcmRUd297YDQyYH0KCWZpZWxkLCBrZXksIGVyciA9IGdldElkZW50aXR5RmllbGROYW1lRnJvbVN0cnVjdCgmZjIsIGBgKQoJYXNzZXJ0LkVxdWFsKGBVVUlEYCwgZmllbGQpCglhc3NlcnQuRXF1YWwoYHV1aWRgLCBrZXkpCglmMyA6PSBUZXN0UmVjb3JkVGhyZWV7fQoJZmllbGQsIGtleSwgZXJyID0gZ2V0SWRlbnRpdHlGaWVsZE5hbWVGcm9tU3RydWN0KCZmMywgYGApCglhc3NlcnQuRXJyb3IoZXJyKQoJZjQgOj0gVGVzdFJlY29yZFRocmVle30KCWZpZWxkLCBrZXksIGVyciA9IGdldElkZW50aXR5RmllbGROYW1lRnJvbVN0cnVjdCgmZjQsIGBVVUlEYCkKCWFzc2VydC5FcXVhbChgVVVJRGAsIGZpZWxkKQoJYXNzZXJ0LkVxdWFsKGBVVUlEYCwga2V5KQoJZjUgOj0gVGVzdFJlY29yZEVtYmVkZGVke30KCWY1LlVVSUQgPSBgNDJgCglmNS5VVUlEID0gYDQyYAoJZjUuSUQgPSA0MgoJZjUuTmFtZSA9IGBGb3VydHkgVHdvYAoJZjUuU2l6ZSA9IDQyCglmNS5Mb2NhbCA9IHRydWUKCWZpZWxkLCBrZXksIGVyciA9IGdldElkZW50aXR5RmllbGROYW1lRnJvbVN0cnVjdCgmZjUsIGBgKQoJYXNzZXJ0LkVxdWFsKGBVVUlEYCwgZmllbGQpCglhc3NlcnQuRXF1YWwoYHV1aWRgLCBrZXkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRecordAppend",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRecordAppend(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglyZWNvcmQgOj0gTmV3UmVjb3JkKGAyYCkuQXBwZW5kKGBmaXJzdGAsIDEpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXsxfSwgcmVjb3JkLkdldChgZmlyc3RgKSkKCXJlY29yZCA9IE5ld1JlY29yZChgMmFgKS5TZXQoYHNlY29uZGAsIDQpCglhc3NlcnQuRXF1YWwoNCwgcmVjb3JkLkdldChgc2Vjb25kYCkpCglyZWNvcmQuQXBwZW5kKGBzZWNvbmRgLCA1KQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317NCwgNX0sIHJlY29yZC5HZXQoYHNlY29uZGApKQoJcmVjb3JkID0gTmV3UmVjb3JkKGAyYmApLlNldChgdGhpcmRgLCBbXXN0cmluZ3tgNmAsIGA3YH0pCglyZWNvcmQuQXBwZW5kKGB0aGlyZGAsIDgpCglhc3NlcnQuRXF1YWwoW11pbnRlcmZhY2V7fXtgNmAsIGA3YCwgOH0sIHJlY29yZC5HZXQoYHRoaXJkYCkpCglyZWNvcmQgPSBOZXdSZWNvcmQoYDJjYCkuU2V0KGBmb3VydGhgLCBbXWludGVyZmFjZXt9e2A2YCwgYDdgfSkKCXJlY29yZC5BcHBlbmQoYGZvdXJ0aGAsIDgpCglyZWNvcmQuQXBwZW5kKGBmb3VydGhgLCA5KQoJcmVjb3JkLkFwcGVuZChgZm91cnRoYCwgYDEwYCkKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9e2A2YCwgYDdgLCA4LCA5LCBgMTBgfSwgcmVjb3JkLkdldChgZm91cnRoYCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRecordAppendNested",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRecordAppendNested(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglyZWNvcmQgOj0gTmV3UmVjb3JkKGAyYCkuQXBwZW5kTmVzdGVkKGB0LmZpcnN0YCwgMSkKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9ezF9LCByZWNvcmQuR2V0KGB0LmZpcnN0YCkpCglyZWNvcmQgPSBOZXdSZWNvcmQoYDJhYCkuU2V0TmVzdGVkKGB0LnNlY29uZGAsIDQpCglhc3NlcnQuRXF1YWwoNCwgcmVjb3JkLkdldChgdC5zZWNvbmRgKSkKCXJlY29yZC5BcHBlbmQoYHQuc2Vjb25kYCwgNSkKCWFzc2VydC5FcXVhbChbXWludGVyZmFjZXt9ezQsIDV9LCByZWNvcmQuR2V0KGB0LnNlY29uZGApKQoJcmVjb3JkID0gTmV3UmVjb3JkKGAyYmApLlNldE5lc3RlZChgdC50aGlyZGAsIFtdc3RyaW5ne2A2YCwgYDdgfSkKCXJlY29yZC5BcHBlbmQoYHQudGhpcmRgLCA4KQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317YDZgLCBgN2AsIDh9LCByZWNvcmQuR2V0KGB0LnRoaXJkYCkpCglyZWNvcmQgPSBOZXdSZWNvcmQoYDJjYCkuU2V0TmVzdGVkKGB0LmZvdXJ0aGAsIFtdaW50ZXJmYWNle317YDZgLCBgN2B9KQoJcmVjb3JkLkFwcGVuZE5lc3RlZChgdC5mb3VydGhgLCA4KQoJcmVjb3JkLkFwcGVuZE5lc3RlZChgdC5mb3VydGhgLCA5KQoJcmVjb3JkLkFwcGVuZE5lc3RlZChgdC5mb3VydGhgLCBgMTBgKQoJYXNzZXJ0LkVxdWFsKFtdaW50ZXJmYWNle317YDZgLCBgN2AsIDgsIDksIGAxMGB9LCByZWNvcmQuR2V0KGB0LmZvdXJ0aGApKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRecordConvertRecordValueToStructValue",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRecordConvertRecordValueToStructValue(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglncm91cHMgOj0gTmV3Q29sbGVjdGlvbihgVGVzdFJlY29yZFBvcHVsYXRlU3RydWN0V2l0aFJlbGF0ZWRTdHJ1Y3RHcm91cHNgLCBGaWVsZHtOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGV9KQoJdXNlcnMgOj0gTmV3Q29sbGVjdGlvbihgVGVzdFJlY29yZFBvcHVsYXRlU3RydWN0V2l0aFJlbGF0ZWRTdHJ1Y3RVc2Vyc2AsIEZpZWxke05hbWU6IGBuYW1lYCwgVHlwZTogU3RyaW5nVHlwZX0sIEZpZWxke05hbWU6IGBncm91cF9pZGAsIFR5cGU6IEludFR5cGUsIEJlbG9uZ3NUbzogZ3JvdXBzfSwgRmllbGR7TmFtZTogYGFnZWAsIFR5cGU6IEludFR5cGV9KQoJYmFja2VuZCA6PSBuZXcobnVsbEJhY2tlbmQpCgliYWNrZW5kLlJlZ2lzdGVyQ29sbGVjdGlvbih1c2VycykKCWJhY2tlbmQuUmVnaXN0ZXJDb2xsZWN0aW9uKGdyb3VwcykKCXJlY29yZCA6PSBOZXdSZWNvcmQobmlsKQoJYWN0dWFsIDo9IG5ldyh0ZXN0VXNlcikKCXJlc3VsdCwgZXJyIDo9IHJlY29yZC5jb252ZXJ0UmVjb3JkVmFsdWVUb1N0cnVjdFZhbHVlKHVzZXJzLCBgZ3JvdXBfaWRgLCA4Njc1LCBhY3R1YWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoJnRlc3RHcm91cHtJRDogODY3NX0sIHJlc3VsdCkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRecordGet",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRecordGet(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglyZWNvcmQgOj0gTmV3UmVjb3JkKGAxYCkuU2V0KGB0aGlzLmlzLmEudGVzdGAsIHRydWUpCglyZWNvcmQuU2V0TmVzdGVkKGB0aGlzLmlzLmEudGVzdGAsIGBjb3JyZWN0YCkKCWFzc2VydC5FcXVhbChgMWAsIHJlY29yZC5JRCkKCWFzc2VydC5FcXVhbChtYXBbc3RyaW5nXWludGVyZmFjZXt9e2B0aGlzLmlzLmEudGVzdGA6IHRydWUsIGB0aGlzYDogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgaXNgOiBtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BhYDogbWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgdGVzdGA6IGBjb3JyZWN0YH19fX0sIHJlY29yZC5GaWVsZHMpCglhc3NlcnQuRXF1YWwoYGNvcnJlY3RgLCByZWNvcmQuR2V0TmVzdGVkKGB0aGlzLmlzLmEudGVzdGApKQoJYXNzZXJ0LkVxdWFsKHRydWUsIHJlY29yZC5HZXQoYHRoaXMuaXMuYS50ZXN0YCkpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRecordKeys",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRecordKeys(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0UmVjb3JkS2V5c2AsIEZpZWxkczogW11GaWVsZHt7TmFtZTogYG90aGVyYCwgVHlwZTogU3RyaW5nVHlwZSwgS2V5OiB0cnVlfSwge05hbWU6IGB0aGluZ2AsIFR5cGU6IFN0cmluZ1R5cGV9fX0KCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9ezEsIGBmaXJzdGB9LCBOZXdSZWNvcmQoW11pbnRlcmZhY2V7fXsxLCBgZmlyc3RgfSkuS2V5cyhjb2xsZWN0aW9uKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9ezIsIGBzZWNvbmRgfSwgTmV3UmVjb3JkKFtdaW50ZXJmYWNle317Mn0pLlNldChgb3RoZXJgLCBgc2Vjb25kYCkuS2V5cyhjb2xsZWN0aW9uKSkKCWFzc2VydC5FcXVhbFZhbHVlcyhbXWludGVyZmFjZXt9ezJ9LCBOZXdSZWNvcmQoW11pbnRlcmZhY2V7fXsyfSkuS2V5cyhjb2xsZWN0aW9uKSkKCWFzc2VydC5FbXB0eShOZXdSZWNvcmQobmlsKS5LZXlzKGNvbGxlY3Rpb24pKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRecordPopulateStruct",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRecordPopulateStruct(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl0eXBlIHRlc3RUaGluZyBzdHJ1Y3QgewoJCUlEICAgIGludAoJCU5hbWUgIHN0cmluZyBgcGl2b3Q6Im5hbWUiYAoJCUdyb3VwIHN0cmluZyBgcGl2b3Q6Ikdyb3VwLG9taXRlbXB0eSJgCgkJU2l6ZSAgaW50Cgl9Cgl0aGluZyA6PSB0ZXN0VGhpbmd7fQoJcmVjb3JkIDo9IE5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgdGVzdC1uYW1lYCkuU2V0KGBTaXplYCwgNDIpCgllcnIgOj0gcmVjb3JkLlBvcHVsYXRlKCZ0aGluZywgbmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0LW5hbWVgLCB0aGluZy5OYW1lKQoJYXNzZXJ0Llplcm8odGhpbmcuR3JvdXApCglhc3NlcnQuRXF1YWwoNDIsIHRoaW5nLlNpemUpCgl0aGluZyA9IHRlc3RUaGluZ3tHcm91cDogYHRlc3RzYH0KCXJlY29yZCA9IE5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgdGVzdC1uYW1lYCkuU2V0KGBTaXplYCwgNDIpCgllcnIgPSByZWNvcmQuUG9wdWxhdGUoJnRoaW5nLCBuaWwpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYHRlc3QtbmFtZWAsIHRoaW5nLk5hbWUpCglhc3NlcnQuRXF1YWwoYHRlc3RzYCwgdGhpbmcuR3JvdXApCglhc3NlcnQuRXF1YWwoNDIsIHRoaW5nLlNpemUpCgl0eXBlIEtWIHN0cnVjdCB7CgkJS2V5ICAgc3RyaW5nICAgICAgYHBpdm90OiJrZXksaWRlbnRpdHkiYAoJCVZhbHVlIGludGVyZmFjZXt9IGBwaXZvdDoidmFsdWUsb21pdGVtcHR5ImAKCX0KCXJlY29yZCA9IE5ld1JlY29yZChgdGhpcy5pcy5hbi5pZGApLlNldChgdmFsdWVgLCA0MikKCWt2IDo9IG5ldyhLVikKCWVyciA9IHJlY29yZC5Qb3B1bGF0ZShrdiwgbmlsKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGB0aGlzLmlzLmFuLmlkYCwga3YuS2V5KQoJYXNzZXJ0LkVxdWFsKDQyLCBrdi5WYWx1ZSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRecordPopulateStructWithEmbeddedStruct",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRecordPopulateStructWithEmbeddedStruct(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgYWN0dWFsIHRlc3RVc2VyRW1iZWQKCXZhciBlcnIgZXJyb3IKCXJlY29yZCA6PSBOZXdSZWNvcmQoYDU1NWApCglyZWNvcmQuU2V0KGBuYW1lYCwgYFRlc3QgRW1iZWRgKQoJcmVjb3JkLlNldChgYWdlYCwgNjkpCglyZWNvcmQuU2V0KGBhY3RpdmVgLCB0cnVlKQoJZXJyID0gcmVjb3JkLlBvcHVsYXRlKCZhY3R1YWwsIG5pbCkKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbCgwLCBhY3R1YWwuSUQpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRecordPopulateStructWithFormatter",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRecordPopulateStructWithFormatter(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0UmVjb3JkUG9wdWxhdGVTdHJ1Y3RXaXRoRm9ybWF0dGVyYCwgRmllbGRzOiBbXUZpZWxke3tOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGUsIEZvcm1hdHRlcjogZnVuYyh2IGludGVyZmFjZXt9LCBvcCBGaWVsZE9wZXJhdGlvbikgKGludGVyZmFjZXt9LCBlcnJvcikgewoJCXJldHVybiBzdHJpbmd1dGlsLlVuZGVyc2NvcmUoZm10LlNwcmludGYoIiV2IiwgdikpLCBuaWwKCX19fX0KCXR5cGUgdGVzdFRoaW5nIHN0cnVjdCB7CgkJSUQgICAgaW50CgkJTmFtZSAgc3RyaW5nIGBwaXZvdDoibmFtZSJgCgkJR3JvdXAgc3RyaW5nIGBwaXZvdDoiR3JvdXAsb21pdGVtcHR5ImAKCQlTaXplICBpbnQKCX0KCXRoaW5nIDo9IHRlc3RUaGluZ3t9CglyZWNvcmQgOj0gTmV3UmVjb3JkKDEpLlNldChgbmFtZWAsIGBUZXN0TmFtZWApLlNldChgU2l6ZWAsIDQyKQoJZXJyIDo9IHJlY29yZC5Qb3B1bGF0ZSgmdGhpbmcsIGNvbGxlY3Rpb24pCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwoYHRlc3RfbmFtZWAsIHRoaW5nLk5hbWUpCglhc3NlcnQuWmVybyh0aGluZy5Hcm91cCkKCWFzc2VydC5aZXJvKHRoaW5nLlNpemUpCgl0aGluZyA9IHRlc3RUaGluZ3tOYW1lOiBgQm9vYmVycnlgLCBHcm91cDogYHRlc3RzYH0KCXJlY29yZCA9IE5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgdGVzdC1uYW1lYCkuU2V0KGBTaXplYCwgNDIpCgllcnIgPSByZWNvcmQuUG9wdWxhdGUoJnRoaW5nLCBjb2xsZWN0aW9uKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0X25hbWVgLCB0aGluZy5OYW1lKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0c2AsIHRoaW5nLkdyb3VwKQoJYXNzZXJ0Llplcm8odGhpbmcuU2l6ZSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRecordPopulateStructWithFormatterValidator",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRecordPopulateStructWithFormatterValidator(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0UmVjb3JkUG9wdWxhdGVTdHJ1Y3RXaXRoRm9ybWF0dGVyVmFsaWRhdG9yYCwgRmllbGRzOiBbXUZpZWxke3tOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGUsIFZhbGlkYXRvcjogZnVuYyh2IGludGVyZmFjZXt9KSBlcnJvciB7CgkJaWYgZm10LlNwcmludGYoIiV2IiwgdikgPT0gYFRlc3RWYWx1ZWAgewoJCQlyZXR1cm4gZm10LkVycm9yZigiU2hvdWxkbid0IGJlIFRlc3RWYWx1ZSIpCgkJfQoJCXJldHVybiBuaWwKCX0sIEZvcm1hdHRlcjogZnVuYyh2IGludGVyZmFjZXt9LCBvcCBGaWVsZE9wZXJhdGlvbikgKGludGVyZmFjZXt9LCBlcnJvcikgewoJCXJldHVybiBzdHJpbmd1dGlsLlVuZGVyc2NvcmUoZm10LlNwcmludGYoIiV2IiwgdikpLCBuaWwKCX19fX0KCXR5cGUgdGVzdFRoaW5nIHN0cnVjdCB7CgkJSUQgICAgaW50CgkJTmFtZSAgc3RyaW5nIGBwaXZvdDoibmFtZSJgCgkJR3JvdXAgc3RyaW5nIGBwaXZvdDoiR3JvdXAsb21pdGVtcHR5ImAKCQlTaXplICBpbnQKCX0KCXRoaW5nIDo9IHRlc3RUaGluZ3t9CglyZWNvcmQgOj0gTmV3UmVjb3JkKDEpLlNldChgbmFtZWAsIGBUZXN0VmFsdWVgKS5TZXQoYFNpemVgLCA0MikKCWVyciA6PSByZWNvcmQuUG9wdWxhdGUoJnRoaW5nLCBjb2xsZWN0aW9uKQoJYXNzZXJ0Lk5vRXJyb3IoZXJyKQoJYXNzZXJ0LkVxdWFsKGB0ZXN0X3ZhbHVlYCwgdGhpbmcuTmFtZSkKfQ==",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRecordPopulateStructWithRelatedStruct",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRecordPopulateStructWithRelatedStruct(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgl2YXIgYWN0dWFsIHRlc3RVc2VyCgl2YXIgZXJyIGVycm9yCgl3YW50ZWQgOj0gJnRlc3RVc2Vye0lEOiA1NTUsIE5hbWU6IGBUZXN0IFVzZXJgLCBBZ2U6IDIyLCBHcm91cDogJnRlc3RHcm91cHtJRDogODc2NX19CglyZWNvcmQgOj0gTmV3UmVjb3JkKDU1NSkKCXJlY29yZC5TZXQoYG5hbWVgLCBgVGVzdCBVc2VyYCkKCXJlY29yZC5TZXQoYGFnZWAsIDIyKQoJcmVjb3JkLlNldChgZ3JvdXBfaWRgLCA4NzY1KQoJZ3JvdXBzIDo9IE5ld0NvbGxlY3Rpb24oYFRlc3RSZWNvcmRQb3B1bGF0ZVN0cnVjdFdpdGhSZWxhdGVkU3RydWN0R3JvdXBzYCwgRmllbGR7TmFtZTogYG5hbWVgLCBUeXBlOiBTdHJpbmdUeXBlfSkKCXVzZXJzIDo9IE5ld0NvbGxlY3Rpb24oYFRlc3RSZWNvcmRQb3B1bGF0ZVN0cnVjdFdpdGhSZWxhdGVkU3RydWN0VXNlcnNgLCBGaWVsZHtOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGV9LCBGaWVsZHtOYW1lOiBgZ3JvdXBfaWRgLCBUeXBlOiBJbnRUeXBlLCBCZWxvbmdzVG86IGdyb3Vwc30sIEZpZWxke05hbWU6IGBhZ2VgLCBUeXBlOiBJbnRUeXBlfSkKCWJhY2tlbmQgOj0gbmV3KG51bGxCYWNrZW5kKQoJYmFja2VuZC5SZWdpc3RlckNvbGxlY3Rpb24odXNlcnMpCgliYWNrZW5kLlJlZ2lzdGVyQ29sbGVjdGlvbihncm91cHMpCgllcnIgPSByZWNvcmQuUG9wdWxhdGUoJmFjdHVhbCwgdXNlcnMpCglhc3NlcnQuTm9FcnJvcihlcnIpCglhc3NlcnQuRXF1YWwod2FudGVkLklELCBhY3R1YWwuSUQpCglhc3NlcnQuRXF1YWwod2FudGVkLk5hbWUsIGFjdHVhbC5OYW1lKQoJYXNzZXJ0LkVxdWFsKHdhbnRlZC5BZ2UsIGFjdHVhbC5BZ2UpCglhc3NlcnQuRXF1YWwod2FudGVkLkdyb3VwLklELCBhY3R1YWwuR3JvdXAuSUQpCglhc3NlcnQuRXF1YWwod2FudGVkLkdyb3VwLk5hbWUsIGFjdHVhbC5Hcm91cC5OYW1lKQp9",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRecordPopulateStructWithValidator",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRecordPopulateStructWithValidator(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0UmVjb3JkUG9wdWxhdGVTdHJ1Y3RXaXRoVmFsaWRhdG9yYCwgRmllbGRzOiBbXUZpZWxke3tOYW1lOiBgbmFtZWAsIFR5cGU6IFN0cmluZ1R5cGUsIFZhbGlkYXRvcjogZnVuYyh2IGludGVyZmFjZXt9KSBlcnJvciB7CgkJaWYgZm10LlNwcmludGYoIiV2IiwgdikgPT0gYHRlc3RgIHsKCQkJcmV0dXJuIGZtdC5FcnJvcmYoIlNob3VsZG4ndCBiZSB0ZXN0IikKCQl9CgkJcmV0dXJuIG5pbAoJfSwgVmFsaWRhdGVPblBvcHVsYXRlOiB0cnVlfX19Cgl0eXBlIHRlc3RUaGluZyBzdHJ1Y3QgewoJCUlEICAgIGludAoJCU5hbWUgIHN0cmluZyBgcGl2b3Q6Im5hbWUiYAoJCUdyb3VwIHN0cmluZyBgcGl2b3Q6Ikdyb3VwLG9taXRlbXB0eSJgCgkJU2l6ZSAgaW50Cgl9Cgl0aGluZyA6PSB0ZXN0VGhpbmd7fQoJcmVjb3JkIDo9IE5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgdGVzdGApLlNldChgU2l6ZWAsIDQyKQoJYXNzZXJ0LkVycm9yKHJlY29yZC5Qb3B1bGF0ZSgmdGhpbmcsIGNvbGxlY3Rpb24pKQoJY29sbGVjdGlvbi5GaWVsZHNbMF0uVmFsaWRhdGVPblBvcHVsYXRlID0gZmFsc2UKCWFzc2VydC5OaWwocmVjb3JkLlBvcHVsYXRlKCZ0aGluZywgY29sbGVjdGlvbikpCgljb2xsZWN0aW9uLkZpZWxkc1swXS5WYWxpZGF0ZU9uUG9wdWxhdGUgPSB0cnVlCgl0aGluZyA9IHRlc3RUaGluZ3tOYW1lOiBgQm9vYmVycnlgLCBHcm91cDogYHRlc3RzYH0KCXJlY29yZCA9IE5ld1JlY29yZCgxKS5TZXQoYG5hbWVgLCBgdGVzdC1uYW1lYCkuU2V0KGBTaXplYCwgNDIpCgllcnIgOj0gcmVjb3JkLlBvcHVsYXRlKCZ0aGluZywgY29sbGVjdGlvbikKCWFzc2VydC5Ob0Vycm9yKGVycikKCWFzc2VydC5FcXVhbChgdGVzdC1uYW1lYCwgdGhpbmcuTmFtZSkKCWFzc2VydC5FcXVhbChgdGVzdHNgLCB0aGluZy5Hcm91cCkKCWFzc2VydC5aZXJvKHRoaW5nLlNpemUpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRecordSet",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRecordSet(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCglkZW1vIDo9ICZDb2xsZWN0aW9ue0ZpZWxkczogW11GaWVsZHt7TmFtZTogYG5hbWVgLCBUeXBlOiBTdHJpbmdUeXBlfSwge05hbWU6IGBmYWN0b3JgLCBUeXBlOiBGbG9hdFR5cGUsIFJlcXVpcmVkOiB0cnVlLCBEZWZhdWx0VmFsdWU6IDAuMn0sIHtOYW1lOiBgY3JlYXRlZF9hdGAsIFR5cGU6IFRpbWVUeXBlLCBSZXF1aXJlZDogdHJ1ZSwgRGVmYXVsdFZhbHVlOiBmdW5jKCkgaW50ZXJmYWNle30gewoJCXJldHVybiBkZWZ0aW1lCgl9fX19CglyZWNvcmRzZXQgOj0gTmV3UmVjb3JkU2V0KE5ld1JlY29yZCgxKS5TZXRGaWVsZHMobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgbmFtZWA6IGBGaXJzdGAsIGBmYWN0b3JgOiAwLjEsIGBjcmVhdGVkX2F0YDogbmlsfSksIE5ld1JlY29yZCgzKS5TZXRGaWVsZHMobWFwW3N0cmluZ11pbnRlcmZhY2V7fXtgbmFtZWA6IGBTZWNvbmRgLCBgZmFjdG9yYDogbmlsLCBgY3JlYXRlZF9hdGA6IG90aHRpbWV9KSwgTmV3UmVjb3JkKDUpLlNldEZpZWxkcyhtYXBbc3RyaW5nXWludGVyZmFjZXt9e2BuYW1lYDogYFRoaXJkYCwgYGZhY3RvcmA6IDAuMywgYGNyZWF0ZWRfYXRgOiBuaWx9KSkKCWRlc3QgOj0gbWFrZShbXSp0ZXN0UmVjb3JkU2V0UmVjb3JkRGVzdCwgMCkKCWFzc2VydC5Ob0Vycm9yKHJlY29yZHNldC5Qb3B1bGF0ZUZyb21SZWNvcmRzKCZkZXN0LCBkZW1vKSkKCWFzc2VydC5MZW4oZGVzdCwgMykKCWFzc2VydC5FcXVhbCgxLCBkZXN0WzBdLklEKQoJYXNzZXJ0LkVxdWFsKGBGaXJzdGAsIGRlc3RbMF0uTmFtZSkKCWFzc2VydC5FcXVhbCgwLjEsIGRlc3RbMF0uRmFjdG9yKQoJYXNzZXJ0LkVxdWFsKGRlZnRpbWUsIGRlc3RbMF0uQ3JlYXRlZEF0KQoJYXNzZXJ0LkVxdWFsKDMsIGRlc3RbMV0uSUQpCglhc3NlcnQuRXF1YWwoYFNlY29uZGAsIGRlc3RbMV0uTmFtZSkKCWFzc2VydC5FcXVhbCgwLjIsIGRlc3RbMV0uRmFjdG9yKQoJYXNzZXJ0LkVxdWFsKG90aHRpbWUsIGRlc3RbMV0uQ3JlYXRlZEF0KQoJYXNzZXJ0LkVxdWFsKDUsIGRlc3RbMl0uSUQpCglhc3NlcnQuRXF1YWwoYFRoaXJkYCwgZGVzdFsyXS5OYW1lKQoJYXNzZXJ0LkVxdWFsKDAuMywgZGVzdFsyXS5GYWN0b3IpCglhc3NlcnQuRXF1YWwoZGVmdGltZSwgZGVzdFsyXS5DcmVhdGVkQXQpCn0=",
            "IsPackageLevel": true
        },
        {
            "Name": "TestRecordSetKeys",
            "Arguments": [
                {
                    "Name": "t",
                    "Type": "*testing.T"
                }
            ],
            "Signature": "TestRecordSetKeys(t *testing.T)",
            "Source": "ewoJYXNzZXJ0IDo9IHJlcXVpcmUuTmV3KHQpCgljb2xsZWN0aW9uIDo9ICZDb2xsZWN0aW9ue05hbWU6IGBUZXN0UmVjb3JkS2V5c2AsIEZpZWxkczogW11GaWVsZHt7TmFtZTogYG90aGVyYCwgVHlwZTogU3RyaW5nVHlwZSwgS2V5OiB0cnVlfSwge05hbWU6IGB0aGluZ2AsIFR5cGU6IFN0cmluZ1R5cGV9fX0KCXJlY29yZCA6PSBOZXdSZWNvcmQobmlsKQoJcmVjb3JkLlNldEtleXMoY29sbGVjdGlvbiwgUGVyc2lzdE9wZXJhdGlvbiwgMSwgYGZpcnN0YCkKCWFzc2VydC5FcXVhbFZhbHVlcygxLCByZWNvcmQuSUQpCglhc3NlcnQuRXF1YWxWYWx1ZXMoYGZpcnN0YCwgcmVjb3JkLkdldChgb3RoZXJgKSkKCXJlY29yZCA9IE5ld1JlY29yZChuaWwpCglyZWNvcmQuU2V0S2V5cyhjb2xsZWN0aW9uLCBQZXJzaXN0T3BlcmF0aW9uLCAxKQoJYXNzZXJ0LkVxdWFsVmFsdWVzKDEsIHJlY29yZC5JRCkKCWFzc2VydC5OaWwocmVjb3JkLkdldChgb3RoZXJgKSkKCXJlY29yZCA9IE5ld1JlY29yZChuaWwpCglyZWNvcmQuU2V0S2V5cyhjb2xsZWN0aW9uLCBQZXJzaXN0T3BlcmF0aW9uKQoJYXNzZXJ0Lk5pbChyZWNvcmQuSUQpCglhc3NlcnQuTmlsKHJlY29yZC5HZXQoYG90aGVyYCkpCn0=",
            "IsPackageLevel": true
        }
    ],
    "Types": {
        "Backend": {
            "Name": "Backend",
            "Source": "dHlwZSBCYWNrZW5kIGludGVyZmFjZSB7CglHZXRDb2xsZWN0aW9uKGNvbGxlY3Rpb24gc3RyaW5nKSAoKkNvbGxlY3Rpb24sIGVycm9yKQp9"
        },
        "Collection": {
            "Name": "Collection",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "AddFields",
                    "Comment": "Append a field definition to this collection.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fields",
                            "Type": "...Field"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Collection"
                        }
                    ],
                    "Signature": "AddFields(fields ...Field) *Collection",
                    "IsPackageLevel": false
                },
                {
                    "Name": "ApplyDefinition",
                    "Comment": "Copies certain collection and field properties from the definition object into this collection\ninstance.  This is useful for collections that are created by parsing the schema as it exists on\nthe remote datastore, which will have some but not all of the information we need to work with the\ndata.  Definition collections are the authoritative source for things like what the default value\nshould be, and which validators and formatters apply to a given field.\n\nThis function converts this instance into a Collection definition by copying the relevant values\nfrom given definition.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "definition",
                            "Type": "*Collection"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "ApplyDefinition(definition *Collection) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Check",
                    "Comment": "Verifies that the schema passes some basic sanity checks.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Check() error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "ConvertValue",
                    "Comment": "Convert a given value according to the data type of a specific named field.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        },
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "interface{}"
                        }
                    ],
                    "Signature": "ConvertValue(name string, value interface{}) interface{}",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Diff",
                    "Comment": "Determine the differences (if any) between this Collection definition and another.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "actual",
                            "Type": "*Collection"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "[]*SchemaDelta"
                        }
                    ],
                    "Signature": "Diff(actual *Collection) []*SchemaDelta",
                    "IsPackageLevel": false
                },
                {
                    "Name": "EmptyRecord",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "*Record"
                        }
                    ],
                    "Signature": "EmptyRecord() *Record",
                    "IsPackageLevel": false
                },
                {
                    "Name": "FillDefaults",
                    "Comment": "Populate a given Record with the default values (if any) of all fields in the Collection.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "record",
                            "Type": "*Record"
                        }
                    ],
                    "Signature": "FillDefaults(record *Record)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetAggregatorName",
                    "Comment": "Get the canonical name of the dataset in an external aggregator service.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "GetAggregatorName() string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetAllConstraints",
                    "Comment": "Retrieve the set of all Constraints on this collection, both explicitly provided\nvia the Constraints field, as well as constraints specified using the \"BelongsTo\"\nshorthand on Fields.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Name": "constraints",
                            "Type": "[]Constraint"
                        }
                    ],
                    "Signature": "GetAllConstraints() constraints []Constraint",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetField",
                    "Comment": "Retrieve a single field by name.  The second return value will be false if the field does not\nexist.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "Field"
                        },
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "GetField(name string) (Field, bool)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetFieldByIndex",
                    "Comment": "Retrieve a single field by its index value. The second return value will be false if a field\nat that index does not exist.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "index",
                            "Type": "int"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "Field"
                        },
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "GetFieldByIndex(index int) (Field, bool)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetFirstNonIdentityKeyField",
                    "Comment": "Retrieve the first non-indentity key field, sometimes referred to as the \"range\", \"sort\", or \"cluster\" key.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "Field"
                        },
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "GetFirstNonIdentityKeyField() (Field, bool)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetIdentityFieldName",
                    "Comment": "Get the canonical name of the primary identity field.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "GetIdentityFieldName() string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetIndexName",
                    "Comment": "Get the canonical name of the external index name.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "GetIndexName() string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetRelatedCollection",
                    "Comment": "Retrieves a Collection by name from the backend this Collection is registered to.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Collection"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "GetRelatedCollection(name string) (*Collection, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "HasRecordType",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "HasRecordType() bool",
                    "IsPackageLevel": false
                },
                {
                    "Name": "IsExpired",
                    "Comment": "Expired records are those whose TTL duration is non-zero and negative.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "record",
                            "Type": "*Record"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "IsExpired(record *Record) bool",
                    "IsPackageLevel": false
                },
                {
                    "Name": "IsIdentityField",
                    "Comment": "TODO: what is this?",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "IsIdentityField(name string) bool",
                    "IsPackageLevel": false
                },
                {
                    "Name": "IsKeyField",
                    "Comment": "Return whether a given field name is a key on this Collection.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "IsKeyField(name string) bool",
                    "IsPackageLevel": false
                },
                {
                    "Name": "KeyCount",
                    "Comment": "Return the number of keys on that uniquely identify a single record in this Collection.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "int"
                        }
                    ],
                    "Signature": "KeyCount() int",
                    "IsPackageLevel": false
                },
                {
                    "Name": "KeyFieldNames",
                    "Comment": "Same as KeyFields, but returns only the field names",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Name": "names",
                            "Type": "[]string"
                        }
                    ],
                    "Signature": "KeyFieldNames() names []string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "KeyFields",
                    "Comment": "Retrieve all of the fields that comprise the primary key for this Collection.  This will always include the identity\nfield at a minimum.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "[]Field"
                        }
                    ],
                    "Signature": "KeyFields() []Field",
                    "IsPackageLevel": false
                },
                {
                    "Name": "MakeRecord",
                    "Comment": "Deprecated: use StructToRecord instead",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "in",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "ops",
                            "Type": "...FieldOperation"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Record"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "MakeRecord(in interface{}, ops ...FieldOperation) (*Record, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "MapFromRecord",
                    "Comment": "Convert the given record into a map.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "record",
                            "Type": "*Record"
                        },
                        {
                            "Name": "fields",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "map[string]interface{}"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "MapFromRecord(record *Record, fields ...string) (map[string]interface{}, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "NewCollection",
                    "Comment": "Create a new colllection definition with no fields.",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        },
                        {
                            "Name": "fields",
                            "Type": "...Field"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Collection"
                        }
                    ],
                    "Signature": "NewCollection(name string, fields ...Field) *Collection",
                    "Source": "ewoJaWYgbGVuKGZpZWxkcykgPT0gMCB7CgkJZmllbGRzID0gbWFrZShbXUZpZWxkLCAwKQoJfQoJcmV0dXJuICZDb2xsZWN0aW9ue05hbWU6IG5hbWUsIEZpZWxkczogZmllbGRzLCBJZGVudGl0eUZpZWxkOiBEZWZhdWx0SWRlbnRpdHlGaWVsZCwgSWRlbnRpdHlGaWVsZFR5cGU6IERlZmF1bHRJZGVudGl0eUZpZWxkVHlwZSwgSWRlbnRpdHlGaWVsZFZhbGlkYXRvcjogVmFsaWRhdGVOb3RFbXB0eX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "SetBackend",
                    "Comment": "Set the backend for this collection.  The Backend interface in this package is a limited subset\nof the backends.Backend interface that avoids a circular dependency between the two packages.\nThe intent is to allow Collections to retrieve details about other collections registered on the\nsame backend.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "backend",
                            "Type": "Backend"
                        }
                    ],
                    "Signature": "SetBackend(backend Backend)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetIdentity",
                    "Comment": "Configure the identity field of a collection in a single function call.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        },
                        {
                            "Name": "idtype",
                            "Type": "Type"
                        },
                        {
                            "Name": "formatter",
                            "Type": "FieldFormatterFunc"
                        },
                        {
                            "Name": "validator",
                            "Type": "FieldValidatorFunc"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Collection"
                        }
                    ],
                    "Signature": "SetIdentity(name string, idtype Type, formatter FieldFormatterFunc, validator FieldValidatorFunc) *Collection",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetRecordType",
                    "Comment": "Deprecated: this functionality has been removed.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "in",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Collection"
                        }
                    ],
                    "Signature": "SetRecordType(in interface{}) *Collection",
                    "IsPackageLevel": false
                },
                {
                    "Name": "StructToRecord",
                    "Comment": "Generates a Record suitable for persistence in a backend from the given struct.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "in",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Record"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "StructToRecord(in interface{}) (*Record, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "TTL",
                    "Comment": "Return the duration until the TimeToLiveField in given record expires within the current collection.\nCollections with an empty TimeToLiveField, or records with a missing or zero-valued TimeToLiveField\nwill return 0.  If the record has already expired, the returned duration will be a negative number.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "record",
                            "Type": "*Record"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "time.Duration"
                        }
                    ],
                    "Signature": "TTL(record *Record) time.Duration",
                    "IsPackageLevel": false
                },
                {
                    "Name": "ValidateRecord",
                    "Comment": "Validate the given record against all Field and Collection validators.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "record",
                            "Type": "*Record"
                        },
                        {
                            "Name": "op",
                            "Type": "FieldOperation"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "ValidateRecord(record *Record, op FieldOperation) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "ValueForField",
                    "Comment": "Convert a given value into one that that can go into the backend database (for create/update operations), or that\nshould be returned to the user (for retrieval operations) in accordance with the named field's data type and\nformatters.  Invalid values (determined by Validators and the Required option in the Field) will return an error.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        },
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "op",
                            "Type": "FieldOperation"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "interface{}"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "ValueForField(name string, value interface{}, op FieldOperation) (interface{}, error)",
                    "IsPackageLevel": false
                }
            ],
            "Fields": [
                {
                    "Name": "Name",
                    "Type": "string",
                    "Comment": "The name of the collection"
                },
                {
                    "Name": "IndexName",
                    "Type": "string",
                    "Comment": "The name of the associated external inverted index used to query this collection."
                },
                {
                    "Name": "IndexCompoundFields",
                    "Type": "[]string",
                    "Comment": "Lists the field names that make up a composite key on this Collection that should be joined\ntogether when determining index record IDs.  Often it is the case that external indices do\nnot support composite keys the way databases do, so this allows Collections with composite\nkeys to be indexed in those systems by joining several values together to form a unique key."
                },
                {
                    "Name": "IndexCompoundFieldJoiner",
                    "Type": "string",
                    "Comment": "The string used to join and split ID values that go into / come out of external indices."
                },
                {
                    "Name": "SkipIndexPersistence",
                    "Type": "bool",
                    "Comment": "Disable automatically dual-writing modified records into the external index."
                },
                {
                    "Name": "Fields",
                    "Type": "[]Field",
                    "Comment": "The fields that belong to this collection (all except the primary key/identity field/first\nfield in a composite key)"
                },
                {
                    "Name": "IdentityField",
                    "Type": "string",
                    "Comment": "The name of the identity field for this Collection.  Defaults to \"id\"."
                },
                {
                    "Name": "IdentityFieldType",
                    "Type": "Type",
                    "Comment": "The datatype of the identity field.  Defaults to integer."
                },
                {
                    "Name": "IdentityFieldIndex",
                    "Type": "int",
                    "Comment": "Used to store the location of the identity field in the source database."
                },
                {
                    "Name": "EmbeddedCollections",
                    "Type": "[]Relationship",
                    "Comment": "Specifies how fields in this Collection relate to records from other collections.  This is\na partial implementation of a relational model, specifically capturing one-to-one or\none-to-many relationships.  The definitions here will retrieve the associated records from\nanother, and those values will replace the value that is actually in this Collection's field."
                },
                {
                    "Name": "Constraints",
                    "Type": "[]Constraint",
                    "Comment": "Allows for constraints to be applied to a collection.  In addition to informing Pivot about the\nrelationships between collections, this data is also used to enforce referential integrity for\nbackends that support such guarantees (e.g.: ACID-compliant RDBMS')."
                },
                {
                    "Name": "ExportedFields",
                    "Type": "[]string",
                    "Comment": "Specifies which fields can be seen when records are from relationships defined on other\nCollections.  This can be used to restrict the exposure) of sensitive data in this Collection\nbe being an embedded field in another Collection."
                },
                {
                    "Name": "AllowMissingEmbeddedRecords",
                    "Type": "bool",
                    "Comment": "Specify whether missing related fields generate an error when retrieving a record."
                },
                {
                    "Name": "TotalRecords",
                    "Type": "int64",
                    "Comment": "A read-only count of the number of records in this Collection"
                },
                {
                    "Name": "TotalRecordsExact",
                    "Type": "bool",
                    "Comment": "Whether the value of TotalRecords represents an exact (authoritative) count or an\napproximate count."
                },
                {
                    "Name": "TimeToLiveField",
                    "Type": "string",
                    "Comment": "The name of a field containing an absolute datetime after which expired records should be\ndeleted from this Collection."
                },
                {
                    "Name": "IdentityFieldFormatter",
                    "Type": "FieldFormatterFunc",
                    "Comment": "A function that modifies the identity key value before any operation.  Operates the same as\na Field Formatter function."
                },
                {
                    "Name": "AutoIdentity",
                    "Type": "string",
                    "Comment": "Specifies that IDs should be automatically generated using a formatter function"
                },
                {
                    "Name": "IdentityFieldValidator",
                    "Type": "FieldValidatorFunc",
                    "Comment": "A function that validates the value of an identity key before create and update operations.\nOperates the same as a Field Validator function."
                },
                {
                    "Name": "SourceURI",
                    "Type": "string",
                    "Comment": "Allow backends to store internal information about the backing datasource for this collection."
                },
                {
                    "Name": "PreSaveValidator",
                    "Type": "CollectionValidatorFunc",
                    "Comment": "If specified, this function receives a copy of the populated record before create and update\noperations, allowing for a last-chance validation of the record as a whole.  Use a pre-save\nvalidator when validation requires checking multiple fields at once."
                },
                {
                    "Name": "View",
                    "Type": "bool",
                    "Comment": "Specifies that this collection is a read-only view on data that is queried by the underlying database engine."
                },
                {
                    "Name": "ViewKeywords",
                    "Type": "string",
                    "Comment": "Specify additional keywords in the view creation to modify how it is created."
                },
                {
                    "Name": "ViewQuery",
                    "Type": "interface{}",
                    "Comment": "A query object that is passed to the underlying database engine."
                },
                {
                    "Name": "AlwaysCreate",
                    "Type": "bool",
                    "Comment": "Specifies that creating this collection on the backend should always be attempted."
                },
                {
                    "Name": "Ready",
                    "Type": "bool",
                    "Comment": "Specifies that the collection is fully ready to be used"
                }
            ],
            "Source": "dHlwZSBDb2xsZWN0aW9uIHN0cnVjdCB7CglOYW1lICAgICAgICAgICAgICAgIHN0cmluZyBganNvbjoibmFtZSJgCglJbmRleE5hbWUgICAgICAgICAgIHN0cmluZyBganNvbjoiaW5kZXhfbmFtZSxvbWl0ZW1wdHkiYAoJSW5kZXhDb21wb3VuZEZpZWxkcyBbIC8vIFRoZSBuYW1lIG9mIHRoZSBjb2xsZWN0aW9uCgkvLyBMaXN0cyB0aGUgZmllbGQgbmFtZXMgdGhhdCBtYWtlIHVwIGEgY29tcG9zaXRlIGtleSBvbiB0aGlzIENvbGxlY3Rpb24gdGhhdCBzaG91bGQgYmUgam9pbmVkCgkvLyB0b2dldGhlciB3aGVuIGRldGVybWluaW5nIGluZGV4IHJlY29yZCBJRHMuICBPZnRlbiBpdCBpcyB0aGUgY2FzZSB0aGF0IGV4dGVybmFsIGluZGljZXMgZG8KCS8vIG5vdCBzdXBwb3J0IGNvbXBvc2l0ZSBrZXlzIHRoZSB3YXkgZGF0YWJhc2VzIGRvLCBzbyB0aGlzIGFsbG93cyBDb2xsZWN0aW9ucyB3aXRoIGNvbXBvc2l0ZQoJLy8ga2V5cyB0byBiZSBpbmRleGVkIGluIHRob3NlIHN5c3RlbXMgYnkgam9pbmluZyBzZXZlcmFsIHZhbHVlcyB0b2dldGhlciB0byBmb3JtIGEgdW5pcXVlIGtleS4KCV1zdHJpbmcgYGpzb246ImluZGV4X2NvbXBvdW5kX2ZpZWxkcyxvbWl0ZW1wdHkiYAoJSW5kZXhDb21wb3VuZEZpZWxkSm9pbmVyIHN0cmluZyBganNvbjoiaW5kZXhfY29tcG91bmRfZmllbGRfam9pbmVyLG9taXRlbXB0eSJgCglTa2lwSW5kZXhQZXJzaXN0ZW5jZSAgICAgYm9vbCAgIGBqc29uOiJza2lwX2luZGV4X3BlcnNpc3RlbmNlLG9taXRlbXB0eSJgCglGaWVsZHMgICAgICAgICAgICAgICAgICAgWyAvLyBUaGUgc3RyaW5nIHVzZWQgdG8gam9pbiBhbmQgc3BsaXQgSUQgdmFsdWVzIHRoYXQgZ28gaW50byAvIGNvbWUgb3V0IG9mIGV4dGVybmFsIGluZGljZXMuCgkvLyBUaGUgZmllbGRzIHRoYXQgYmVsb25nIHRvIHRoaXMgY29sbGVjdGlvbiAoYWxsIGV4Y2VwdCB0aGUgcHJpbWFyeSBrZXkvaWRlbnRpdHkgZmllbGQvZmlyc3QKCS8vIGZpZWxkIGluIGEgY29tcG9zaXRlIGtleSkKCV1GaWVsZCBganNvbjoiZmllbGRzImAKCUlkZW50aXR5RmllbGQgICAgICAgc3RyaW5nIGBqc29uOiJpZGVudGl0eV9maWVsZCxvbWl0ZW1wdHkiYAoJSWRlbnRpdHlGaWVsZFR5cGUgICBUeXBlICAgYGpzb246ImlkZW50aXR5X2ZpZWxkX3R5cGUsb21pdGVtcHR5ImAKCUlkZW50aXR5RmllbGRJbmRleCAgaW50ICAgIGBqc29uOiJpZGVudGl0eV9maWVsZF9pbmRleCJgCglFbWJlZGRlZENvbGxlY3Rpb25zIFsgLy8gVGhlIG5hbWUgb2YgdGhlIGlkZW50aXR5IGZpZWxkIGZvciB0aGlzIENvbGxlY3Rpb24uICBEZWZhdWx0cyB0byAiaWQiLgoJLy8gU3BlY2lmaWVzIGhvdyBmaWVsZHMgaW4gdGhpcyBDb2xsZWN0aW9uIHJlbGF0ZSB0byByZWNvcmRzIGZyb20gb3RoZXIgY29sbGVjdGlvbnMuICBUaGlzIGlzCgkvLyBhIHBhcnRpYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWxhdGlvbmFsIG1vZGVsLCBzcGVjaWZpY2FsbHkgY2FwdHVyaW5nIG9uZS10by1vbmUgb3IKCS8vIG9uZS10by1tYW55IHJlbGF0aW9uc2hpcHMuICBUaGUgZGVmaW5pdGlvbnMgaGVyZSB3aWxsIHJldHJpZXZlIHRoZSBhc3NvY2lhdGVkIHJlY29yZHMgZnJvbQoJLy8gYW5vdGhlciwgYW5kIHRob3NlIHZhbHVlcyB3aWxsIHJlcGxhY2UgdGhlIHZhbHVlIHRoYXQgaXMgYWN0dWFsbHkgaW4gdGhpcyBDb2xsZWN0aW9uJ3MgZmllbGQuCgldUmVsYXRpb25zaGlwIGBqc29uOiJlbWJlZCxvbWl0ZW1wdHkiYAoJQ29uc3RyYWludHMgWyAvLyBBbGxvd3MgZm9yIGNvbnN0cmFpbnRzIHRvIGJlIGFwcGxpZWQgdG8gYSBjb2xsZWN0aW9uLiAgSW4gYWRkaXRpb24gdG8gaW5mb3JtaW5nIFBpdm90IGFib3V0IHRoZQoJLy8gcmVsYXRpb25zaGlwcyBiZXR3ZWVuIGNvbGxlY3Rpb25zLCB0aGlzIGRhdGEgaXMgYWxzbyB1c2VkIHRvIGVuZm9yY2UgcmVmZXJlbnRpYWwgaW50ZWdyaXR5IGZvcgoJLy8gYmFja2VuZHMgdGhhdCBzdXBwb3J0IHN1Y2ggZ3VhcmFudGVlcyAoZS5nLjogQUNJRC1jb21wbGlhbnQgUkRCTVMnKS4KCV1Db25zdHJhaW50IGBqc29uOiJjb25zdHJhaW50cyxvbWl0ZW1wdHkiYAoJRXhwb3J0ZWRGaWVsZHMgWyAvLyBTcGVjaWZpZXMgd2hpY2ggZmllbGRzIGNhbiBiZSBzZWVuIHdoZW4gcmVjb3JkcyBhcmUgZnJvbSByZWxhdGlvbnNoaXBzIGRlZmluZWQgb24gb3RoZXIKCS8vIENvbGxlY3Rpb25zLiAgVGhpcyBjYW4gYmUgdXNlZCB0byByZXN0cmljdCB0aGUgZXhwb3N1cmUpIG9mIHNlbnNpdGl2ZSBkYXRhIGluIHRoaXMgQ29sbGVjdGlvbgoJLy8gYmUgYmVpbmcgYW4gZW1iZWRkZWQgZmllbGQgaW4gYW5vdGhlciBDb2xsZWN0aW9uLgoJXXN0cmluZyBganNvbjoiZXhwb3J0LG9taXRlbXB0eSJgCglBbGxvd01pc3NpbmdFbWJlZGRlZFJlY29yZHMgYm9vbCAgICAgICAgICAgICAgICAgICAgYGpzb246ImFsbG93X21pc3NpbmdfZW1iZWRkZWRfcmVjb3JkcyJgCglUb3RhbFJlY29yZHMgICAgICAgICAgICAgICAgaW50NjQgICAgICAgICAgICAgICAgICAgYGpzb246InRvdGFsX3JlY29yZHMsb21pdGVtcHR5ImAKCVRvdGFsUmVjb3Jkc0V4YWN0ICAgICAgICAgICBib29sICAgICAgICAgICAgICAgICAgICBganNvbjoidG90YWxfcmVjb3Jkc19leGFjdCxvbWl0ZW1wdHkiYAoJVGltZVRvTGl2ZUZpZWxkICAgICAgICAgICAgIHN0cmluZyAgICAgICAgICAgICAgICAgIGBqc29uOiJ0aW1lX3RvX2xpdmVfZmllbGQiYAoJSWRlbnRpdHlGaWVsZEZvcm1hdHRlciAgICAgIEZpZWxkRm9ybWF0dGVyRnVuYyAgICAgIGBqc29uOiItImAKCUF1dG9JZGVudGl0eSAgICAgICAgICAgICAgICBzdHJpbmcgICAgICAgICAgICAgICAgICBganNvbjoiYXV0b2lkZW50aXR5ImAKCUlkZW50aXR5RmllbGRWYWxpZGF0b3IgICAgICBGaWVsZFZhbGlkYXRvckZ1bmMgICAgICBganNvbjoiLSJgCglTb3VyY2VVUkkgICAgICAgICAgICAgICAgICAgc3RyaW5nICAgICAgICAgICAgICAgICAgYGpzb246Ii0iYAoJUHJlU2F2ZVZhbGlkYXRvciAgICAgICAgICAgIENvbGxlY3Rpb25WYWxpZGF0b3JGdW5jIGBqc29uOiItImAKCVZpZXcgICAgICAgICAgICAgICAgICAgICAgICBib29sICAgICAgICAgICAgICAgICAgICBganNvbjoidmlldyxvbWl0ZW1wdHkiYAoJVmlld0tleXdvcmRzICAgICAgICAgICAgICAgIHN0cmluZyAgICAgICAgICAgICAgICAgIGBqc29uOiJ2aWV3X2tleXdvcmRzLG9taXRlbXB0eSJgCglWaWV3UXVlcnkgICAgICAgICAgICAgICAgICAgaW50ZXJmYWNle30gICAgICAgICAgICAgYGpzb246InZpZXdfcXVlcnksb21pdGVtcHR5ImAKCUFsd2F5c0NyZWF0ZSAgICAgICAgICAgICAgICBib29sICAgICAgICAgICAgICAgICAgICBganNvbjoiY3JlYXRlLG9taXRlbXB0eSJgCglSZWFkeSAgICAgICAgICAgICAgICAgICAgICAgYm9vbCAgICAgICAgICAgICAgICAgICAgYGpzb246InJlYWR5LG9taXRlbXB0eSJgCgp9Ly8gU3BlY2lmeSB3aGV0aGVyIG1pc3NpbmcgcmVsYXRlZCBmaWVsZHMgZ2VuZXJhdGUgYW4gZXJyb3Igd2hlbiByZXRyaWV2aW5nIGEgcmVjb3JkLgoK",
            "HasUnexportedFields": true
        },
        "CollectionAction": {
            "Name": "CollectionAction",
            "MetaType": "int",
            "Source": "dHlwZSBDb2xsZWN0aW9uQWN0aW9uIGludA=="
        },
        "CollectionValidatorFunc": {
            "Name": "CollectionValidatorFunc",
            "Source": "dHlwZSBDb2xsZWN0aW9uVmFsaWRhdG9yRnVuYyBmdW5jKCpSZWNvcmQpIGVycm9y"
        },
        "ConnectionString": {
            "Name": "ConnectionString",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "Backend",
                    "Comment": "Returns the backend component of the string.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "Backend() string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "ClearOpt",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        }
                    ],
                    "Signature": "ClearOpt(key string)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Credentials",
                    "Comment": "Return the credentials (if any) associated with this string, and whether they\nwere present or not.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        },
                        {
                            "Type": "string"
                        },
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "Credentials() (string, string, bool)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Dataset",
                    "Comment": "Returns the dataset component of the string.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "Dataset() string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "HasOpt",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "HasOpt(key string) bool",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Host",
                    "Comment": "Returns the host component of the string.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "defaults",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "Host(defaults ...string) string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "LoadCredentialsFromNetrc",
                    "Comment": "Reads a .netrc-style file and loads the appropriate credentials.  The host component of\nthis connection string is matched with the netrc \"machine\" field.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "filename",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "LoadCredentialsFromNetrc(filename string) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Opt",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "typeutil.Variant"
                        }
                    ],
                    "Signature": "Opt(key string) typeutil.Variant",
                    "IsPackageLevel": false
                },
                {
                    "Name": "OptBool",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallback",
                            "Type": "bool"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "OptBool(key string, fallback bool) bool",
                    "IsPackageLevel": false
                },
                {
                    "Name": "OptDuration",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallback",
                            "Type": "time.Duration"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "time.Duration"
                        }
                    ],
                    "Signature": "OptDuration(key string, fallback time.Duration) time.Duration",
                    "IsPackageLevel": false
                },
                {
                    "Name": "OptFloat",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallback",
                            "Type": "float64"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "float64"
                        }
                    ],
                    "Signature": "OptFloat(key string, fallback float64) float64",
                    "IsPackageLevel": false
                },
                {
                    "Name": "OptInt",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallback",
                            "Type": "int64"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "int64"
                        }
                    ],
                    "Signature": "OptInt(key string, fallback int64) int64",
                    "IsPackageLevel": false
                },
                {
                    "Name": "OptString",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallback",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "OptString(key string, fallback string) string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "OptTime",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallback",
                            "Type": "time.Time"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "time.Time"
                        }
                    ],
                    "Signature": "OptTime(key string, fallback time.Time) time.Time",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Protocol",
                    "Comment": "Returns the protocol component of the string.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "defaults",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "Protocol(defaults ...string) string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Scheme",
                    "Comment": "Returns the backend and protocol components of the string.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        },
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "Scheme() (string, string)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetCredentials",
                    "Comment": "Explicitly set username and password on this connection string",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "username",
                            "Type": "string"
                        },
                        {
                            "Name": "password",
                            "Type": "string"
                        }
                    ],
                    "Signature": "SetCredentials(username string, password string)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "String",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "String() string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "ParseConnectionString",
                    "Arguments": [
                        {
                            "Name": "conn",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "ConnectionString"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "ParseConnectionString(conn string) (ConnectionString, error)",
                    "Source": "ewoJaWYgdXJpLCBlcnIgOj0gdXJsLlBhcnNlKGNvbm4pOyBlcnIgPT0gbmlsIHsKCQlpZiBlcnIgOj0gcHJlcGFyZVVSSSh1cmkpOyBlcnIgPT0gbmlsIHsKCQkJcmV0dXJuIENvbm5lY3Rpb25TdHJpbmd7VVJJOiB1cmksIE9wdGlvbnM6IG9wdGlvbnNGcm9tVVJJKHVyaSl9LCBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gQ29ubmVjdGlvblN0cmluZ3t9LCBlcnIKCQl9Cgl9IGVsc2UgewoJCXJldHVybiBDb25uZWN0aW9uU3RyaW5ne30sIGVycgoJfQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "MustParseConnectionString",
                    "Arguments": [
                        {
                            "Name": "conn",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "ConnectionString"
                        }
                    ],
                    "Signature": "MustParseConnectionString(conn string) ConnectionString",
                    "Source": "ewoJaWYgY3MsIGVyciA6PSBQYXJzZUNvbm5lY3Rpb25TdHJpbmcoY29ubik7IGVyciA9PSBuaWwgewoJCXJldHVybiBjcwoJfSBlbHNlIHsKCQlwYW5pYyhlcnIuRXJyb3IoKSkKCX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "MakeConnectionString",
                    "Arguments": [
                        {
                            "Name": "scheme",
                            "Type": "string"
                        },
                        {
                            "Name": "host",
                            "Type": "string"
                        },
                        {
                            "Name": "dataset",
                            "Type": "string"
                        },
                        {
                            "Name": "options",
                            "Type": "map[string]interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "ConnectionString"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "MakeConnectionString(scheme string, host string, dataset string, options map[string]interface{}) (ConnectionString, error)",
                    "Source": "ewoJcXMgOj0gdXJsLlZhbHVlc3t9Cglmb3IgaywgdiA6PSByYW5nZSBvcHRpb25zIHsKCQlpZiBzdHJ2YWx1ZSwgZXJyIDo9IHN0cmluZ3V0aWwuVG9TdHJpbmcodik7IGVyciA9PSBuaWwgewoJCQl2YWx1ZXMgOj0gc3RyaW5ncy5TcGxpdChzdHJ2YWx1ZSwgYCxgKQoJCQlmb3IgXywgdnYgOj0gcmFuZ2UgdmFsdWVzIHsKCQkJCXFzLkFkZChrLCB2dikKCQkJfQoJCX0gZWxzZSB7CgkJCXJldHVybiBDb25uZWN0aW9uU3RyaW5ne30sIGVycgoJCX0KCX0KCXVyaSA6PSAmdXJsLlVSTHtTY2hlbWU6IHNjaGVtZSwgSG9zdDogaG9zdCwgUGF0aDogZGF0YXNldCwgUmF3UXVlcnk6IHFzLkVuY29kZSgpfQoJaWYgZXJyIDo9IHByZXBhcmVVUkkodXJpKTsgZXJyID09IG5pbCB7CgkJcmV0dXJuIENvbm5lY3Rpb25TdHJpbmd7VVJJOiB1cmksIE9wdGlvbnM6IG9wdGlvbnNGcm9tVVJJKHVyaSl9LCBuaWwKCX0gZWxzZSB7CgkJcmV0dXJuIENvbm5lY3Rpb25TdHJpbmd7fSwgZXJyCgl9Cn0=",
                    "IsPackageLevel": true
                }
            ],
            "Fields": [
                {
                    "Name": "URI",
                    "Type": "*url.URL"
                },
                {
                    "Name": "Options",
                    "Type": "map[string]interface{}"
                }
            ],
            "Source": "dHlwZSBDb25uZWN0aW9uU3RyaW5nIHN0cnVjdCB7CglVUkkgICAgICp1cmwuVVJMCglPcHRpb25zIG1hcFtzdHJpbmddaW50ZXJmYWNle30KfQ=="
        },
        "Constraint": {
            "Name": "Constraint",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "Equal",
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "other",
                            "Type": "*Constraint"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "Equal(other *Constraint) bool",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Validate",
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Validate() error",
                    "IsPackageLevel": false
                }
            ],
            "Fields": [
                {
                    "Name": "On",
                    "Type": "interface{}",
                    "Comment": "Represents the name (or array of names) of the local field the constraint is being applied to."
                },
                {
                    "Name": "Collection",
                    "Type": "string",
                    "Comment": "The remote collection the constraint applies to."
                },
                {
                    "Name": "Field",
                    "Type": "interface{}",
                    "Comment": "The remote field (or fields) in the remote collection the constraint applies to."
                },
                {
                    "Name": "Options",
                    "Type": "string",
                    "Comment": "Provides backend-specific additional options for the constraint."
                },
                {
                    "Name": "Into",
                    "Type": "string",
                    "Comment": "Specifies the local field that related records will be put into.  Defaults to the field specified in On."
                },
                {
                    "Name": "NoEmbed",
                    "Type": "bool",
                    "Comment": "Whether to omit this constraint when determining embedded collections."
                }
            ],
            "Source": "dHlwZSBDb25zdHJhaW50IHN0cnVjdCB7CglPbiAgICAgICAgIGludGVyZmFjZXt9IGBqc29uOiJvbiJgCglDb2xsZWN0aW9uIHN0cmluZyAgICAgIGBqc29uOiJjb2xsZWN0aW9uImAKCUZpZWxkICAgICAgaW50ZXJmYWNle30gYGpzb246ImZpZWxkImAKCU9wdGlvbnMgICAgc3RyaW5nICAgICAgYGpzb246Im9wdGlvbnMsb21pdGVtcHR5ImAKCUludG8gICAgICAgc3RyaW5nICAgICAgYGpzb246ImludG8sb21pdGVtcHR5ImAKCU5vRW1iZWQgICAgYm9vbCAgICAgICAgYGpzb246Im5vZW1iZWQsb21pdGVtcHR5ImAKfS8vIFJlcHJlc2VudHMgdGhlIG5hbWUgKG9yIGFycmF5IG9mIG5hbWVzKSBvZiB0aGUgbG9jYWwgZmllbGQgdGhlIGNvbnN0cmFpbnQgaXMgYmVpbmcgYXBwbGllZCB0by4KLy8gV2hldGhlciB0byBvbWl0IHRoaXMgY29uc3RyYWludCB3aGVuIGRldGVybWluaW5nIGVtYmVkZGVkIGNvbGxlY3Rpb25zLgo="
        },
        "DeltaIssue": {
            "Name": "DeltaIssue",
            "MetaType": "int",
            "Source": "dHlwZSBEZWx0YUlzc3VlIGludA=="
        },
        "DeltaType": {
            "Name": "DeltaType",
            "MetaType": "string",
            "Source": "dHlwZSBEZWx0YVR5cGUgc3RyaW5n"
        },
        "EncoderFunc": {
            "Name": "EncoderFunc",
            "Source": "dHlwZSBFbmNvZGVyRnVuYyBmdW5jKFtdYnl0ZSkgKHN0cmluZywgZXJyb3IpIC8ve30K"
        },
        "Field": {
            "Name": "Field",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "BelongsToConstraint",
                    "Comment": "Parses the value of BelongsTo into a valid Constraint",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "*Constraint"
                        }
                    ],
                    "Signature": "BelongsToConstraint() *Constraint",
                    "IsPackageLevel": false
                },
                {
                    "Name": "ConvertValue",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "in",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "interface{}"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "ConvertValue(in interface{}) (interface{}, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Diff",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "other",
                            "Type": "*Field"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "[]*SchemaDelta"
                        }
                    ],
                    "Signature": "Diff(other *Field) []*SchemaDelta",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Format",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "op",
                            "Type": "FieldOperation"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "interface{}"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Format(value interface{}, op FieldOperation) (interface{}, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetDefaultValue",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "interface{}"
                        }
                    ],
                    "Signature": "GetDefaultValue() interface{}",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetTypeInstance",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "interface{}"
                        }
                    ],
                    "Signature": "GetTypeInstance() interface{}",
                    "IsPackageLevel": false
                },
                {
                    "Name": "MarshalJSON",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "[]byte"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "MarshalJSON() ([]byte, error)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "UnmarshalJSON",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "b",
                            "Type": "[]byte"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "UnmarshalJSON(b []byte) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Validate",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Validate(value interface{}) error",
                    "IsPackageLevel": false
                }
            ],
            "Fields": [
                {
                    "Name": "Name",
                    "Type": "string",
                    "Comment": "The name of the field"
                },
                {
                    "Name": "Description",
                    "Type": "string",
                    "Comment": "A description of the field used in help text"
                },
                {
                    "Name": "Type",
                    "Type": "Type",
                    "Comment": "The data type of the field"
                },
                {
                    "Name": "KeyType",
                    "Type": "Type",
                    "Comment": "For complex field types (tuples, objects); the data type of the key portion"
                },
                {
                    "Name": "Subtype",
                    "Type": "Type",
                    "Comment": "For complex field types (arrays, sets, lists); the data type of the contained values"
                },
                {
                    "Name": "Length",
                    "Type": "int",
                    "Comment": "The length constraint for values in the field (where supported)"
                },
                {
                    "Name": "Precision",
                    "Type": "int",
                    "Comment": "The precision of stored values in the field (where supported)"
                },
                {
                    "Name": "Identity",
                    "Type": "bool",
                    "Comment": "Whether the field is an identity field (don't use this, configure the identity on the\nCollection instead)"
                },
                {
                    "Name": "Key",
                    "Type": "bool",
                    "Comment": "Whether the field is a key field in a composite key Collection"
                },
                {
                    "Name": "Required",
                    "Type": "bool",
                    "Comment": "Whether the field can store a null/empty value"
                },
                {
                    "Name": "Unique",
                    "Type": "bool",
                    "Comment": "Enforces that the field value must be unique across the entire Collection (where supported)"
                },
                {
                    "Name": "UniqueGroup",
                    "Type": "string",
                    "Comment": "The name of a group of unique fields that, taken together, must be unique across the entire\nCollection (where supported)"
                },
                {
                    "Name": "DefaultValue",
                    "Type": "interface{}",
                    "Comment": "The default value of the field is one is not explicitly specified.  Can be any type or a\nfunction that takes zero arguments and returns a single value."
                },
                {
                    "Name": "NativeType",
                    "Type": "string",
                    "Comment": "Represents the native datatype of the underlying Backend object (read only)"
                },
                {
                    "Name": "NotUserEditable",
                    "Type": "bool",
                    "Comment": "Specify that the field should not be modified.  This is not enforced in Pivot, but rather\nserves as a note to applications implementing interactions with the Pivot API."
                },
                {
                    "Name": "ValidateOnPopulate",
                    "Type": "bool",
                    "Comment": "Whether this field's validator(s) should be used to validate data being retrieved from the\nbackend.  Invalid data (possibly created outside of Pivot) will cause Retrieve() calls to\nreturn a validation error."
                },
                {
                    "Name": "Validator",
                    "Type": "FieldValidatorFunc",
                    "Comment": "A function that is used to validate the field's value before performing any create, update,\nand (optionally) retrieval operations."
                },
                {
                    "Name": "Formatter",
                    "Type": "FieldFormatterFunc",
                    "Comment": "A function that can modify values before any create or update operations.  Formatters run\nbefore Validators, giving users the opportunity to ensure a valid value is in the data\nstructure before validation runs."
                },
                {
                    "Name": "ValidatorConfig",
                    "Type": "map[string]interface{}",
                    "Comment": "A declarative form of the Validator configuration that uses pre-defined validators. Primarily\nused when storing schema declarations in external JSON files."
                },
                {
                    "Name": "FormatterConfig",
                    "Type": "map[string]interface{}",
                    "Comment": "A declarative form of the Formatter configuration that uses pre-defined validators. Primarily\nused when storing schema declarations in external JSON files."
                },
                {
                    "Name": "Index",
                    "Type": "int",
                    "Comment": "Used to store the order this field appears in the source database."
                },
                {
                    "Name": "BelongsTo",
                    "Type": "interface{}",
                    "Comment": "Specify a relationship between this field and another collection.\n\nIf given a string, it will be interpreted as a collection name and a\nconstaint against that collection's identity field will be created.\n\nIf given a *Collection, the same behavior as above will occur, but using\nthe Collection.Name from the given struct.\n\nIf given a Constraint, the constraint will be added to this field's\nparent collection with the \"On\" field set to this field's name."
                },
                {
                    "Name": "ReadOnly",
                    "Type": "bool",
                    "Comment": "Specifies that the field may not be updated, only read.  Attempts to update the field will be silently discarded."
                }
            ],
            "Source": "dHlwZSBGaWVsZCBzdHJ1Y3QgewoJTmFtZSAgICAgICAgICAgICAgIHN0cmluZyAgICAgICAgICAgICBganNvbjoibmFtZSJgCglEZXNjcmlwdGlvbiAgICAgICAgc3RyaW5nICAgICAgICAgICAgIGBqc29uOiJkZXNjcmlwdGlvbixvbWl0ZW1wdHkiYAoJVHlwZSAgICAgICAgICAgICAgIFR5cGUgICAgICAgICAgICAgICBganNvbjoidHlwZSJgCglLZXlUeXBlICAgICAgICAgICAgVHlwZSAgICAgICAgICAgICAgIGBqc29uOiJrZXl0eXBlLG9taXRlbXB0eSJgCglTdWJ0eXBlICAgICAgICAgICAgVHlwZSAgICAgICAgICAgICAgIGBqc29uOiJzdWJ0eXBlLG9taXRlbXB0eSJgCglMZW5ndGggICAgICAgICAgICAgaW50ICAgICAgICAgICAgICAgIGBqc29uOiJsZW5ndGgsb21pdGVtcHR5ImAKCVByZWNpc2lvbiAgICAgICAgICBpbnQgICAgICAgICAgICAgICAgYGpzb246InByZWNpc2lvbixvbWl0ZW1wdHkiYAoJSWRlbnRpdHkgICAgICAgICAgIGJvb2wgICAgICAgICAgICAgICBganNvbjoiaWRlbnRpdHksb21pdGVtcHR5ImAKCUtleSAgICAgICAgICAgICAgICBib29sICAgICAgICAgICAgICAgYGpzb246ImtleSxvbWl0ZW1wdHkiYAoJUmVxdWlyZWQgICAgICAgICAgIGJvb2wgICAgICAgICAgICAgICBganNvbjoicmVxdWlyZWQsb21pdGVtcHR5ImAKCVVuaXF1ZSAgICAgICAgICAgICBib29sICAgICAgICAgICAgICAgYGpzb246InVuaXF1ZSxvbWl0ZW1wdHkiYAoJVW5pcXVlR3JvdXAgICAgICAgIHN0cmluZyAgICAgICAgICAgICBganNvbjoidW5pcXVlX2dyb3VwLG9taXRlbXB0eSJgCglEZWZhdWx0VmFsdWUgICAgICAgaW50ZXJmYWNle30gICAgICAgIGBqc29uOiJkZWZhdWx0LG9taXRlbXB0eSJgCglOYXRpdmVUeXBlICAgICAgICAgc3RyaW5nICAgICAgICAgICAgIGBqc29uOiJuYXRpdmVfdHlwZSxvbWl0ZW1wdHkiYAoJTm90VXNlckVkaXRhYmxlICAgIGJvb2wgICAgICAgICAgICAgICBganNvbjoibm90X3VzZXJfZWRpdGFibGUiYAoJVmFsaWRhdGVPblBvcHVsYXRlIGJvb2wgICAgICAgICAgICAgICBganNvbjoidmFsaWRhdGVfb25fcG9wdWxhdGUsb21pdGVtcHR5ImAKCVZhbGlkYXRvciAgICAgICAgICBGaWVsZFZhbGlkYXRvckZ1bmMgYGpzb246Ii0iYAoJRm9ybWF0dGVyICAgICAgICAgIEZpZWxkRm9ybWF0dGVyRnVuYyBganNvbjoiLSJgCglWYWxpZGF0b3JDb25maWcgICAgbWFwIC8vIFRoZSBuYW1lIG9mIHRoZSBmaWVsZAoJLy8gQSBkZWNsYXJhdGl2ZSBmb3JtIG9mIHRoZSBWYWxpZGF0b3IgY29uZmlndXJhdGlvbiB0aGF0IHVzZXMgcHJlLWRlZmluZWQgdmFsaWRhdG9ycy4gUHJpbWFyaWx5CgkvLyB1c2VkIHdoZW4gc3RvcmluZyBzY2hlbWEgZGVjbGFyYXRpb25zIGluIGV4dGVybmFsIEpTT04gZmlsZXMuCglbc3RyaW5nXWludGVyZmFjZXt9IGBqc29uOiJ2YWxpZGF0b3JzLG9taXRlbXB0eSJgCglGb3JtYXR0ZXJDb25maWcgbWFwIC8vIEEgZGVjbGFyYXRpdmUgZm9ybSBvZiB0aGUgRm9ybWF0dGVyIGNvbmZpZ3VyYXRpb24gdGhhdCB1c2VzIHByZS1kZWZpbmVkIHZhbGlkYXRvcnMuIFByaW1hcmlseQoJLy8gdXNlZCB3aGVuIHN0b3Jpbmcgc2NoZW1hIGRlY2xhcmF0aW9ucyBpbiBleHRlcm5hbCBKU09OIGZpbGVzLgoJW3N0cmluZ11pbnRlcmZhY2V7fSBganNvbjoiZm9ybWF0dGVycyxvbWl0ZW1wdHkiYAoJSW5kZXggICAgIGludCAgICAgICAgIGBqc29uOiJpbmRleCxvbWl0ZW1wdHkiYAoJQmVsb25nc1RvIGludGVyZmFjZXt9IGBqc29uOiJiZWxvbmdzX3RvLG9taXRlbXB0eSJgCglSZWFkT25seSAgYm9vbCAgICAgICAgYGpzb246InJlYWRvbmx5LG9taXRlbXB0eSJgCn0vLyBVc2VkIHRvIHN0b3JlIHRoZSBvcmRlciB0aGlzIGZpZWxkIGFwcGVhcnMgaW4gdGhlIHNvdXJjZSBkYXRhYmFzZS4KLy8gU3BlY2lmaWVzIHRoYXQgdGhlIGZpZWxkIG1heSBub3QgYmUgdXBkYXRlZCwgb25seSByZWFkLiAgQXR0ZW1wdHMgdG8gdXBkYXRlIHRoZSBmaWVsZCB3aWxsIGJlIHNpbGVudGx5IGRpc2NhcmRlZC4K"
        },
        "FieldFormatterFunc": {
            "Name": "FieldFormatterFunc",
            "Methods": [
                {
                    "Name": "FormatterFromMap",
                    "Arguments": [
                        {
                            "Name": "in",
                            "Type": "map[string]interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldFormatterFunc"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "FormatterFromMap(in map[string]interface{}) (FieldFormatterFunc, error)",
                    "Source": "ewoJZm9ybWF0dGVycyA6PSBtYWtlKFtdRmllbGRGb3JtYXR0ZXJGdW5jLCAwKQoJZm9yIG5hbWUsIGRlZm4gOj0gcmFuZ2UgaW4gewoJCWlmIGZvcm1hdHRlciwgZXJyIDo9IEdldEZvcm1hdHRlcihuYW1lLCBkZWZuKTsgZXJyID09IG5pbCB7CgkJCWZvcm1hdHRlcnMgPSBhcHBlbmQoZm9ybWF0dGVycywgZm9ybWF0dGVyKQoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkludmFsaWQgZm9ybWF0dGVyIGNvbmZpZ3VyYXRpb24gJXY6ICV2IiwgbmFtZSwgZXJyKQoJCX0KCX0KCXJldHVybiBGb3JtYXRBbGwoZm9ybWF0dGVycy4uLiksIG5pbAp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "GetFormatter",
                    "Arguments": [
                        {
                            "Name": "name",
                            "Type": "string"
                        },
                        {
                            "Name": "args",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldFormatterFunc"
                        },
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "GetFormatter(name string, args interface{}) (FieldFormatterFunc, error)",
                    "Source": "ewoJc3dpdGNoIG5hbWUgewoJY2FzZSBgdXVpZGA6CgkJcmV0dXJuIEdlbmVyYXRlVVVJRCwgbmlsCgljYXNlIGBlbmNvZGVkLXV1aWRgOgoJCXZhciBlbmNvZGVyIEVuY29kZXJGdW5jCgkJc3dpdGNoIGZtdC5TcHJpbnRmKCIldiIsIGFyZ3MpIHsKCQljYXNlIGBiYXNlMzJgOgoJCQllbmNvZGVyID0gQmFzZTMyRW5jb2RlcgoJCWNhc2UgYGJhc2U1OGA6CgkJCWVuY29kZXIgPSBCYXNlNThFbmNvZGVyCgkJY2FzZSBgYmFzZTY0YDoKCQkJZW5jb2RlciA9IEJhc2U2NEVuY29kZXIKCQlkZWZhdWx0OgoJCQllbmNvZGVyID0gSGV4RW5jb2RlcgoJCX0KCQlyZXR1cm4gR2VuZXJhdGVFbmNvZGVkVVVJRChlbmNvZGVyKSwgbmlsCgljYXNlIGB0cmltLXNwYWNlYDoKCQlyZXR1cm4gVHJpbVNwYWNlLCBuaWwKCWNhc2UgYGNoYW5nZS1jYXNlYDoKCQlyZXR1cm4gQ2hhbmdlQ2FzZShzbGljZXV0aWwuU3RyaW5naWZ5KGFyZ3MpLi4uKSwgbmlsCgljYXNlIGByZXBsYWNlYDoKCQlyZXR1cm4gUmVwbGFjZShzbGljZXV0aWwuU2xpY2VpZnkoYXJncykpLCBuaWwKCWNhc2UgYGN1cnJlbnQtdGltZWA6CgkJcmV0dXJuIEN1cnJlbnRUaW1lLCBuaWwKCWNhc2UgYGN1cnJlbnQtdGltZS1pZi11bnNldGA6CgkJcmV0dXJuIEN1cnJlbnRUaW1lSWZVbnNldCwgbmlsCgljYXNlIGBub3ctcGx1cy1kdXJhdGlvbmA6CgkJcmV0dXJuIE5vd1BsdXNEdXJhdGlvbih0eXBldXRpbC5WKGFyZ3MpLkR1cmF0aW9uKCkpLCBuaWwKCWRlZmF1bHQ6CgkJcmV0dXJuIG5pbCwgZm10LkVycm9yZigiVW5rbm93biBmb3JtYXR0ZXIgJXEiLCBuYW1lKQoJfQp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "FormatAll",
                    "Arguments": [
                        {
                            "Name": "formatters",
                            "Type": "...FieldFormatterFunc"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldFormatterFunc"
                        }
                    ],
                    "Signature": "FormatAll(formatters ...FieldFormatterFunc) FieldFormatterFunc",
                    "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30sIG9wIEZpZWxkT3BlcmF0aW9uKSAoaW50ZXJmYWNle30sIGVycm9yKSB7CgkJZm9yIF8sIGZvcm1hdHRlciA6PSByYW5nZSBmb3JtYXR0ZXJzIHsKCQkJaWYgdiwgZXJyIDo9IGZvcm1hdHRlcih2YWx1ZSwgb3ApOyBlcnIgPT0gbmlsIHsKCQkJCXZhbHVlID0gdgoJCQl9IGVsc2UgewoJCQkJcmV0dXJuIG5pbCwgZXJyCgkJCX0KCQl9CgkJcmV0dXJuIHZhbHVlLCBuaWwKCX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "ChangeCase",
                    "Arguments": [
                        {
                            "Name": "cases",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldFormatterFunc"
                        }
                    ],
                    "Signature": "ChangeCase(cases ...string) FieldFormatterFunc",
                    "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30sIF8gRmllbGRPcGVyYXRpb24pIChpbnRlcmZhY2V7fSwgZXJyb3IpIHsKCQlpZiByZWNvcmQsIG9rIDo9IHZhbHVlLigqUmVjb3JkKTsgb2sgewoJCQl2YWx1ZSA9IHJlY29yZC5JRAoJCX0KCQlpZiB2U3RyLCBlcnIgOj0gc3RyaW5ndXRpbC5Ub1N0cmluZyh2YWx1ZSk7IGVyciA9PSBuaWwgewoJCQlmb3IgXywgYyA6PSByYW5nZSBjYXNlcyB7CgkJCQlzd2l0Y2ggYyB7CgkJCQljYXNlIGB1cHBlcmA6CgkJCQkJdlN0ciA9IHN0cmluZ3MuVG9VcHBlcih2U3RyKQoJCQkJY2FzZSBgbG93ZXJgOgoJCQkJCXZTdHIgPSBzdHJpbmdzLlRvTG93ZXIodlN0cikKCQkJCWNhc2UgYGNhbWVsaXplYDoKCQkJCQl2U3RyID0gc3RyaW5ndXRpbC5DYW1lbGl6ZSh2U3RyKQoJCQkJY2FzZSBgaHlwaGVuYXRlYDoKCQkJCQl2U3RyID0gc3RyaW5ndXRpbC5IeXBoZW5hdGUodlN0cikKCQkJCWNhc2UgYHVuZGVyc2NvcmVgOgoJCQkJCXZTdHIgPSBzdHJpbmd1dGlsLlVuZGVyc2NvcmUodlN0cikKCQkJCWNhc2UgYHRpdGxlYDoKCQkJCQl2U3RyID0gc3RyaW5ncy5UaXRsZSh2U3RyKQoJCQkJZGVmYXVsdDoKCQkJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCJVbnN1cHBvcnRlZCBjYXNlICclcyciLCBjKQoJCQkJfQoJCQl9CgkJCXJldHVybiB2U3RyLCBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gdmFsdWUsIGVycgoJCX0KCX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "Replace",
                    "Arguments": [
                        {
                            "Name": "pairs",
                            "Type": "[]interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldFormatterFunc"
                        }
                    ],
                    "Signature": "Replace(pairs []interface{}) FieldFormatterFunc",
                    "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30sIF8gRmllbGRPcGVyYXRpb24pIChpbnRlcmZhY2V7fSwgZXJyb3IpIHsKCQlpZiB2U3RyLCBlcnIgOj0gc3RyaW5ndXRpbC5Ub1N0cmluZyh2YWx1ZSk7IGVyciA9PSBuaWwgewoJCQlmb3IgXywgcGFpciA6PSByYW5nZSBwYWlycyB7CgkJCQlwIDo9IHNsaWNldXRpbC5TdHJpbmdpZnkocGFpcikKCQkJCWlmIGxlbihwKSAhPSAyIHsKCQkJCQlyZXR1cm4gbmlsLCBmbXQuRXJyb3JmKCIncmVwbGFjZScgZm9ybWF0dGVyIHJlcXVpcmVzIGFuIGFyZ3VtZW50IG9mIFtbRklORFBBVFRFUk4sIFJFUExBQ0VXSVRIXSwgLi5dIikKCQkJCX0gZWxzZSB7CgkJCQkJZmluZCA6PSBwWzBdCgkJCQkJcmVwbGFjZSA6PSBwWzFdCgkJCQkJaWYgcmVjb3JkLCBvayA6PSB2YWx1ZS4oKlJlY29yZCk7IG9rIHsKCQkJCQkJdmFsdWUgPSByZWNvcmQuSUQKCQkJCQl9CgkJCQkJaWYgcngsIGVyciA6PSByZWdleHAuQ29tcGlsZShmaW5kKTsgZXJyID09IG5pbCB7CgkJCQkJCXZTdHIgPSByeC5SZXBsYWNlQWxsU3RyaW5nKHZTdHIsIHJlcGxhY2UpCgkJCQkJfSBlbHNlIHsKCQkJCQkJcmV0dXJuIHZhbHVlLCBmbXQuRXJyb3JmKCJpbnZhbGlkIGZpbmQgcGF0dGVybjogJXYiLCBlcnIpCgkJCQkJfQoJCQkJfQoJCQl9CgkJCXJldHVybiB2U3RyLCBuaWwKCQl9IGVsc2UgewoJCQlyZXR1cm4gdmFsdWUsIGVycgoJCX0KCX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "GenerateEncodedUUID",
                    "Comment": "Same as GenerateUUID, but allows for a custom representation of the underlying bytes.",
                    "Arguments": [
                        {
                            "Name": "encoder",
                            "Type": "EncoderFunc"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldFormatterFunc"
                        }
                    ],
                    "Signature": "GenerateEncodedUUID(encoder EncoderFunc) FieldFormatterFunc",
                    "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30sIF8gRmllbGRPcGVyYXRpb24pIChpbnRlcmZhY2V7fSwgZXJyb3IpIHsKCQlpZiByZWNvcmQsIG9rIDo9IHZhbHVlLigqUmVjb3JkKTsgb2sgewoJCQl2YWx1ZSA9IHJlY29yZC5JRAoJCX0KCQlpZiB0eXBldXRpbC5Jc1plcm8odmFsdWUpIHsKCQkJaWYgdiwgZXJyIDo9IGVuY29kZXIoc3RyaW5ndXRpbC5VVUlEKCkuQnl0ZXMoKSk7IGVyciA9PSBuaWwgewoJCQkJaWYgdHlwZXV0aWwuSXNaZXJvKHYpIHsKCQkJCQlyZXR1cm4gdmFsdWUsIGZtdC5FcnJvcmYoIlVVSUQgZW5jb2RlciBwcm9kdWNlZCBhIHplcm8tbGVuZ3RoIHJlc3VsdCIpCgkJCQl9CgkJCQl2YWx1ZSA9IHYKCQkJfSBlbHNlIHsKCQkJCXJldHVybiB2YWx1ZSwgZXJyCgkJCX0KCQl9CgkJcmV0dXJuIHZhbHVlLCBuaWwKCX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "IfUnset",
                    "Comment": "Only evaluates the given formatter if the current value of the field is empty.",
                    "Arguments": [
                        {
                            "Name": "onlyIf",
                            "Type": "FieldFormatterFunc"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldFormatterFunc"
                        }
                    ],
                    "Signature": "IfUnset(onlyIf FieldFormatterFunc) FieldFormatterFunc",
                    "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30sIG9wIEZpZWxkT3BlcmF0aW9uKSAoaW50ZXJmYWNle30sIGVycm9yKSB7CgkJaWYgb25seUlmICE9IG5pbCB7CgkJCWlmIHR5cGV1dGlsLklzWmVybyh2YWx1ZSkgewoJCQkJcmV0dXJuIG9ubHlJZih2YWx1ZSwgb3ApCgkJCX0KCQl9CgkJcmV0dXJuIHZhbHVlLCBuaWwKCX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "DeriveFromFields",
                    "Comment": "Extracts values from the given Record and generates a deterministic output based on those values.",
                    "Arguments": [
                        {
                            "Name": "format",
                            "Type": "string"
                        },
                        {
                            "Name": "fields",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldFormatterFunc"
                        }
                    ],
                    "Signature": "DeriveFromFields(format string, fields ...string) FieldFormatterFunc",
                    "Source": "ewoJcmV0dXJuIGZ1bmMoaW5wdXQgaW50ZXJmYWNle30sIF8gRmllbGRPcGVyYXRpb24pIChpbnRlcmZhY2V7fSwgZXJyb3IpIHsKCQlpZiByZWNvcmQsIG9rIDo9IGlucHV0LigqUmVjb3JkKTsgb2sgewoJCQl2YWx1ZXMgOj0gbWFrZShbXWludGVyZmFjZXt9LCBsZW4oZmllbGRzKSkKCQkJZm9yIGksIGZpZWxkIDo9IHJhbmdlIGZpZWxkcyB7CgkJCQl2YWx1ZXNbaV0gPSByZWNvcmQuR2V0KGZpZWxkKQoJCQl9CgkJCXJldHVybiBmbXQuU3ByaW50Zihmb3JtYXQsIHZhbHVlcy4uLiksIG5pbAoJCX0gZWxzZSB7CgkJCXJldHVybiBuaWwsIGZtdC5FcnJvcmYoIkRlcml2ZUZyb21GaWVsZHMgZm9ybWF0dGVyIHJlcXVpcmVzIGEgKmRhbC5SZWNvcmQgYXJndW1lbnQsIGdvdCAlVCIsIGlucHV0KQoJCX0KCX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "NowPlusDuration",
                    "Comment": "Returns the current time with an added offset when the field is persisted.",
                    "Arguments": [
                        {
                            "Name": "duration",
                            "Type": "time.Duration"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "FieldFormatterFunc"
                        }
                    ],
                    "Signature": "NowPlusDuration(duration time.Duration) FieldFormatterFunc",
                    "Source": "ewoJcmV0dXJuIGZ1bmModmFsdWUgaW50ZXJmYWNle30sIG9wIEZpZWxkT3BlcmF0aW9uKSAoaW50ZXJmYWNle30sIGVycm9yKSB7CgkJaWYgb3AgPT0gUGVyc2lzdE9wZXJhdGlvbiB7CgkJCWlmIGR1cmF0aW9uICE9IDAgewoJCQkJcmV0dXJuIHRpbWUuTm93KCkuQWRkKGR1cmF0aW9uKSwgbmlsCgkJCX0KCQl9CgkJcmV0dXJuIHZhbHVlLCBuaWwKCX0KfQ==",
                    "IsPackageLevel": true
                }
            ],
            "Source": "dHlwZSBGaWVsZEZvcm1hdHRlckZ1bmMgZnVuYyhpbnRlcmZhY2V7fSwgRmllbGRPcGVyYXRpb24pIChpbnRlcmZhY2V7fSwgZXJyb3Ip"
        },
        "FieldOperation": {
            "Name": "FieldOperation",
            "MetaType": "int",
            "Source": "dHlwZSBGaWVsZE9wZXJhdGlvbiBpbnQ="
        },
        "FieldValidatorFunc": {
            "Name": "FieldValidatorFunc",
            "Source": "dHlwZSBGaWVsZFZhbGlkYXRvckZ1bmMgZnVuYyhpbnRlcmZhY2V7fSkgZXJyb3I="
        },
        "Migratable": {
            "Name": "Migratable",
            "Source": "dHlwZSBNaWdyYXRhYmxlIGludGVyZmFjZXsgTWlncmF0ZSgpIGVycm9yIH0="
        },
        "Model": {
            "Name": "Model",
            "Source": "dHlwZSBNb2RlbCBpbnRlcmZhY2V7fQ=="
        },
        "Record": {
            "Name": "Record",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "Append",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "value",
                            "Type": "...interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Record"
                        }
                    ],
                    "Signature": "Append(key string, value ...interface{}) *Record",
                    "IsPackageLevel": false
                },
                {
                    "Name": "AppendNested",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "value",
                            "Type": "...interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Record"
                        }
                    ],
                    "Signature": "AppendNested(key string, value ...interface{}) *Record",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Copy",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "other",
                            "Type": "*Record"
                        },
                        {
                            "Name": "schema",
                            "Type": "...*Collection"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Copy(other *Record, schema ...*Collection) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Get",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallback",
                            "Type": "...interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "interface{}"
                        }
                    ],
                    "Signature": "Get(key string, fallback ...interface{}) interface{}",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetNested",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallback",
                            "Type": "...interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "interface{}"
                        }
                    ],
                    "Signature": "GetNested(key string, fallback ...interface{}) interface{}",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetString",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "fallback",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "GetString(key string, fallback ...string) string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Keys",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "collection",
                            "Type": "*Collection"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "[]interface{}"
                        }
                    ],
                    "Signature": "Keys(collection *Collection) []interface{}",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Map",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fields",
                            "Type": "...string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "map[string]interface{}"
                        }
                    ],
                    "Signature": "Map(fields ...string) map[string]interface{}",
                    "IsPackageLevel": false
                },
                {
                    "Name": "NewRecord",
                    "Arguments": [
                        {
                            "Name": "id",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "data",
                            "Type": "...map[string]interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Record"
                        }
                    ],
                    "Signature": "NewRecord(id interface{}, data ...map[string]interface{}) *Record",
                    "Source": "ewoJcmVjb3JkIDo9ICZSZWNvcmR7SUQ6IGlkfQoJaWYgbGVuKGRhdGEpID4gMCAmJiBsZW4oZGF0YVswXSkgPiAwIHsKCQlyZWNvcmQuRmllbGRzID0gZGF0YVswXQoJfSBlbHNlIHsKCQlyZWNvcmQuRmllbGRzID0gbWFrZShtYXBbc3RyaW5nXWludGVyZmFjZXt9KQoJfQoJcmV0dXJuIHJlY29yZAp9",
                    "IsPackageLevel": true
                },
                {
                    "Name": "NewRecordErr",
                    "Arguments": [
                        {
                            "Name": "id",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "err",
                            "Type": "error"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Record"
                        }
                    ],
                    "Signature": "NewRecordErr(id interface{}, err error) *Record",
                    "Source": "ewoJcmV0dXJuICZSZWNvcmR7SUQ6IGlkLCBGaWVsZHM6IG1ha2UobWFwW3N0cmluZ11pbnRlcmZhY2V7fSksIEVycm9yOiBlcnJ9Cn0=",
                    "IsPackageLevel": true
                },
                {
                    "Name": "OnlyFields",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "fields",
                            "Type": "[]string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Record"
                        }
                    ],
                    "Signature": "OnlyFields(fields []string) *Record",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Populate",
                    "Comment": "Populates a given struct with with the values in this record.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "into",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "collection",
                            "Type": "*Collection"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "Populate(into interface{}, collection *Collection) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Set",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Record"
                        }
                    ],
                    "Signature": "Set(key string, value interface{}) *Record",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetData",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "data",
                            "Type": "[]byte"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Record"
                        }
                    ],
                    "Signature": "SetData(data []byte) *Record",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetFields",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "values",
                            "Type": "map[string]interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Record"
                        }
                    ],
                    "Signature": "SetFields(values map[string]interface{}) *Record",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetKeys",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "collection",
                            "Type": "*Collection"
                        },
                        {
                            "Name": "op",
                            "Type": "FieldOperation"
                        },
                        {
                            "Name": "keys",
                            "Type": "...interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "SetKeys(collection *Collection, op FieldOperation, keys ...interface{}) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "SetNested",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "key",
                            "Type": "string"
                        },
                        {
                            "Name": "value",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Record"
                        }
                    ],
                    "Signature": "SetNested(key string, value interface{}) *Record",
                    "IsPackageLevel": false
                },
                {
                    "Name": "String",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "String() string",
                    "IsPackageLevel": false
                }
            ],
            "Fields": [
                {
                    "Name": "ID",
                    "Type": "interface{}"
                },
                {
                    "Name": "Fields",
                    "Type": "map[string]interface{}"
                },
                {
                    "Name": "Data",
                    "Type": "[]byte"
                },
                {
                    "Name": "Error",
                    "Type": "error"
                },
                {
                    "Name": "CollectionName",
                    "Type": "string"
                },
                {
                    "Name": "Operation",
                    "Type": "string"
                },
                {
                    "Name": "Optional",
                    "Type": "bool"
                }
            ],
            "Source": "dHlwZSBSZWNvcmQgc3RydWN0IHsKCUlEICAgICAgICAgICAgIGludGVyZmFjZXt9ICAgICAgICAgICAgYGpzb246ImlkImAKCUZpZWxkcyAgICAgICAgIG1hcFtzdHJpbmddaW50ZXJmYWNle30gYGpzb246ImZpZWxkcyxvbWl0ZW1wdHkiYAoJRGF0YSAgICAgICAgICAgW11ieXRlICAgICAgICAgICAgICAgICBganNvbjoiZGF0YSxvbWl0ZW1wdHkiYAoJRXJyb3IgICAgICAgICAgZXJyb3IgICAgICAgICAgICAgICAgICBganNvbjoiZXJyb3Isb21pdGVtcHR5ImAKCUNvbGxlY3Rpb25OYW1lIHN0cmluZyAgICAgICAgICAgICAgICAgYGpzb246ImNvbGxlY3Rpb24sb21pdGVtcHR5ImAKCU9wZXJhdGlvbiAgICAgIHN0cmluZyAgICAgICAgICAgICAgICAgYGpzb246Im9wZXJhdGlvbixvbWl0ZW1wdHkiYAoJT3B0aW9uYWwgICAgICAgYm9vbCAgICAgICAgICAgICAgICAgICBganNvbjoib3B0aW9uYWwsb21pdGVtcHR5ImAKfS8vIFNwZWNpZmllcyB0aGF0IHRoZSByZWNvcmQgaXMgIm9wdGlvbmFsIiwgd2hpY2ggaXMgbmFtZWx5IHVzZWQgaW4gZml4dHVyZXMgdG8gaW5kaWNhdGUgdGhhdCBhIG1pc3NpbmcgY29sbGVjdGlvbiBzaG91bGQgbm90IGJlIGNvbnNpZGVyZWQgZmF0YWwuCg=="
        },
        "RecordSet": {
            "Name": "RecordSet",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "Append",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "other",
                            "Type": "*RecordSet"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*RecordSet"
                        }
                    ],
                    "Signature": "Append(other *RecordSet) *RecordSet",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetRecord",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "index",
                            "Type": "int"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Record"
                        },
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "GetRecord(index int) (*Record, bool)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "GetRecordByID",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "id",
                            "Type": "interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Record"
                        },
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "GetRecordByID(id interface{}) (*Record, bool)",
                    "IsPackageLevel": false
                },
                {
                    "Name": "IDs",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Name": "ids",
                            "Type": "[]interface{}"
                        }
                    ],
                    "Signature": "IDs() ids []interface{}",
                    "IsPackageLevel": false
                },
                {
                    "Name": "IsEmpty",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "bool"
                        }
                    ],
                    "Signature": "IsEmpty() bool",
                    "IsPackageLevel": false
                },
                {
                    "Name": "NewRecordSet",
                    "Arguments": [
                        {
                            "Name": "records",
                            "Type": "...*Record"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*RecordSet"
                        }
                    ],
                    "Signature": "NewRecordSet(records ...*Record) *RecordSet",
                    "Source": "ewoJcmV0dXJuICZSZWNvcmRTZXR7UmVjb3JkczogcmVjb3JkcywgT3B0aW9uczogbWFrZShtYXBbc3RyaW5nXWludGVyZmFjZXt9KX0KfQ==",
                    "IsPackageLevel": true
                },
                {
                    "Name": "Pluck",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "field",
                            "Type": "string"
                        },
                        {
                            "Name": "fallback",
                            "Type": "...interface{}"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "[]interface{}"
                        }
                    ],
                    "Signature": "Pluck(field string, fallback ...interface{}) []interface{}",
                    "IsPackageLevel": false
                },
                {
                    "Name": "PopulateFromRecords",
                    "Comment": "Takes a slice of structs or maps and fills it with instances populated by the records in this RecordSet\nin accordance with the types specified in the given collection definition, as well as which\nfields are available in the given struct.",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "into",
                            "Type": "interface{}"
                        },
                        {
                            "Name": "schema",
                            "Type": "*Collection"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "error"
                        }
                    ],
                    "Signature": "PopulateFromRecords(into interface{}, schema *Collection) error",
                    "IsPackageLevel": false
                },
                {
                    "Name": "Push",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "record",
                            "Type": "*Record"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*RecordSet"
                        }
                    ],
                    "Signature": "Push(record *Record) *RecordSet",
                    "IsPackageLevel": false
                }
            ],
            "Fields": [
                {
                    "Name": "ResultCount",
                    "Type": "int64"
                },
                {
                    "Name": "Page",
                    "Type": "int"
                },
                {
                    "Name": "TotalPages",
                    "Type": "int"
                },
                {
                    "Name": "RecordsPerPage",
                    "Type": "int"
                },
                {
                    "Name": "Records",
                    "Type": "[]*Record"
                },
                {
                    "Name": "Options",
                    "Type": "map[string]interface{}"
                },
                {
                    "Name": "KnownSize",
                    "Type": "bool"
                }
            ],
            "Source": "dHlwZSBSZWNvcmRTZXQgc3RydWN0IHsKCVJlc3VsdENvdW50ICAgIGludDY0ICAgICAgICAgICAgICAgICAgYGpzb246InJlc3VsdF9jb3VudCJgCglQYWdlICAgICAgICAgICBpbnQgICAgICAgICAgICAgICAgICAgIGBqc29uOiJwYWdlLG9taXRlbXB0eSJgCglUb3RhbFBhZ2VzICAgICBpbnQgICAgICAgICAgICAgICAgICAgIGBqc29uOiJ0b3RhbF9wYWdlcyxvbWl0ZW1wdHkiYAoJUmVjb3Jkc1BlclBhZ2UgaW50ICAgICAgICAgICAgICAgICAgICBganNvbjoicmVjb3Jkc19wZXJfcGFnZSxvbWl0ZW1wdHkiYAoJUmVjb3JkcyAgICAgICAgW10qUmVjb3JkICAgICAgICAgICAgICBganNvbjoicmVjb3JkcyJgCglPcHRpb25zICAgICAgICBtYXBbc3RyaW5nXWludGVyZmFjZXt9IGBqc29uOiJvcHRpb25zImAKCUtub3duU2l6ZSAgICAgIGJvb2wgICAgICAgICAgICAgICAgICAgYGpzb246Imtub3duX3NpemUiYAp9"
        },
        "Relationship": {
            "Name": "Relationship",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "RelatedCollectionName",
                    "PointerReceiver": true,
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "RelatedCollectionName() string",
                    "IsPackageLevel": false
                }
            ],
            "Fields": [
                {
                    "Name": "Keys",
                    "Type": "interface{}"
                },
                {
                    "Name": "Collection",
                    "Type": "*Collection"
                },
                {
                    "Name": "CollectionName",
                    "Type": "string"
                },
                {
                    "Name": "Fields",
                    "Type": "[]string"
                },
                {
                    "Name": "Force",
                    "Type": "bool"
                }
            ],
            "Source": "dHlwZSBSZWxhdGlvbnNoaXAgc3RydWN0IHsKCUtleXMgICAgICAgICAgIGludGVyZmFjZXt9IGBqc29uOiJrZXkiYAoJQ29sbGVjdGlvbiAgICAgKkNvbGxlY3Rpb24gYGpzb246Ii0iYAoJQ29sbGVjdGlvbk5hbWUgc3RyaW5nICAgICAgYGpzb246ImNvbGxlY3Rpb24sb21pdGVtcHR5ImAKCUZpZWxkcyAgICAgICAgIFtdc3RyaW5nICAgIGBqc29uOiJmaWVsZHMsb21pdGVtcHR5ImAKCUZvcmNlICAgICAgICAgIGJvb2wgICAgICAgIGBqc29uOiJmb3JjZSxvbWl0ZW1wdHkiYAp9"
        },
        "SchemaDelta": {
            "Name": "SchemaDelta",
            "MetaType": "struct",
            "Methods": [
                {
                    "Name": "DesiredField",
                    "ReceiverName": "self",
                    "Arguments": [
                        {
                            "Name": "from",
                            "Type": "Field"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "*Field"
                        }
                    ],
                    "Signature": "DesiredField(from Field) *Field",
                    "IsPackageLevel": false
                },
                {
                    "Name": "String",
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "String() string",
                    "IsPackageLevel": false
                }
            ],
            "Fields": [
                {
                    "Name": "Type",
                    "Type": "DeltaType"
                },
                {
                    "Name": "Issue",
                    "Type": "DeltaIssue"
                },
                {
                    "Name": "Message",
                    "Type": "string"
                },
                {
                    "Name": "Collection",
                    "Type": "string"
                },
                {
                    "Name": "Name",
                    "Type": "string"
                },
                {
                    "Name": "Parameter",
                    "Type": "string"
                },
                {
                    "Name": "Desired",
                    "Type": "interface{}"
                },
                {
                    "Name": "Actual",
                    "Type": "interface{}"
                },
                {
                    "Name": "ReferenceField",
                    "Type": "*Field"
                }
            ],
            "Source": "dHlwZSBTY2hlbWFEZWx0YSBzdHJ1Y3QgewoJVHlwZSAgICAgICAgICAgRGVsdGFUeXBlCglJc3N1ZSAgICAgICAgICBEZWx0YUlzc3VlCglNZXNzYWdlICAgICAgICBzdHJpbmcKCUNvbGxlY3Rpb24gICAgIHN0cmluZwoJTmFtZSAgICAgICAgICAgc3RyaW5nCglQYXJhbWV0ZXIgICAgICBzdHJpbmcKCURlc2lyZWQgICAgICAgIGludGVyZmFjZXt9CglBY3R1YWwgICAgICAgICBpbnRlcmZhY2V7fQoJUmVmZXJlbmNlRmllbGQgKkZpZWxkCn0="
        },
        "TestRecord": {
            "Name": "TestRecord",
            "MetaType": "struct",
            "Fields": [
                {
                    "Name": "ID",
                    "Type": "int"
                },
                {
                    "Name": "Name",
                    "Type": "string"
                },
                {
                    "Name": "Size",
                    "Type": "int"
                }
            ],
            "Source": "dHlwZSBUZXN0UmVjb3JkIHN0cnVjdCB7CglJRCAgIGludAoJTmFtZSBzdHJpbmcgYHBpdm90OiJuYW1lLG9taXRlbXB0eSJgCglTaXplIGludCAgICBgcGl2b3Q6InNpemUiYAp9"
        },
        "TestRecordEmbedded": {
            "Name": "TestRecordEmbedded",
            "MetaType": "struct",
            "Fields": [
                {
                    "Name": "Local",
                    "Type": "bool"
                }
            ],
            "Source": "dHlwZSBUZXN0UmVjb3JkRW1iZWRkZWQgc3RydWN0IHsKCVRlc3RSZWNvcmRUd28KCVRlc3RSZWNvcmQKCUxvY2FsIGJvb2wKfQ=="
        },
        "TestRecordThree": {
            "Name": "TestRecordThree",
            "MetaType": "struct",
            "Fields": [
                {
                    "Name": "UUID",
                    "Type": "string"
                }
            ],
            "Source": "dHlwZSBUZXN0UmVjb3JkVGhyZWUgc3RydWN0eyBVVUlEIHN0cmluZyB9"
        },
        "TestRecordTwo": {
            "Name": "TestRecordTwo",
            "MetaType": "struct",
            "Fields": [
                {
                    "Name": "UUID",
                    "Type": "string"
                }
            ],
            "Source": "dHlwZSBUZXN0UmVjb3JkVHdvIHN0cnVjdCB7CglVVUlEIHN0cmluZyBgcGl2b3Q6InV1aWQsaWRlbnRpdHkiYAp9"
        },
        "Type": {
            "Name": "Type",
            "MetaType": "string",
            "Methods": [
                {
                    "Name": "String",
                    "ReceiverName": "self",
                    "Returns": [
                        {
                            "Type": "string"
                        }
                    ],
                    "Signature": "String() string",
                    "IsPackageLevel": false
                },
                {
                    "Name": "ParseFieldType",
                    "Arguments": [
                        {
                            "Name": "in",
                            "Type": "string"
                        }
                    ],
                    "Returns": [
                        {
                            "Type": "Type"
                        }
                    ],
                    "Signature": "ParseFieldType(in string) Type",
                    "Source": "ewoJc3dpdGNoIGluIHsKCWNhc2UgYHN0cmA6CgkJcmV0dXJuIFN0cmluZ1R5cGUKCWNhc2UgYGJvb2xgOgoJCXJldHVybiBCb29sZWFuVHlwZQoJY2FzZSBgaW50YDoKCQlyZXR1cm4gSW50VHlwZQoJY2FzZSBgZmxvYXRgOgoJCXJldHVybiBGbG9hdFR5cGUKCWNhc2UgYHRpbWVgOgoJCXJldHVybiBUaW1lVHlwZQoJY2FzZSBgb2JqZWN0YDoKCQlyZXR1cm4gT2JqZWN0VHlwZQoJY2FzZSBgcmF3YDoKCQlyZXR1cm4gUmF3VHlwZQoJY2FzZSBgYXJyYXlgOgoJCXJldHVybiBBcnJheVR5cGUKCWRlZmF1bHQ6CgkJcmV0dXJuIGBgCgl9Cn0=",
                    "IsPackageLevel": true
                }
            ],
            "Source": "dHlwZSBUeXBlIHN0cmluZw=="
        }
    }
}
